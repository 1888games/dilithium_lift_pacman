# file opened: main.asm 
  1   0000
  2   0000                      device zxspectrum48                                                                                ;allows savebin to work for creating the binaries - at the end of the file
  3   0000                                                                                                                                      ;instead of using OUTPUT before each org - just slightly easier to manage
  4   0000                      include "scripts/data/memory.asm"
# file opened: scripts/data/memory.asm
  1+  0000              RST_38H:                              equ $ff            ;constant for RST 38H instruction for setting vsync interrupt
  2+  0000              irq_enable:                           equ $5000           ;irq enable location in memory map, set 1 to enable 0 to disable
  3+  0000              watchdog:                             equ $50c0           ;watchdog - if not reset every few frames cpu resets - forcing a re-boot known as the watchdog barking
  4+  0000              flip_screen_addr:                     equ $5003            ;if value 0 then normal tilemap, 1 forces flipped tilemap (does not affect sprites)
  5+  0000              hardware_io_area:                     equ $5000             ;hardware mapped memory i/o base
  6+  0000
  7+  0000              tile_ram_play_area:                   equ $4040            ;main tilemap area starts here (top right)-  addr increase vertically down from top - top right tile
  8+  0000              tile_ram_play_area_left:       		  equ $43a0            ;main tilemap area top left tile
  9+  0000              tile_ram_top_area:                    equ $43c0            ;top two rows above tilemap area- addr increase horizontally left from right
 10+  0000              tile_ram_play_area_last:        	  equ $43bf            ;last address of main player area (bottom left corner)
 11+  0000              tile_ram_top_vis:                     equ $43c2             ;first two and last two tiles not visible in each of 2 rows
 12+  0000              tile_ram_top_vis_line1:               equ $43dd              ;top left of visible top row sub to move to next column to right
 13+  0000              tile_ram_top_vis_line2:               equ $43fd             ;second text row at top
 14+  0000              tile_ram_start:                       equ $4000           ;base address of tile ram
 15+  0000              pallete_ram_start:                    equ $4400           ;base address of pallete ram
 16+  0000              pallete_ram_main:                     equ $4440           ;main video area pallete start (after first two rows)
 17+  0000              tile_ram_bot_area:                    equ $4000           ;bottom two rows below tilemap area- addr increase horizontally left from right
 18+  0000              tile_ram_bot_vis:                     equ $4002           ;first two and last two tiles not visible in each of 2 rows
 19+  0000              tile_ram_bot_vis_line1:               equ $401d           ;top left of visible bottom row sub to move to next column to right
 20+  0000              tile_ram_bot_vis_line2:               equ $403d           ;top left of last border row
 21+  0000              user_ram_start:                       equ $4c00            ;start of user allocated RAM
 22+  0000              ram_top:                              equ $4ff0            ;this is where the stack needs to start at
 23+  0000
 24+  0000
 25+  0000              ;-note 8 sprite registers exist but only the middle 6 are actually used by the hardware
 26+  0000              ; $4ff2-3,$4ff4-5,$4ff6-7,$4ff8-9,$4ffa-b,$4ffc-d - for the spritenum, flip and palette
 27+  0000              ; $5062-3,$5064-5,$5066-7,$5068-9,$506a-b,$506c-d - for the x and y positions
 28+  0000
 29+  0000
 30+  0000              sprite_reg:                           equ $4ff2           ;sprite registers start here first byte is number bits 7-2, bit 1 is x flip, bit 0 is y flip                                                                                                                      ;second byte lower nibble is pallete to use for sprite
 31+  0000              spriteXY_reg:                         equ $5062           ;2 bytes starting here for each sprite holding x and y positions on screen
 32+  0000
 33+  0000
 34+  0000
 35+  0000
# file closed: scripts/data/memory.asm
  5   0000                      include "scripts/data/constants.asm"
# file opened: scripts/data/constants.asm
  1+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2+  0000              ; sprite block offsets organised for easy transfer to sprite registers pos and pal, then pos data, then velocities xy
  3+  0000              ; offsets to use when indexed addressing - set index register to sprite0, sprite1 etc...
  4+  0000              ; ld ix,sprite2
  5+  0000              ; ld a,(ix + spr_x)
  6+  0000              ; would allow you to access x position of sprite
  7+  0000              ; this data is cleverly interlaced so sprite number, palettes and xy positions can be easily copied over to the sprite registers each frame
  8+  0000              ; these equates allow us to access the interlaced elements without having to worry about how they are interlaced using indexing
  9+  0000
 10+  0000
 11+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 12+  0000              spr_num:                equ $0            ;sprite number from rom 5f most significant 6 bits bit 1 x flip, bit 0 y flip
 13+  0000              spr_pal:                equ $1             ;palette for sprite - lower nibble only
 14+  0000              spr_x:                  equ $0c             ;x position of sprite
 15+  0000              spr_y:                  equ $0d             ;y position of sprite
 16+  0000              spr_vel_x:              equ $18              ;x velocity of sprite
 17+  0000              spr_vel_y:              equ $19             ;y velocty of sprite
 18+  0000              spr_tile_addr:          equ $24              ;tile address sprite occupies (2 bytes)
 19+  0000              spr_tile_x:             equ $30              ;x tile position (0,0) is top right corner
 20+  0000              spr_tile_y:             equ $31               ;y tile position (27,31) is bottom left corner
 21+  0000              flipx:                  equ 1                                                                ;x flip bit for sprites
 22+  0000              flipy:                  equ 0
 23+  0000
 24+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25+  0000              ; colour pallete constants for pen 3 colour
 26+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 27+  0000              black:               	equ 0;                (hidden)
 28+  0000              red:                 	equ 1;                (blinky)
 29+  0000              pink:                	equ 3;                (pinky)
 30+  0000              cyan:                	equ 5;                (inky)
 31+  0000              orange:              	equ 7;                (clyde)
 32+  0000              yellow:              	equ 9;                (pac-man)
 33+  0000              grey:                	equ $f;                (off-white)
 34+  0000              blue:                	equ $10;        (scared ghost)
 35+  0000              brown:               	equ $15;        (poo ghost)
 36+  0000
 37+  0000              ;some constants for mode setting
 38+  0000              title_mode:                equ $1
 39+  0000              game_mode:                equ $2
 40+  0000              game_over:                equ $4
 41+  0000              life_lost:				equ $8
 42+  0000
 43+  0000              LEFT:				 equ $0
 44+  0000              RIGHT:				 equ $1
 45+  0000              UP:					 equ $2
 46+  0000              DOWN:				 equ $3
 47+  0000
 48+  0000              start_lives:		equ 5
 49+  0000
 50+  0000
 51+  0000              blank_tile:					equ $40
 52+  0000              tile_man: 					equ $23
 53+  0000              tile_droid:					equ $22
 54+  0000              tile_droid_right:			equ $27
 55+  0000              tile_droid_down:			equ $28
 56+  0000              tile_droid_up:				equ $29
 57+  0000              tile_laser:					equ $21
 58+  0000              tile_dilithium:				equ $13
 59+  0000              tile_crystal_1:				equ $14
 60+  0000              tile_crystal_2:				equ $15
 61+  0000              tile_grid:					equ $10
 62+  0000              tile_top:				    equ $11
 63+  0000              tile_side:					equ $12
 64+  0000              tile_dilithium_title:		equ $24
 65+  0000              tile_crystal_title:			equ $26
 66+  0000              tile_grid_right:			equ $2B
 67+  0000              tile_grid_bottom:			equ $2C
 68+  0000              tile_grid_last:				equ $2D
 69+  0000
 70+  0000
 71+  0000
 72+  0000              palette_white_blue_red 		equ 1
 73+  0000              palette_white_blue_pink 	equ 3
 74+  0000              palette_white_blue_cyan 	equ 5
 75+  0000              palette_white_blue_orange	equ 7
 76+  0000              palette_blue_red_yellow		equ 9
 77+  0000              palette_white_black_pink	equ 14
 78+  0000              palette_red_green_white		equ 15
 79+  0000              palette_pink_black_blue		equ 16
 80+  0000              palette_green_blue_pink		equ 17
 81+  0000              palette_green_white_red		equ 18
 82+  0000              palette_red_orange_white	equ 20
 83+  0000              palette_orange_green_orange equ 21
 84+  0000              palette_yellow_lblue_white  equ 22
 85+  0000              palette_dgreen_green_white  equ 23
 86+  0000              palette_cyan_pink_yellow	equ 24
 87+  0000              palette_white_blue_black 	equ 25
 88+  0000
 89+  0000              palette_white_pink_red		equ 29
 90+  0000              palette_pink_black_white	equ 31
 91+  0000
 92+  0000
 93+  0000              colour_man 			 		equ palette_green_blue_pink
 94+  0000              colour_droid_1 			 	equ palette_green_blue_pink
 95+  0000              colour_droid_2 			 	equ palette_blue_red_yellow
 96+  0000              colour_dilithium			equ palette_cyan_pink_yellow
 97+  0000              colour_crystal				equ palette_blue_red_yellow
 98+  0000              colour_laser				equ palette_white_blue_cyan
 99+  0000
100+  0000
101+  0000              copyright_symbol			equ $5C
102+  0000
103+  0000
104+  0000              column_27					equ $40
105+  0000              column_26					equ $60
106+  0000              column_25					equ $80
107+  0000              column_24					equ $A0
108+  0000              column_23					equ $C0
109+  0000              column_22					equ $E0
110+  0000              column_21					equ $100
111+  0000              column_20					equ $120
112+  0000              column_19					equ $140
113+  0000              column_18					equ $160
114+  0000              column_17					equ $180
115+  0000              column_16					equ $1A0
116+  0000              column_15					equ $1C0
117+  0000              column_14					equ $1E0
118+  0000              column_13					equ $200
119+  0000              column_12					equ $220
120+  0000              column_11					equ $240
121+  0000              column_10					equ $260
122+  0000              column_9					equ $280
123+  0000              column_8					equ $2A0
124+  0000              column_7					equ $2C0
125+  0000              column_6					equ $2E0
126+  0000              column_5					equ $300
127+  0000              column_4					equ $320
128+  0000              column_3					equ $340
129+  0000              column_2					equ $360
130+  0000              column_1					equ $380
131+  0000              column_0					equ $3A0
132+  0000
133+  0000
134+  0000              row_0	equ 0
135+  0000              row_1	equ 1
136+  0000              row_2	equ 2
137+  0000              row_3	equ 3
138+  0000              row_4	equ 4
139+  0000              row_5	equ 5
140+  0000              row_6	equ 6
141+  0000              row_7	equ 7
142+  0000              row_8	equ 8
143+  0000              row_9	equ 9
144+  0000              row_10	equ 10
145+  0000              row_11	equ 11
146+  0000              row_12  equ 12
147+  0000              row_13	equ 13
148+  0000              row_14	equ 14
149+  0000              row_15	equ 15
150+  0000              row_16	equ 16
151+  0000              row_17	equ 17
152+  0000              row_18	equ 18
153+  0000              row_19	equ 19
154+  0000              row_20	equ 20
155+  0000              row_21	equ 21
156+  0000              row_22	equ 22
157+  0000              row_23	equ 23
158+  0000              row_24	equ 24
159+  0000              row_25	equ 25
160+  0000              row_26	equ 26
161+  0000              row_27	equ 27
162+  0000              row_28	equ 28
163+  0000              row_29	equ 29
164+  0000              row_30	equ 30
165+  0000              row_31	equ 31
166+  0000              row_32	equ 32
167+  0000              row_33	equ 33
168+  0000              row_34	equ 34
169+  0000              row_35	equ 35
170+  0000              row_36	equ 36
171+  0000              row_37	equ 37
172+  0000
173+  0000
174+  0000              TS 	equ $80
175+  0000              TI 	equ $81
176+  0000              TM 	equ $82
177+  0000              TO 	equ $83
178+  0000              TN 	equ $84
179+  0000              TC 	equ $85
180+  0000              TB 	equ $86
181+  0000              T1 	equ $87
182+  0000              T9 	equ $88
183+  0000              T8 	equ $89
184+  0000              T3 	equ $8A
185+  0000              T_ equ $8B
186+  0000
187+  0000              title_legend_column 	equ column_10
188+  0000              title_key_column 		equ column_7
189+  0000              title_legend_row		equ 16
190+  0000
191+  0000
192+  0000              grid_rows				equ 29
193+  0000              grid_columns			equ 20
194+  0000
195+  0000
196+  0000              EFFECT_TABLE_1  EQU     EffectTable1    ; channel 1 effects. 8 bytes per effect
197+  0000              EFFECT_TABLE_2  EQU     EffectTable2    ; channel 2 effects. 8 bytes per effect
198+  0000              EFFECT_TABLE_3  EQU     EffectTable3    ; channel 3 effects. 8 bytes per effect
199+  0000
# file closed: scripts/data/constants.asm
  6   0000                      include "scripts/data/ram.asm"
# file opened: scripts/data/ram.asm
  1+  0000
  2+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  0000              ; data to be held in ram defined here                                 ;
  5+  0000              ; allocation of bytes for ram area assembler calculates                              ;
  6+  0000              ; addresses based on org statement and user_ram_start ($4c00)                  ;
  7+  0000              ; these are in affect our variables                                                                          ;
  8+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9+  0000              ; db define byte (8 bit value) creates space and sets value
 10+  0000              ; dw define word (16 bit value) creates space and sets value
 11+  0000              ; ds declares space for a number of bytes (often specified using a calculation for the assembler)
 12+  0000              ; defm defines a byte
 13+  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 14+  0000
 15+  0000
 16+  0000                      org user_ram_start                             ;allocate this data at user_ram_start $4c00
 17+  4C00
 18+  4C00 00           waitvsync:                      db 0                   ;if 1 then interrupt is finished and main loop can continue
 19+  4C01 FF           frame_counter:                  db 255                  ;value that increments every frame for stable animation and frame counts - doesn't reset just wraps so mods work consistently
 20+  4C02 00           frame_number:                   db 0                      ;holds a frame number in lsB and second counter in msB 60 to 0 resets to 60 when gets to zero
 21+  4C03 00           seconds_counter:                db 0                      ;quick ref to seconds part
 22+  4C04
 23+  4C04
 24+  4C04 00           full_tile:                      db 0                    ;tile to use by bitmap renderer
 25+  4C05 00           save_reg:                       db 0                   ;temp storage for an 8 bit register
 26+  4C06 00 00        save_sp:                        dw 0                    ;storage area for stack when messing about with it
 27+  4C08 00           joystick_state:                 db 0                     ;holds previous state in upper nibble and current state in lower nibble  IN1 $5000
 28+  4C09 00           start_state:                    db 0                         ;holds current state of input byte IN1 - player 2 joystick and start buttons $5040
 29+  4C0A 00           flip_screen:                    db 0                       ;holds status of flip screen (as i think the location $5003 is write only - it always reads back as ff)
 30+  4C0B 00 00 00...  sprite_data:                    ds 4*6 + 2*6 + 2*6 + 2*6                        ;space for the 6 sprites to store their sprite data
 31+  4C47                                                                          ;4 bytes for sprite, pallete, x and y
 32+  4C47                                                                          ;2 bytes for x and y velocity
 33+  4C47                                                                          ;2 bytes for tile addr (not used)
 34+  4C47                                                                          ;2 bytes for tilex and tiley
 35+  4C47                                                                          ;60 bytes in total for this data
 36+  4C47
 37+  4C47
 38+  4C47 00 00        msg_top_addr                    dw 0                    ;holds address of top changing display text
 39+  4C49 00 00        msg_one_pos:                    dw 0                     ;start addr of top text
 40+  4C4B 00 00        msg_bot_addr:                   dw 0                     ;holds index of in bottom_list text to display at bottom of screen
 41+  4C4D 00           bot_counter:                    db 0                     ;counter for bottom scrolling message display
 42+  4C4E
 43+  4C4E
 44+  4C4E 00           mode:                           db 0                      ;what mode is the system in 1 - title screen, 2 is game, 4 is end of game
 45+  4C4F 00 00 00 00  high_score:                     ds 4                      ;current high score (again 4 bcd bytes)
 46+  4C53 00 00 00 00  current_score:                  ds 4                       ;space for current players score 4 bytes in bcd format (8 digits)
 47+  4C57 00           game_time:                      db 0                       ;holds the game time
 48+  4C58
 49+  4C58 00           current_grid_byte               db 0
 50+  4C59
 51+  4C59 FF           player_moving:                         db 255
 52+  4C5A FF           target_move:                    db 255
 53+  4C5B
 54+  4C5B 09           player_tile_x:                  db 9
 55+  4C5C 0E           player_tile_y:                  db 14
 56+  4C5D 00           player_frame:                   db 0
 57+  4C5E 00           player_start_frame:             db 0
 58+  4C5F 00           player_lives:					db 0
 59+  4C60 00 00        player_screen_location:          ds 2
 60+  4C62
 61+  4C62 00 00 00...  droid_screen_location:			ds 8
 62+  4C6A
 63+  4C6A 00 00        droid_position:					ds 2
 64+  4C6C 00 00        droid_counter:					ds 2
 65+  4C6E 00 00 00...  droid_laser_location:           ds 8
 66+  4C76
 67+  4C76 00           total_dilithium:				ds 1
 68+  4C77
 69+  4C77 00           life_lost_counter:				ds 1
 70+  4C78 00           current_level:					ds 1
 71+  4C79
 72+  4C79 00 00        rand_data:						ds 2
 73+  4C7B
 74+  4C7B                                                                          ;y flip bit for sprites
 75+  4C7B              sprite0:                                equ sprite_data                                                ;quick reference constants to load index registers with for sprite access
 76+  4C7B              sprite1:                                equ sprite_data + 2
 77+  4C7B              sprite2:                                equ sprite_data + 4
 78+  4C7B              sprite3:                                equ sprite_data + 6
 79+  4C7B              sprite4:                                equ sprite_data + 8
 80+  4C7B              sprite5:                                equ sprite_data + $a
 81+  4C7B              sprite_pos:                             equ sprite_data + spr_x
 82+  4C7B              sprite_vels:                            equ sprite_data + spr_vel_x
 83+  4C7B
 84+  4C7B
 85+  4C7B               org $4e8c
 86+  4E8C
 87+  4E8C              SoundDataStart:
 88+  4E8C
 89+  4E8C
 90+  4E8C 00           CH1_FREQ0       ds 1   ; 20 bits
 91+  4E8D 00           CH1_FREQ1      ds 1
 92+  4E8E 00           CH1_FREQ2       ds 1
 93+  4E8F 00           CH1_FREQ3       ds 1
 94+  4E90 00           CH1_FREQ4      ds 1
 95+  4E91 00           CH1_VOL         ds 1
 96+  4E92 00           CH2_FREQ1       ds 1    ; 16 bits
 97+  4E93 00           CH2_FREQ2       ds 1
 98+  4E94 00           CH2_FREQ3       ds 1
 99+  4E95 00           CH2_FREQ4      ds 1
100+  4E96 00           CH2_VOL        ds 1
101+  4E97 00           CH3_FREQ1       ds 1    ; 16 bits
102+  4E98 00           CH3_FREQ2      ds 1
103+  4E99 00           CH3_FREQ3       ds 1
104+  4E9A 00           CH3_FREQ4       ds 1
105+  4E9B 00           CH3_VOL         ds 1
106+  4E9C
107+  4E9C 00           CH1_E_NUM       ds 1    ; effects to play sequentially (bitmask)
108+  4E9D 00           CH1_E_1         ds 1    ; unused
109+  4E9E 00           CH1_E_CUR_BIT   ds 1   ; current effect
110+  4E9F 00           CH1_E_TABLE0   ds 1    ; table of parameters, initially copied from ROM
111+  4EA0 00           CH1_E_TABLE1    ds 1
112+  4EA1 00           CH1_E_TABLE2    ds 1
113+  4EA2 00           CH1_E_TABLE3    ds 1
114+  4EA3 00           CH1_E_TABLE4    ds 1
115+  4EA4 00           CH1_E_TABLE5    ds 1
116+  4EA5 00           CH1_E_TABLE6    ds 1
117+  4EA6 00           CH1_E_TABLE7    ds 1
118+  4EA7 00           CH1_E_TYPE      ds 1
119+  4EA8 00           CH1_E_DURATION  ds 1
120+  4EA9 00           CH1_E_DIR       ds 1
121+  4EAA 00           CH1_E_BASE_FREQ ds 1
122+  4EAB 00           CH1_E_VOL       ds 1
123+  4EAC
124+  4EAC 00           CH2_E_NUM       ds 1    ; effects to play sequentially (bitmask)
125+  4EAD 00           CH2_E_1         ds 1    ; unused
126+  4EAE 00           CH2_E_CUR_BIT   ds 1   ; current effect
127+  4EAF 00           CH2_E_TABLE0   ds 1    ; table of parameters, initially copied from ROM
128+  4EB0 00           CH2_E_TABLE1    ds 1
129+  4EB1 00           CH2_E_TABLE2    ds 1
130+  4EB2 00           CH2_E_TABLE3    ds 1
131+  4EB3 00           CH2_E_TABLE4    ds 1
132+  4EB4 00           CH2_E_TABLE5    ds 1
133+  4EB5 00           CH2_E_TABLE6    ds 1
134+  4EB6 00           CH2_E_TABLE7    ds 1
135+  4EB7 00           CH2_E_TYPE      ds 1
136+  4EB8 00           CH2_E_DURATION  ds 1
137+  4EB9 00           CH2_E_DIR       ds 1
138+  4EBA 00           CH2_E_BASE_FREQ ds 1
139+  4EBB 00           CH2_E_VOL       ds 1
140+  4EBC
141+  4EBC 00           CH3_E_NUM       ds 1    ; effects to play sequentially (bitmask)
142+  4EBD 00           CH3_E_1         ds 1    ; unused
143+  4EBE 00           CH3_E_CUR_BIT   ds 1   ; current effect
144+  4EBF 00           CH3_E_TABLE0   ds 1    ; table of parameters, initially copied from ROM
145+  4EC0 00           CH3_E_TABLE1    ds 1
146+  4EC1 00           CH3_E_TABLE2    ds 1
147+  4EC2 00           CH3_E_TABLE3    ds 1
148+  4EC3 00           CH3_E_TABLE4    ds 1
149+  4EC4 00           CH3_E_TABLE5    ds 1
150+  4EC5 00           CH3_E_TABLE6    ds 1
151+  4EC6 00           CH3_E_TABLE7    ds 1
152+  4EC7 00           CH3_E_TYPE      ds 1
153+  4EC8 00           CH3_E_DURATION  ds 1
154+  4EC9 00           CH3_E_DIR       ds 1
155+  4ECA 00           CH3_E_BASE_FREQ ds 1
156+  4ECB 00           CH3_E_VOL       ds 1
157+  4ECC
158+  4ECC
159+  4ECC 00           CH1_W_NUM       ds 1   ; wave to play (bitmask)
160+  4ECD 00           CH1_W_1        ds 1    ; unused
161+  4ECE 00           CH1_W_CUR_BIT ds 1    ; current wave
162+  4ECF 00           CH1_W_SEL       ds 1
163+  4ED0 00           CH1_W_4         ds 1
164+  4ED1 00           CH1_W_5         ds 1
165+  4ED2 00           CH1_W_OFFSET1   ds 1     ; address in ROM to find the next byte
166+  4ED3 00           CH1_W_OFFSET2  ds 1     ; (16 bits)
167+  4ED4 00           CH1_W_8         ds 1
168+  4ED5 00           CH1_W_9        ds 1
169+  4ED6 00           CH1_W_A         ds 1
170+  4ED7 00           CH1_W_TYPE      ds 1
171+  4ED8 00           CH1_W_DURATION  ds 1
172+  4ED9 00           CH1_W_DIR      ds 1
173+  4EDA 00           CH1_W_BASE_FREQ ds 1
174+  4EDB 00           CH1_W_VOL       ds 1
175+  4EDC
176+  4EDC 00           CH2_W_NUM       ds 1   ; wave to play (bitmask)
177+  4EDD 00           CH2_W_1        ds 1    ; unused
178+  4EDE 00           CH2_W_CUR_BIT ds 1    ; current wave
179+  4EDF 00           CH2_W_SEL       ds 1
180+  4EE0 00           CH2_W_4         ds 1
181+  4EE1 00           CH2_W_5         ds 1
182+  4EE2 00           CH2_W_OFFSET1   ds 1     ; address in ROM to find the next byte
183+  4EE3 00           CH2_W_OFFSET2  ds 1     ; (16 bits)
184+  4EE4 00           CH2_W_8         ds 1
185+  4EE5 00           CH2_W_9        ds 1
186+  4EE6 00           CH2_W_A         ds 1
187+  4EE7 00           CH2_W_TYPE      ds 1
188+  4EE8 00           CH2_W_DURATION  ds 1
189+  4EE9 00           CH2_W_DIR      ds 1
190+  4EEA 00           CH2_W_BASE_FREQ ds 1
191+  4EEB 00           CH2_W_VOL       ds 1
192+  4EEC
193+  4EEC 00           CH3_W_NUM       ds 1   ; wave to play (bitmask)
194+  4EED 00           CH3_W_1        ds 1    ; unused
195+  4EEE 00           CH3_W_CUR_BIT ds 1    ; current wave
196+  4EEF 00           CH3_W_SEL       ds 1
197+  4EF0 00           CH3_W_4         ds 1
198+  4EF1 00           CH3_W_5         ds 1
199+  4EF2 00           CH3_W_OFFSET1   ds 1     ; address in ROM to find the next byte
200+  4EF3 00           CH3_W_OFFSET2  ds 1     ; (16 bits)
201+  4EF4 00           CH3_W_8         ds 1
202+  4EF5 00           CH3_W_9        ds 1
203+  4EF6 00           CH3_W_A         ds 1
204+  4EF7 00           CH3_W_TYPE      ds 1
205+  4EF8 00           CH3_W_DURATION  ds 1
206+  4EF9 00           CH3_W_DIR      ds 1
207+  4EFA 00           CH3_W_BASE_FREQ ds 1
208+  4EFB 00           CH3_W_VOL       ds 1
209+  4EFC
210+  4EFC 00           SOUND_COUNTER   ds 1    ; counter, incremented each VBLANK
211+  4EFD 00                           ds 1
212+  4EFE
213+  4EFE
214+  4EFE              SONG_TABLE_1    EQU     $3bc8
215+  4EFE              SONG_TABLE_2    EQU     $3bcc
216+  4EFE              SONG_TABLE_3    EQU     $3bd0
217+  4EFE
# file closed: scripts/data/ram.asm
  7   4EFE
  8   4EFE                      org     0                                                                                ;tell assembler to assemble from address 0
  9   0000 C3 84 00             jp      start                                                               ;jump to initialisation code
 10   0003
 11   0003
 12   0003
 13   0003                      include "scripts/system/rst.asm"
# file opened: scripts/system/rst.asm
  1+  0003              	org $10
  2+  0010
  3+  0010 85           	add a, l
  4+  0011 6F           	ld l, a
  5+  0012 3E 00        	ld a, 0
  6+  0014 8C           	adc a, h
  7+  0015 67           	ld h, a
  8+  0016 7E           	ld a, (hl)
  9+  0017 C9           	ret
 10+  0018
 11+  0018              	org $18
 12+  0018
 13+  0018 78           	ld a, b
 14+  0019 87           	add a, a
 15+  001A D7           	rst $10
 16+  001B 5F           	ld e, a
 17+  001C 23           	inc hl
 18+  001D 56           	ld d, (hl)
 19+  001E EB           	ex de, hl
 20+  001F C9           	ret
 21+  0020
 22+  0020              	org $20
 23+  0020
 24+  0020 E1           	pop hl
 25+  0021 87           	add a, a
 26+  0022 D7           	rst $10
 27+  0023 5F           	ld e, a
 28+  0024 23           	inc hl
 29+  0025 56           	ld d, (hl)
 30+  0026 EB           	ex de, hl
 31+  0027 E9           	jp (hl)
 32+  0028
 33+  0028
# file closed: scripts/system/rst.asm
 14   0028                      include "scripts/system/vblank.asm"
# file opened: scripts/system/vblank.asm
  1+  0028                                             org $38                                                                                ;assemble from $38 (where the vblank interrupt will jump to)
  2+  0038              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  0038              ; vertical blank interrupt routine
  4+  0038              ; interrupt generated when screen has finished drawing
  5+  0038              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  6+  0038              vblank:
  7+  0038
  8+  0038 F3                   di                                          ;disable any interrupts (so we don't get interrupted)
  9+  0039 F5                   push        af                                        ;save accumulator, flags and registers we are going to destroy
 10+  003A DD E5                push        ix
 11+  003C E5                   push        hl
 12+  003D D5                   push        de
 13+  003E C5                   push        bc
 14+  003F FD E5                push        iy
 15+  0041
 16+  0041 AF                   xor        a                                ;clear accumulator
 17+  0042 32 00 50             ld        (irq_enable),a                   ;disable ints on the board
 18+  0045 32 C0 50             ld        (watchdog),a                       ;reset the watchdog
 19+  0048
 20+  0048                      ;increment frame counter
 21+  0048 3A 01 4C             ld a,(frame_counter)                          ;get current value
 22+  004B 3C                   inc a                                          ;increment
 23+  004C 32 01 4C             ld (frame_counter),a
 24+  004F
 25+  004F                      ;sort out frame counter
 26+  004F 2A 02 4C             ld hl,(frame_number)                             ;get 16 bit frame counter - l holds frame, h holds seconds
 27+  0052 2D                   dec l                                                 ;reduce number of frames by 1
 28+  0053 F2 59 00             jp p,dont_reset_frame_counter                      ;only reset if it goes negative
 29+  0056
 30+  0056
 31+  0056 2E 3B                ld l,$3b                                          ;load back up with 59
 32+  0058 24                   inc h                                           ;add one to seconds
 33+  0059
 34+  0059
 35+  0059              dont_reset_frame_counter:
 36+  0059 22 02 4C             ld (frame_number),hl                           ;store new counter
 37+  005C
 38+  005C
 39+  005C CD 7A 0C             call vblank1
 40+  005F CD E2 0A             call process_effect
 41+  0062 CD 29 0D             call process_wave
 42+  0065
 43+  0065                      ; main vblank routines
 44+  0065 CD 42 01             call set_sprite_data                              ;copy sprite data over to registers
 45+  0068 CD D1 00             call input_manager                                  ;update input states
 46+  006B                      ;call flip_input                                  ;check for screen flip inputs
 47+  006B              vbend:
 48+  006B AF                   xor a                                               ;clear a
 49+  006C 32 C0 50             ld        (watchdog),a                             ;and reset the watchdog
 50+  006F 3C                   inc a                                              ;enable interrupts again
 51+  0070 32 00 50             ld (irq_enable),a
 52+  0073 FD E1                pop        iy                                 ; enable ints on the board
 53+  0075 C1                   pop        bc                                      ;restore registers in reverse order of push
 54+  0076 D1                   pop        de
 55+  0077 E1                   pop        hl
 56+  0078 DD E1                pop        ix
 57+  007A F1                   pop        af
 58+  007B FB                   ei                                                ;enable interrupts again
 59+  007C ED 4D                reti                                               ;return from interrupt
 60+  007E
 61+  007E
 62+  007E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 63+  007E              ; rest frame number to start second counting from 0 frame
 64+  007E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 65+  007E              reset_framenumber:
 66+  007E
 67+  007E 3E 39                ld a,$39                                                                        ;set up frame number for 0 so seconds are reset
 68+  0080 32 02 4C             ld (frame_number),a                                                        ;reset frame number
 69+  0083 C9                   ret
 70+  0084
# file closed: scripts/system/vblank.asm
 15   0084                      include "scripts/system/startup.asm"            // jumps to title.start_title_mode
# file opened: scripts/system/startup.asm
  1+  0084
  2+  0084              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  0084              ; THIS IS THE ENTRY POINT FROM THE JUMP AT ADDRESS 0;
  4+  0084              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  0084              ; sets up z80 interrupt mode and clears all RAM                ;
  6+  0084              ; then initialises code to display screen                        ;
  7+  0084              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8+  0084
  9+  0084                                                                                      ;copy from hl to de, decrementing bc, keep doing until bc = 0
 10+  0084
 11+  0084              start:
 12+  0084
 13+  0084 F3                   di                                                                                        ;disable ints on the CPU
 14+  0085 31 F0 4F             ld  sp,ram_top                                                                ;set up a new stack at the top of ram
 15+  0088 ED 56                im  1                                                                                ;set interrupt mode 1
 16+  008A 3E FF                ld  a,RST_38H                                                                ;$ff is RST 38H instruction opcode
 17+  008C D3 00                out (0),a                                                                        ;set up the interrupt vector through port 0
 18+  008E
 19+  008E
 20+  008E AF                   xor a                                                                                ;clear accumulator quickly 4 t-states rather than lda a,0 which is 7
 21+  008F 32 C0 50             ld  (watchdog),a                                                        ;reset the watchdog
 22+  0092
 23+  0092              clear_user_ram:
 24+  0092
 25+  0092 21 00 4C             ld  hl,user_ram_start                                                ;addr to copy from
 26+  0095 11 01 4C             ld  de,user_ram_start + 1                                        ;addr to copy to
 27+  0098 01 EF 03             ld  bc,$3ef                                                                        ;gonna loop this many times (size of RAM 1007 bytes)
 28+  009B 77                   ld  (hl),a                                                                        ;clear (hl), which then gets copied through to de
 29+  009C ED B0                ldir
 30+  009E                                                                                             ;copy from (hl) to (de) and increment hl and de, decrementing bc, keep doing until bc = 0
 31+  009E
 32+  009E CD A3 06             call clear_tile_ram
 33+  00A1
 34+  00A1 3E 01                 ld  a,$1
 35+  00A3 CD B2 06             call clear_colour_ram
 36+  00A6
 37+  00A6 AF                   xor a                                                                                ;quickly clear accumulator
 38+  00A7 21 F2 4F             ld  hl,sprite_reg                                                        ;clear sprite ram
 39+  00AA 06 10                ld  b,16                                                               ;16 bytes need clearing
 40+  00AC              clear_spr_ram:
 41+  00AC
 42+  00AC 77                   ld  (hl),a                                                                        ;store (zero)
 43+  00AD 23                   inc hl                                                                                ;move to next address
 44+  00AE 10 FC                djnz clear_spr_ram                                                        ;decrement b and branch if not zero yet
 45+  00B0
 46+  00B0 21 00 50             ld  hl,hardware_io_area                                                ;clear hardware mapped memory from $5000 to $5007
 47+  00B3 06 08                ld  b,8
 48+  00B5                                                                                                    ;do 8 bytes worth
 49+  00B5              clear_loop1:
 50+  00B5
 51+  00B5 77                   ld  (hl),a                                                                        ;store a at location
 52+  00B6 23                   inc hl                                                                                ;increment to next location
 53+  00B7 10 FC                djnz clear_loop1                                                        ;loop until b is zero
 54+  00B9
 55+  00B9
 56+  00B9              set_highscore:
 57+  00B9
 58+  00B9 21 00 50             ld hl,$5000                                                                        ;set the 4 low bcd digits
 59+  00BC 22 4F 4C             ld (high_score),hl
 60+  00BF                                                                            ;low bytes are here
 61+  00BF 26 10                ld h,$010                                                                                ;clear h
 62+  00C1 22 51 4C             ld (high_score + 2),hl                                                ;set the upper 4 bcd digits to zero
 63+  00C4
 64+  00C4
 65+  00C4 AF                   xor a                                                                                ;clear a
 66+  00C5 32 C0 50             ld (watchdog),a
 67+  00C8                                                                ;reset the watchdog, to stop it barking
 68+  00C8
 69+  00C8              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 70+  00C8              ; end of hardware initialisation
 71+  00C8              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 72+  00C8
 73+  00C8
 74+  00C8                      ; enable interrupts and start main loop
 75+  00C8 3E 01                ld a,1
 76+  00CA 32 00 50             ld (irq_enable),a                                                        ;enable ints on the board by writing 1 to this address
 77+  00CD FB                   ei                                                                                        ;enable ints on the CPU
 78+  00CE
 79+  00CE C3 BB 01             jp start_title_mode
 80+  00D1
 81+  00D1
# file closed: scripts/system/startup.asm
 16   00D1
 17   00D1                      include "scripts/system/input.asm"
# file opened: scripts/system/input.asm
  1+  00D1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2+  00D1              ; input manager packages the input data from the two io ports
  3+  00D1              ; so it can be used to track button/joystick state in a nice format
  4+  00D1              ;
  5+  00D1              ; keeps stack of current and previous state of inputs
  6+  00D1              ; so we can test whether they are just pressed, held or released
  7+  00D1              ; input manager constants 0 is down 1 is up
  8+  00D1              ; mask status byte first using these
  9+  00D1              ; for joystick_state
 10+  00D1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 11+  00D1              inp_chk_up:                                equ $11                                                                ;mask for looking at up (bits 4 and 0)
 12+  00D1              inp_chk_left:                        equ $22                                                                ;mask for looking at left (bits 5 and 1)
 13+  00D1              inp_chk_right:                        equ $44                                                                ;mask for looking at right (bits 6 and 2)
 14+  00D1              inp_chk_down:                        equ $88                                                                ;mask for looking at down (bits 7 and 3)
 15+  00D1              ;for start_state
 16+  00D1              inp_chk_p1st:                        equ $50                                                                ;mask for looking at p1 start (bits 6 and 4)
 17+  00D1              inp_chk_p2st:                        equ $a0                                                                ;mask for looking at p2 start (bits 7 and 5)
 18+  00D1
 19+  00D1
 20+  00D1              ;comparison constants for player 1 and 2 start buttons
 21+  00D1              inp_p1_presd:                        equ $40                                                                ;check for p1 start pressed bit 6 previous 1 -up bit 4 current down 0 )
 22+  00D1              inp_p2_presd:                        equ $80                                                                ;check for p2 start pressed
 23+  00D1
 24+  00D1
 25+  00D1              inp_p1_relsd:                        equ $10                                                                ;check for p1 start released bit 6 previous 0 -down bit 4 current up 1 )
 26+  00D1              inp_p2_relsd:                        equ $20                                                                ;check for p2 start released
 27+  00D1
 28+  00D1
 29+  00D1              ;comparison constants to check wether just pressed or released
 30+  00D1              inp_up_presd:                        equ $10                                                                ;check for up pressed
 31+  00D1              inp_left_presd:                        equ $20                                                                ;check for left pressed
 32+  00D1              inp_right_presd:                equ $40                                                                ;check for right pressed
 33+  00D1              inp_down_presd:                        equ $80                                                                ;check for down pressed
 34+  00D1
 35+  00D1
 36+  00D1              inp_up_relsd:                        equ $01                                                                ;check for up released
 37+  00D1              inp_left_relsd:                        equ $02                                                                ;check for left released
 38+  00D1              inp_right_relsd:                equ $04                                                                ;check for right released
 39+  00D1              inp_down_relsd:                        equ $08                                                                ;check for down released
 40+  00D1
 41+  00D1
 42+  00D1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 43+  00D1              ; manages processing of previous and current states, for pressed and released behaviour checking
 44+  00D1              ; as well as allowing standard up and down checking
 45+  00D1              ; gets new state and packs this into a byte with the previous state in the upper nibble
 46+  00D1              ; uses a byte for joystick direction and a separate byte for the start buttons
 47+  00D1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 48+  00D1              input_manager:
 49+  00D1                                              ;bit 0 - 3 up,left,right,down
 50+  00D1 3A 08 4C                                     ld a,(joystick_state)                                                ;get joystick state
 51+  00D4 87                                           add a,a
 52+  00D5 87                                           add a,a
 53+  00D6 87                                           add a,a
 54+  00D7 87                                           add a,a                                                                                ;shift lower nibble to upper nibble to move to previous state location
 55+  00D8 E6 F0                                        and $f0                                                                                ;clear lower nibble
 56+  00DA 47                                           ld b,a                                                                                ;store temporarily
 57+  00DB 3A 00 50                                     ld a,($5000)                                                                ;get IN0
 58+  00DE E6 0F                                        and $0f                                                                                ;clear upper nibble
 59+  00E0 B0                                           or b                                                                                ;combine current state with previous state PPPP CCCC
 60+  00E1 32 08 4C                                     ld (joystick_state),a                                                ;and store new previous and current state
 61+  00E4
 62+  00E4
 63+  00E4                                              ;bit 5 is 1p start, bit 6 is 2pstart
 64+  00E4                                              ;do start button states - PPCC xxxx upper hi bits of upper nibble contain previous state, low bits of upper nibble contain current state
 65+  00E4 3A 09 4C                                     ld a,(start_state)                                                        ;get start button state
 66+  00E7 87                                           add a,a
 67+  00E8 87                                           add a,a                                                                                ;shift current two bits to previous position
 68+  00E9 E6 C0                                        and $c0                                                                                ;clear lower 2 bits of upper nibble - and the lower nibble
 69+  00EB 47                                           ld b,a                                                                                ;store temporaily
 70+  00EC 3A 40 50                                     ld a,($5040)                                                                ;get IN1
 71+  00EF 1F                                           rra                                                                                        ;shift two bits to low bits of upper nibble
 72+  00F0 E6 30                                        and $30                                                                                ;clear all bits other than 4 and 5
 73+  00F2 B0                                           or b                                                                                ;combine previous with current PP CC XXXX
 74+  00F3 32 09 4C                                     ld (start_state),a                                                        ;store previous and new states
 75+  00F6 C9                                           ret
 76+  00F7
# file closed: scripts/system/input.asm
 18   00F7                      include "scripts/system/sprite.asm"
# file opened: scripts/system/sprite.asm
  1+  00F7
  2+  00F7              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  00F7              ; not being used just a little mess at flipping screen tiles and also flipping sprites to maintain
  4+  00F7              ; there relative position and velocities
  5+  00F7              ; check player 2 start button test this with up
  6+  00F7              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  00F7
  8+  00F7              flip_input:
  9+  00F7 3A 09 4C             ld a,(start_state)                                                        ;get state
 10+  00FA E6 A0                and inp_chk_p2st                                                        ;examine p2 start
 11+  00FC FE 80                cp inp_p2_presd                                                                ;check for pressed
 12+  00FE C0                   ret nz                                                                                ;not held held 0 means pressed
 13+  00FF 3A 0A 4C             ld a,(flip_screen)                                                        ;get flip screen status value
 14+  0102 2F                   cpl                                                                                        ;flip bit
 15+  0103 32 0A 4C             ld (flip_screen),a                                                        ;store again
 16+  0106 32 03 50             ld (flip_screen_addr),a
 17+  0109                                                                      ;write to flip screen ram - this is a write only location so we need to maintain state ourselves
 18+  0109              ;Notes
 19+  0109              ; sprites have to be flipped manually
 20+  0109              ; this loop works through each sprite it needs to:
 21+  0109              ; flip the x and y flip bits
 22+  0109              ; negate (*-1) the x and y velocities
 23+  0109              ; adjust and compliment the x and y positions
 24+  0109
 25+  0109              flip_all_sprites:
 26+  0109
 27+  0109 11 11 0D             ld de,$0d11                                                                        ;amount to subtract from positions 0d for x and $11 for y
 28+  010C 0E 03                ld c,$03                                                                        ;mask for toggling flip bits (bits 1 and 0)
 29+  010E
 30+  010E DD 21 0B 4C          ld ix,sprite_data                                                        ;load up sprite number data
 31+  0112 06 06                ld b,6
 32+  0114                                                                                                    ;need to do 6 sprites
 33+  0114              .flip_bits:
 34+  0114
 35+  0114 79           		ld a,c                                                                                ;load up flip mask for x and y flip bits
 36+  0115 DD AE 00             xor (ix + spr_num)
 37+  0118 DD 77 00             ld (ix + spr_num),a                                                        ;store flipped version
 38+  011B
 39+  011B                      ;addjust position
 40+  011B DD 7E 0C             ld a,(ix + spr_x)                                                        ;get x position
 41+  011E 92                   sub d                                                                                ;subtract offset
 42+  011F 2F                   cpl                                                                                        ;flip bits
 43+  0120 DD 77 0C             ld (ix + spr_x),a                                                        ;and store
 44+  0123
 45+  0123 DD 7E 0D             ld a,(ix + spr_y)                                                        ;get y position
 46+  0126 93                   sub e                                                                                ;subtract offset
 47+  0127 2F                   cpl                                                                                        ;flip bits
 48+  0128 DD 77 0D             ld (ix + spr_y),a                                                        ;and store
 49+  012B
 50+  012B
 51+  012B                      ;adjust velocities
 52+  012B DD 7E 18             ld a,(ix + spr_vel_x)                                                ;get x velocity
 53+  012E ED 44                neg                                                                                        ;and negate
 54+  0130 DD 77 18             ld (ix + spr_vel_x),a                                                ;and store
 55+  0133
 56+  0133
 57+  0133 DD 7E 19             ld a,(ix + spr_vel_y)                                                ;get y velocity
 58+  0136 ED 44                neg                                                                                        ;and negate
 59+  0138 DD 77 19             ld (ix + spr_vel_y),a                                                ;and store
 60+  013B
 61+  013B
 62+  013B DD 23                inc ix
 63+  013D DD 23                inc ix                                                                                ;skip two bytes to move to next sprite block
 64+  013F 10 D3                djnz .flip_bits                                                                ;perform loop until b is zero
 65+  0141 C9                   ret
 66+  0142
 67+  0142
 68+  0142              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 69+  0142              ; copies sprite data from ram to the sprite registers
 70+  0142              ; places data from sprite variables into the sprite registers
 71+  0142              ; this happens once a frame, but for efficiency you could just manage this manually
 72+  0142              ; for each sprite using custom code
 73+  0142              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 74+  0142
 75+  0142              set_sprite_data:
 76+  0142                      ;first block of data is sprite number(+flip data) and pallete number
 77+  0142 21 0B 4C             ld hl,sprite_data                                                        ;point to sprite data in ram
 78+  0145 11 F2 4F             ld de,sprite_reg                                                        ;point to sprite registers
 79+  0148 01 0C 00             ld bc,12                                                                        ;do for all 6 sprites 2 bytes of data
 80+  014B ED B0                ldir                                                                                ;copy byte (hl) -> (de) inc de and hl, dec bc stop when bc is 0
 81+  014D
 82+  014D
 83+  014D                      ;second block of data is the position data
 84+  014D 11 62 50             ld de,spriteXY_reg                                                        ;point to xy position regsiters
 85+  0150 01 0C 00             ld bc,12                                                                        ;do for all 6 sprites 2 bytes of data
 86+  0153 ED B0                ldir                                                                                ;copy byte (hl) -> (de) inc de and hl, dec bc stop when bc is 0
 87+  0155
 88+  0155
 89+  0155 C9                   ret
 90+  0156
 91+  0156
 92+  0156
 93+  0156              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 94+  0156              ; hides a sprite (by setting it's colour palette to 0)
 95+  0156              ; ix contains base address of sprite data
 96+  0156              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 97+  0156              hide_sprite:
 98+  0156 AF                   xor a                                                                                ;set a to zero
 99+  0157 DD 77 01             ld (ix + spr_pal), a                                                ;store 0 palette for sprite
100+  015A C9                   ret
101+  015B
102+  015B              hide_sprites:
103+  015B
104+  015B DD 21 0B 4C          ld ix, sprite0
105+  015F CD 56 01             call hide_sprite
106+  0162
107+  0162 DD 21 0D 4C          ld ix, sprite1
108+  0166 CD 56 01             call hide_sprite
109+  0169
110+  0169 DD 21 0F 4C          ld ix, sprite2
111+  016D CD 56 01             call hide_sprite
112+  0170
113+  0170 DD 21 11 4C          ld ix, sprite3
114+  0174 CD 56 01             call hide_sprite
115+  0177
116+  0177 DD 21 13 4C          ld ix, sprite4
117+  017B CD 56 01             call hide_sprite
118+  017E
119+  017E DD 21 15 4C          ld ix, sprite5
120+  0182 CD 56 01             call hide_sprite
121+  0185
122+  0185 C9                   ret
123+  0186
124+  0186              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
125+  0186              ; checks to see if a sprite is visible (it's colour is not 0)
126+  0186              ; ix contains base address of sprite data
127+  0186              ; sets status register, zero indicates sprite is hidden
128+  0186              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
129+  0186              is_sprite_hidden:
130+  0186 DD 7E 01             ld a,(ix + spr_pal)                                                        ;pick up palette
131+  0189 A7                   and a                                                                                ;test for zero
132+  018A C9                   ret
133+  018B              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
134+  018B              ; checks to see if a sprite is visible (it's colour is not 0)
135+  018B              ; ix contains base address of sprite data
136+  018B              ; sets status register, non zero indicates sprite is visible
137+  018B              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
138+  018B              is_sprite_visible:
139+  018B DD 7E 01             ld a,(ix + spr_pal)                                                        ;pick up pallete in use
140+  018E 2F                   cpl                                                                                        ;compliment
141+  018F A7                   and a                                                                                ;set flags
142+  0190 C9                   ret
143+  0191
144+  0191
145+  0191              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
146+  0191              ; shows a sprite (by setting it's colour palette to a)
147+  0191              ; ix contains base address of sprite data
148+  0191              ; a contains colour pallete to use
149+  0191              ;
150+  0191              ; to be honest this is written for clarity, you'd do this inline in reality
151+  0191              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
152+  0191              show_sprite:
153+  0191 DD 77 01             ld (ix + spr_pal), a                                                ;store chosen palette for given sprite
154+  0194 C9                   ret
155+  0195
156+  0195
157+  0195
158+  0195              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
159+  0195              ; performs intial copy of sprite data over
160+  0195              ; to the sprite ram area for game mode
161+  0195              ; hl holds address to copy sprite data from
162+  0195              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
163+  0195              set_sprites:
164+  0195 11 0B 4C             ld de,sprite_data                                                        ;address of sprite data in ram
165+  0198 01 18 00             ld bc,4 * 6                                                                        ;get ready to copy all bytes (6 on hardware)
166+  019B ED B0                ldir                                                                                ;copy data to ram
167+  019D
168+  019D
169+  019D 11 23 4C             ld de,sprite_vels                                                        ;get velocity ram location
170+  01A0 01 0C 00             ld bc,2 * 6                                                                ;copy velocities pairs for each sprite
171+  01A3 ED B0                ldir
172+  01A5 C9                   ret
173+  01A6
174+  01A6
175+  01A6              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
176+  01A6              ; updates positions based on velocities
177+  01A6              ; for each of the sprites other than player sprite
178+  01A6              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
179+  01A6              apply_sprites_velocities:
180+  01A6 11 25 4C             ld de,sprite_vels + 2                                                ;get velocity of first sprite - skip sprite 0
181+  01A9 21 19 4C             ld hl,sprite_pos + 2                                                ;get position data for first sprite - skip sprite 0
182+  01AC 06 05                ld b,5                                                                                ;gonna update 5 sprites positions (not including player position)
183+  01AE              spr_vel_loop:
184+  01AE 1A                   ld a,(de)                                                                        ;get x velo of sprite
185+  01AF 86                   add a,(hl)                                                                        ;add x position to x velocity
186+  01B0 77                   ld (hl),a                                                                        ;save new x position
187+  01B1
188+  01B1
189+  01B1 13                   inc de                                                                                ;move to y velocity
190+  01B2 23                   inc hl                                                                                ;move to y position
191+  01B3
192+  01B3 1A                   ld a,(de)                                                                        ;get y velo of sprite
193+  01B4 86                   add a,(hl)                                                                        ;add y position to y velocity
194+  01B5 77                   ld (hl),a                                                                        ;save new y position
195+  01B6
196+  01B6
197+  01B6 13                   inc de                                                                                ;move to next sprite velocities
198+  01B7 23                   inc hl                                                                                ;move to next sprite positions
199+  01B8
200+  01B8
201+  01B8 10 F4                djnz spr_vel_loop                                                        ;keep going if sprites remaining to be updated
202+  01BA C9                   ret
203+  01BB
# file closed: scripts/system/sprite.asm
 19   01BB
 20   01BB                      include "scripts/gameplay/title.asm"
# file opened: scripts/gameplay/title.asm
  1+  01BB              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2+  01BB              ; sets up title screen
  3+  01BB              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  01BB
  5+  01BB              title_location:                         equ tile_ram_start + 0 + column_7
  6+  01BB              author_location:                        equ tile_ram_start + 2 + column_5
  7+  01BB
  8+  01BB              start_title_mode:
  9+  01BB
 10+  01BB 3E 01                ld a,title_mode                                                                ;pick title mode
 11+  01BD 32 4E 4C             ld (mode),a                                                                        ;and store
 12+  01C0
 13+  01C0
 14+  01C0              Title_Author:
 15+  01C0
 16+  01C0 CD A3 06             call clear_tile_ram
 17+  01C3
 18+  01C3 CD 5B 01             call hide_sprites
 19+  01C6
 20+  01C6 11 00 10             ld de,txt_game_title                                                        ;get text addr for game message
 21+  01C9 21 C0 42             ld hl, tile_ram_start + row_0 + column_7                                        ;vram address for text
 22+  01CC 0E 03                ld c,pink                                                                        ;colour red
 23+  01CE CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 24+  01D1
 25+  01D1 11 20 10             ld de,txt_copyright
 26+  01D4 21 02 43             ld hl,tile_ram_start + row_2 + column_5                                     ;vram address for text
 27+  01D7 0E 05                ld c,cyan                                                                    ;colour red
 28+  01D9 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 29+  01DC
 30+  01DC 11 0F 10             ld de,txt_game_author                                                        ;get text addr for game message
 31+  01DF 21 E2 42             ld hl,tile_ram_start + row_2 + column_6                                      ;vram address for text
 32+  01E2 0E 09                ld c,palette_blue_red_yellow                                                                        ;colour red
 33+  01E4 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 34+  01E7
 35+  01E7              Instructions:
 36+  01E7
 37+  01E7 11 22 10             ld de,txt_instruct_1                                                     ;get text addr for game message
 38+  01EA 21 65 43             ld hl,tile_ram_start + row_5 + column_2                                      ;vram address for text
 39+  01ED 0E 05                ld c,cyan                                                                        ;colour red
 40+  01EF CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 41+  01F2
 42+  01F2 11 3B 10             ld de,txt_instruct_2                                                  ;get text addr for game message
 43+  01F5 21 66 43             ld hl,tile_ram_start + row_6 + column_2                                      ;vram address for text                                                                     ;colour red
 44+  01F8 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 45+  01FB
 46+  01FB 11 53 10             ld de,txt_instruct_3                                                   ;get text addr for game message
 47+  01FE 21 67 43             ld hl,tile_ram_start + row_7 + column_2                                      ;vram address for text
 48+  0201                                                                                    ;colour red
 49+  0201 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 50+  0204
 51+  0204 11 6D 10             ld de,txt_instruct_4                                                    ;get text addr for game message
 52+  0207 21 68 43             ld hl,tile_ram_start + row_8 + column_2                                      ;vram address for text                                                                      ;colour red
 53+  020A CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 54+  020D
 55+  020D 11 87 10             ld de,txt_instruct_5                                                   ;get text addr for game message
 56+  0210 21 6A 43             ld hl,tile_ram_start + row_10 + column_2                                      ;vram address for text                                                                     ;colour red
 57+  0213 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 58+  0216
 59+  0216 11 A0 10             ld de,txt_instruct_6                                                   ;get text addr for game message
 60+  0219 21 6B 43             ld hl,tile_ram_start + row_11 + column_2                                      ;vram address for text                                                                    ;colour red
 61+  021C CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 62+  021F
 63+  021F 11 BA 10             ld de,txt_instruct_7                                                  ;get text addr for game message
 64+  0222 21 6C 43             ld hl,tile_ram_start + row_12 + column_2                                      ;vram address for text                                                                      ;colour red
 65+  0225 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 66+  0228
 67+  0228
 68+  0228              Legend:
 69+  0228
 70+  0228 11 DE 10             ld de,txt_man                                                     ;get text addr for game message
 71+  022B 21 70 42             ld hl,tile_ram_start + title_legend_row + title_legend_column                                      ;vram address for text
 72+  022E 0E 03                ld c,pink                                                                      ;colour red
 73+  0230 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 74+  0233
 75+  0233 3E 23                ld a,tile_man
 76+  0235 21 D0 42             ld hl,tile_ram_start + title_legend_row +  title_key_column
 77+  0238 77                   ld (hl), a
 78+  0239 CB D4                set        2,h
 79+  023B 3E 11                ld a,colour_man
 80+  023D 77                   ld (hl),a
 81+  023E
 82+  023E 11 D4 10             ld de,txt_dilithium                                               ;get text addr for game message
 83+  0241 21 72 42             ld hl,tile_ram_start + title_legend_row + 2 + title_legend_column                                      ;vram address for text
 84+  0244 0E 09                ld c,palette_blue_red_yellow                                                                      ;colour red
 85+  0246 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 86+  0249
 87+  0249 3E 13                ld a,tile_dilithium
 88+  024B 21 D2 42             ld hl,tile_ram_start + title_legend_row + 2 +  title_key_column
 89+  024E 77                   ld (hl), a
 90+  024F CB D4                set 2,h
 91+  0251 3E 18                ld a,colour_dilithium
 92+  0253 77                   ld (hl),a
 93+  0254
 94+  0254 11 E2 10             ld de,txt_droid                                                ;get text addr for game message
 95+  0257 21 74 42             ld hl,tile_ram_start + title_legend_row + 4 + title_legend_column                                      ;vram address for text
 96+  025A 0E 10                ld c,palette_pink_black_blue                                                                    ;colour red
 97+  025C CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 98+  025F
 99+  025F 3E 22                ld a,tile_droid
100+  0261 21 D4 42             ld hl,tile_ram_start + title_legend_row + 4 +  title_key_column
101+  0264 77                   ld (hl), a
102+  0265 CB D4                set 2,h
103+  0267 3E 11                ld a,colour_droid_1
104+  0269 77                   ld (hl),a
105+  026A
106+  026A
107+  026A 11 E8 10             ld de,txt_laser                                         ;get text addr for game message
108+  026D 21 76 42             ld hl,tile_ram_start + title_legend_row + 6 + title_legend_column                                      ;vram address for text
109+  0270 0E 05                ld c,cyan                                                                      ;colour red
110+  0272 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
111+  0275
112+  0275 3E 21                ld a,tile_laser
113+  0277 21 D6 42             ld hl,tile_ram_start + title_legend_row + 6 +  title_key_column
114+  027A 77                   ld (hl), a
115+  027B CB D4                set 2,h
116+  027D 3E 05                ld a,colour_laser
117+  027F 77                   ld (hl),a
118+  0280
119+  0280 11 F3 10             ld de,txt_crystal                                     ;get text addr for game message
120+  0283 21 78 42             ld hl,tile_ram_start + title_legend_row + 8 + title_legend_column                                      ;vram address for text
121+  0286 0E 01                ld c,red                                                                    ;colour red
122+  0288 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
123+  028B
124+  028B 3E 26                ld a,tile_crystal_title
125+  028D 21 D8 42             ld hl,tile_ram_start + title_legend_row + 8 +  title_key_column
126+  0290 77                   ld (hl), a
127+  0291 CB D4                set 2,h
128+  0293 3E 09                ld a,colour_crystal
129+  0295 77                   ld (hl),a
130+  0296
131+  0296
132+  0296                      ;setup bottom changing message
133+  0296 21 B3 11             ld hl,bottom_list                                                        ;point to last item in the list for bottom text drawing routine so we cycle round straight away
134+  0299 22 4B 4C             ld (msg_bot_addr),hl                                                ;store in lookup
135+  029C 21 1D 40             ld hl,tile_ram_bot_vis_line1                                ;address of top left row of top border
136+  029F CB D4                set 2,h                                                                                ;force to pallete ram
137+  02A1 3E 09                ld a,yellow                                                                        ;colour pallete for white (pen 3)
138+  02A3 06 1C                ld b,$1c                                                                        ;number of tiles to fill (28 entire columns)
139+  02A5 CD 9E 06             call fill_border_area_row                                        ;set colour for entire top row
140+  02A8
141+  02A8
142+  02A8
143+  02A8                      ;clear any data on second to top line
144+  02A8 11 5B 11             ld de,msg_blank                                                                ;store text addr for instruction message
145+  02AB 21 FD 43             ld hl,tile_ram_top_vis_line2                                ;vram address for second line of tiles
146+  02AE CD 91 06             call borders_blit_text_only                                        ;write text to border
147+  02B1
148+  02B1 11 5B 11             ld de,msg_blank                                                                ;store text addr for instruction message
149+  02B4 21 DD 43             ld hl,tile_ram_top_vis_line1                                ;vram address for second line of tiles
150+  02B7 CD 91 06             call borders_blit_text_only                                        ;write text to border
151+  02BA
152+  02BA
153+  02BA C3 C7 0E             jp wait
154+  02BD
155+  02BD
156+  02BD                                                                                            ;finished setup goto wait section
157+  02BD
158+  02BD
159+  02BD              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
160+  02BD              ; performs logic for title mode
161+  02BD              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
162+  02BD              title_logic:
163+  02BD
164+  02BD 3A 09 4C             ld a,(start_state)                                                        ;get state
165+  02C0 E6 50                and inp_chk_p1st                                                        ;examine p1 start
166+  02C2 FE 40                cp inp_p1_presd                                                                ;check for pressed
167+  02C4 CA CD 02             jp z,start_game                                                                ;0 means pressed so start game
168+  02C7
169+  02C7 CD 33 04             call bot_display_upd                                                ;update text display at bottom of screen
170+  02CA
171+  02CA                     ; jp start_game
172+  02CA C3 C7 0E             jp wait                                                                                ;finished setup goto wait section
173+  02CD
# file closed: scripts/gameplay/title.asm
 21   02CD                      include "scripts/gameplay/start_game.asm"
# file opened: scripts/gameplay/start_game.asm
  1+  02CD
  2+  02CD              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  02CD              ; sets up game screen
  4+  02CD              ; clears screen
  5+  02CD              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  6+  02CD              start_game:
  7+  02CD
  8+  02CD
  9+  02CD
 10+  02CD 3E 05                ld a, start_lives
 11+  02CF 32 5F 4C             ld (player_lives), a
 12+  02D2
 13+  02D2 3E FF                ld a, 255
 14+  02D4 32 78 4C             ld (current_level), a
 15+  02D7
 16+  02D7 21 00 00             ld hl,0                                                                                ;clear
 17+  02DA 22 53 4C             ld (current_score),hl                                                ;reset player score
 18+  02DD 22 55 4C             ld (current_score + 2),hl                                        ;reset player score
 19+  02E0
 20+  02E0 C3 EB 02             jp finishedWaiting
 21+  02E3
 22+  02E3              next_level:
 23+  02E3
 24+  02E3 06 64                ld b, 100
 25+  02E5
 26+  02E5              wait_a_bit
 27+  02E5 32 C0 50             ld        (watchdog),a                       ;reset the watchdog
 28+  02E8 76                   halt
 29+  02E9
 30+  02E9 10 FA                djnz wait_a_bit
 31+  02EB
 32+  02EB              finishedWaiting:
 33+  02EB
 34+  02EB 3E 02                ld a,game_mode                                                                ;pick game mode
 35+  02ED 32 4E 4C             ld (mode),a                                                                        ;and store
 36+  02F0
 37+  02F0 3E 18                ld a,palette_cyan_pink_yellow
 38+  02F2 CD C6 06             call fill_screen_area_colour
 39+  02F5
 40+  02F5 CD A3 06             call clear_tile_ram
 41+  02F8
 42+  02F8
 43+  02F8
 44+  02F8                     ; ld      a,2      ; load HL with sound register
 45+  02F8                    ;  ld (CH1_E_NUM), a          ; play credit sound
 46+  02F8
 47+  02F8                      ;clear old messages
 48+  02F8 11 5B 11             ld de,msg_blank                                                                ;store text addr for instruction message
 49+  02FB 21 FD 43             ld hl,tile_ram_top_vis_line2                                ;vram address for 2nd line of tiles
 50+  02FE CD 91 06             call borders_blit_text_only                                        ;write text to border
 51+  0301 11 5B 11             ld de,msg_blank                                                                ;store text addr for instruction message
 52+  0304 21 1D 40             ld hl,tile_ram_bot_vis_line1                                ;vram address for first of bottom line of tiles
 53+  0307 CD 91 06             call borders_blit_text_only                                        ;write text to border
 54+  030A
 55+  030A
 56+  030A 11 1C 11             ld de,msg_scoring                                                        ;store text addr for scoring message
 57+  030D 21 DD 43             ld hl,tile_ram_top_vis_line1                                ;vram address for first of bottom line of tiles
 58+  0310 0E 05                ld c,cyan                                                                        ;colour (yellow)
 59+  0312 CD 7E 06             call borders_blit_text                                                ;write text to border
 60+  0315
 61+  0315 11 5B 11             ld de,msg_blank                                                        ;store text addr for scoring message
 62+  0318 21 FD 43             ld hl,tile_ram_top_vis_line2                              ;vram address for first of bottom line of tiles
 63+  031B 0E 0F                ld c,grey                                                                       ;colour (yellow)
 64+  031D CD 7E 06             call borders_blit_text                                                ;write text to border
 65+  0320
 66+  0320 CD CE 04             call player_initialise
 67+  0323 CD F9 08             call droid_initialise
 68+  0326
 69+  0326 21 91 14             ld hl,spr_initial_game_data                                        ;addr of game sprite data
 70+  0329 CD 95 01             call set_sprites                                                        ;do initial transfer of sprite data from rom to ram
 71+  032C
 72+  032C 3E 60                ld a,$60                                                                        ;set game counter to 60 (in bcd)
 73+  032E 32 57 4C             ld (game_time),a                                                        ;and store
 74+  0331
 75+  0331 CD 7E 00             call reset_framenumber                                                ;set frame number to 0 so we start at a whole second
 76+  0334
 77+  0334 3A 78 4C             ld a, (current_level)
 78+  0337 3C                   inc a
 79+  0338 32 78 4C             ld (current_level), a
 80+  033B
 81+  033B
 82+  033B E6 07                and %00000111
 83+  033D CD 82 07             call draw_level
 84+  0340
 85+  0340 3A 01 4C             ld a, (frame_counter)
 86+  0343 32 79 4C             ld (rand_data), a
 87+  0346
 88+  0346 ED 44                neg
 89+  0348 32 7A 4C             ld (rand_data + 1), a
 90+  034B
 91+  034B C3 C7 0E             jp wait                                                                                ;finished setup goto wait section
 92+  034E
# file closed: scripts/gameplay/start_game.asm
 22   034E                      include "scripts/gameplay/game_loop.asm"
# file opened: scripts/gameplay/game_loop.asm
  1+  034E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2+  034E              ; performs logic for game mode
  3+  034E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  034E              game_logic:
  5+  034E CD 6F 03             call quit_to_title                                                        ;see if we want to get back to title screen
  6+  0351
  7+  0351
  8+  0351 CD E7 04             call player_one_movement                                        ;control player
  9+  0354
 10+  0354
 11+  0354 3A 59 4C             ld a, (player_moving)
 12+  0357 FA 5D 03             jp m, notMoving
 13+  035A
 14+  035A CD D8 0C             call sfx_walk
 15+  035D
 16+  035D
 17+  035D              notMoving:
 18+  035D
 19+  035D CD 79 04             call player_crystal
 20+  0360 CD 01 08             call droid_update
 21+  0363 CD C8 09             call laser_update
 22+  0366
 23+  0366                      ;display work
 24+  0366 CD F0 03             call show_lives                                                               ;displays timer
 25+  0369 CD 02 04             call show_score
 26+  036C
 27+  036C
 28+  036C                                                                            ;displays player and high score
 29+  036C
 30+  036C
 31+  036C C3 C7 0E             jp wait                                                                                ;finished setup goto wait section
 32+  036F
 33+  036F
 34+  036F              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35+  036F              ; checks to see if player pressed p2 start so they can get
 36+  036F              ; quickly back to title screen
 37+  036F              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38+  036F              quit_to_title:
 39+  036F 3A 09 4C             ld a,(start_state)                                                        ;get state
 40+  0372 E6 A0                and inp_chk_p2st                                                        ;examine p2 start
 41+  0374 FE 80                cp inp_p2_presd                                                                ;check for pressed
 42+  0376 CA BB 01             jp z,start_title_mode                                                ;0 means pressed so quit to title mode
 43+  0379
 44+  0379
 45+  0379              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 46+  0379              ; checks to see if whole second has passed
 47+  0379              ; if so reduces time, if it's zero goes to game over
 48+  0379              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 49+  0379              time_tick:
 50+  0379 3A 02 4C             ld a,(frame_number)                                                        ;get frame number
 51+  037C A7                   and a                                                                                ;see if it is zero
 52+  037D C0                   ret nz                                                                                ;if not then second is not up yet
 53+  037E
 54+  037E
 55+  037E 3A 57 4C             ld a,(game_time)                                                        ;get game time
 56+  0381 3D                   dec a                                                                                ;reduce by one
 57+  0382 27                   daa                                                                                        ;correct for bcd
 58+  0383 32 57 4C             ld (game_time),a                                                        ;store new time
 59+  0386 C0                   ret nz
# file closed: scripts/gameplay/game_loop.asm
 23   0387                      include "scripts/gameplay/game_over.asm"
# file opened: scripts/gameplay/game_over.asm
  1+  0387                                                                                                              ;fall through to game over setup
  2+  0387              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  0387              ; performs logic for game over mode
  4+  0387              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  0387              ;constants
  6+  0387              game_over_top_blank:        equ $42eb                                                        ;address of top blank
  7+  0387              game_over_location:                equ $42ec                                                        ;address to draw game over
  8+  0387              game_over_bot_blank:        equ $42ed
  9+  0387
 10+  0387                                                                      ;address of bottom blank
 11+  0387              start_game_over:
 12+  0387 3E 04                ld a,game_over                                                                ;set mode to game over
 13+  0389 32 4E 4C             ld (mode),a                                                                        ;and store
 14+  038C
 15+  038C
 16+  038C 3E 0A                ld a,10                                                                                ;load up game over time for 10 seconds
 17+  038E 32 57 4C             ld (game_time),a                                                        ;and store, so score is displayed for 10 seconds
 18+  0391
 19+  0391
 20+  0391 3E 09                ld a,yellow                                                                        ;set yellow pallette
 21+  0393 CD C6 06             call fill_screen_area_colour                                ;and fill screen
 22+  0396 3E 8F                ld a,$8f                                                                        ;full tile is checkerboard
 23+  0398 CD D3 06             call fill_screen_area_working_slow                        ;draw tile to screen
 24+  039B
 25+  039B
 26+  039B                      ;hide all sprites
 27+  039B DD 21 0B 4C          ld ix,sprite0                                                                ;get first sprite
 28+  039F 06 06                ld b,6                                                                                ;gonna do for all 6 sprites
 29+  03A1
 30+  03A1              .hide_loop:
 31+  03A1
 32+  03A1 CD 56 01             call hide_sprite                                                        ;hide this sprite
 33+  03A4 DD 23                inc ix                                                                                ;move to next sprite
 34+  03A6 DD 23                inc ix                                                                                ;2 bytes along
 35+  03A8 10 F7                djnz .hide_loop                                                                ;if b not zero loop
 36+  03AA C1                   pop bc                                                                                ;remove return address from stack as we are aborting the call
 37+  03AB
 38+  03AB 11 39 11             ld de,msg_game_over                                                        ;get text addr for game message
 39+  03AE 21 EC 42             ld hl,game_over_location                                        ;vram address for text
 40+  03B1 0E 01                ld c,red                                                                        ;colour red
 41+  03B3 CD 55 06             call main_blit_text_and_colour                                ;write text to main game area
 42+  03B6
 43+  03B6
 44+  03B6 11 4A 11             ld de,msg_gameover_blank                                        ;get text addr for blank portion
 45+  03B9 21 EB 42             ld hl,game_over_top_blank                                        ;vram address for blank
 46+  03BC CD 6C 06             call main_blit_text_only                                        ;write blank to main game area
 47+  03BF
 48+  03BF
 49+  03BF 11 4A 11             ld de,msg_gameover_blank                                        ;get text addr for blank portion
 50+  03C2 21 ED 42             ld hl,game_over_bot_blank                                        ;vram address for blank
 51+  03C5 CD 6C 06             call main_blit_text_only                                        ;write blank to main game area
 52+  03C8
 53+  03C8
 54+  03C8 C3 C7 0E             jp wait                                                                                ;wait for next game loop
 55+  03CB
 56+  03CB
 57+  03CB              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 58+  03CB              ; performs logic for game over mode
 59+  03CB              ; just a countdown timer so no other functions needed
 60+  03CB              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 61+  03CB              game_over_logic:
 62+  03CB CD 6F 03             call quit_to_title                                                        ;see if we want to get back to title screen
 63+  03CE CD F0 03             call show_lives
 64+  03D1
 65+  03D1 3A 02 4C             ld a,(frame_number)                                                        ;get frame number
 66+  03D4 A7                   and a                                                                                ;see if it is zero
 67+  03D5 C2 C7 0E             jp nz,wait                                                                        ;if not then second is not up yet
 68+  03D8
 69+  03D8
 70+  03D8 3A 57 4C             ld a,(game_time)                                                        ;get game time
 71+  03DB 3D                   dec a                                                                                ;reduce by one
 72+  03DC 32 57 4C             ld (game_time),a                                                        ;store new time
 73+  03DF CA BB 01             jp z,start_title_mode                                                ;if zero then go back to title
 74+  03E2
 75+  03E2
 76+  03E2
 77+  03E2 C3 C7 0E             jp wait                                                                                ;finished setup goto wait section
 78+  03E5
# file closed: scripts/gameplay/game_over.asm
 24   03E5                      include "scripts/system/hud.asm"
# file opened: scripts/system/hud.asm
  1+  03E5
  2+  03E5              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  03E5              ; displays time
  4+  03E5              ; in sensible locations on 2nd row
  5+  03E5              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  6+  03E5              ;constants
  7+  03E5              time_location:                equ $43f1                                                                ;address in vram to place time
  8+  03E5              show_time:
  9+  03E5 21 F1 43                     ld hl,time_location                                                ;vram address to write to
 10+  03E8 3A 57 4C                     ld a,(game_time)                                                ;get game time
 11+  03EB 4F                           ld c,a                                                                        ;byte needs to be in c
 12+  03EC CD 5D 04                     call show_hex                                                        ;use hex display as this is a bcd number (so it just works)
 13+  03EF C9                           ret
 14+  03F0
 15+  03F0              show_lives:
 16+  03F0
 17+  03F0 21 F1 43                     ld hl,time_location                                               ;vram address to write to
 18+  03F3 2B                           dec hl
 19+  03F4 3A 5F 4C                     ld a,(player_lives)                                                ;get game time
 20+  03F7 4F                           ld c,a                                                                        ;byte needs to be in c
 21+  03F8 77                           ld (hl), a
 22+  03F9
 23+  03F9
 24+  03F9 21 F5 43                     ld hl,time_location + 4                                              ;vram address to write to
 25+  03FC 2B                           dec hl
 26+  03FD 3A 78 4C                     ld a, (current_level)                                                ;get game time
 27+  0400 4F                           ld c,a                                                                        ;byte needs to be in c
 28+  0401                             // call show_hex                                                        ;use hex display as this is a bcd number (so it just works)
 29+  0401
 30+  0401                                                                                     ;use hex display as this is a bcd number (so it just works)
 31+  0401 C9                           ret
 32+  0402
 33+  0402
 34+  0402
 35+  0402
 36+  0402              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37+  0402              ; displays player score and high score
 38+  0402              ; in sensible locations on 2nd row
 39+  0402              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 40+  0402              ;constants
 41+  0402              hi_score_location:                equ $43e9
 42+  0402              show_score:
 43+  0402
 44+  0402
 45+  0402 21 FD 43             ld hl,tile_ram_top_vis_line2                                ;output on start of top line
 46+  0405
 47+  0405
 48+  0405                      ;ld a,(current_score + 3)                                        ;get player score (hi byte first - little endian)
 49+  0405                      ;ld c,a
 50+  0405                      ;call show_hex                                                                ;output hi byte of score
 51+  0405 3A 55 4C             ld a,(current_score + 2)                                        ;get player score (hi byte first - little endian)
 52+  0408 4F                   ld c,a
 53+  0409 CD 5D 04             call show_hex                                                                ;output hi byte of score
 54+  040C 3A 54 4C             ld a,(current_score + 1)                                        ;get player score (hi byte first - little endian)
 55+  040F 4F                   ld c,a
 56+  0410 CD 5D 04             call show_hex                                                                ;output hi byte of score
 57+  0413 3A 53 4C             ld a,(current_score)                                                ;get player score (hi byte first - little endian)
 58+  0416 4F                   ld c,a
 59+  0417 CD 5D 04             call show_hex                                                                ;output hi byte of score
 60+  041A
 61+  041A
 62+  041A 21 E7 43             ld hl,hi_score_location - 2                                                ;output on right hand side
 63+  041D                      ;ld a,(high_score + 3)                                                ;get player score (hi byte first - little endian)
 64+  041D                     ; ld c,a
 65+  041D                     ; call show_hex                                                                ;output hi byte of score
 66+  041D 3A 51 4C             ld a,(high_score + 2)                                                ;get player score (hi byte first - little endian)
 67+  0420 4F                   ld c,a
 68+  0421 CD 5D 04             call show_hex                                                                ;output hi byte of score
 69+  0424 3A 50 4C             ld a,(high_score + 1)                                                ;get player score (hi byte first - little endian)
 70+  0427 4F                   ld c,a
 71+  0428 CD 5D 04             call show_hex                                                                ;output hi byte of score
 72+  042B 3A 4F 4C             ld a,(high_score)                                                        ;get player score (hi byte first - little endian)
 73+  042E 4F                   ld c,a
 74+  042F CD 5D 04             call show_hex                                                                ;output hi byte of score
 75+  0432
 76+  0432
 77+  0432 C9                   ret
 78+  0433
 79+  0433              bot_display_upd:
 80+  0433 2A 02 4C             ld hl,(frame_number)                                                ;get frame number see if it's 60
 81+  0436 7D                   ld a,l                                                                                ;check frame number
 82+  0437 A7                   and a                                                                                ;to see if it's zero
 83+  0438 C0                   ret nz                                                                                ;don't update if not frame 0
 84+  0439
 85+  0439 3A 78 11             ld a,(bot_mess_seconds)                                                ;get seconds interval for message change
 86+  043C A4                   and h                                                                                ;and with number of seconds gone by
 87+  043D C0                   ret nz                                                                                ;only update if on a 2 second interval, jump onto top display text
 88+  043E
 89+  043E 2A 4B 4C             ld hl,(msg_bot_addr)                                                ;get addr of message to display
 90+  0441 5E                   ld e,(hl)                                                                        ;remember lo-byte first in memory
 91+  0442 23                   inc hl                                                                                ;move to hi-byte
 92+  0443 56                   ld d,(hl)                                                                        ;place in d
 93+  0444 23                   inc hl                                                                                ;point to next addr in array of addresses
 94+  0445 7A                   ld a,d                                                                                ;load hi-byte into for or'ing with the lo-byte
 95+  0446 B3                   or e                                                                                ;see if address is zero (if we or we can test full zero easy)
 96+  0447 C2 51 04             jp nz,process_text_bot_text                                        ;if it isn't display the message
 97+  044A
 98+  044A
 99+  044A 21 B3 11             ld hl,bottom_list                                                        ;reset to first item and re-load into de
100+  044D 5E                   ld e,(hl)                                                                        ;remember lo-byte first in memory
101+  044E 23                   inc hl                                                                                ;move to hi-byte
102+  044F 56                   ld d,(hl)                                                                        ;place in d
103+  0450 23                   inc hl                                                                                ;point to next addr in array of addresses
104+  0451
105+  0451
106+  0451              process_text_bot_text:
107+  0451 22 4B 4C             ld (msg_bot_addr),hl                                                ;store next message to display
108+  0454 21 1D 40             ld        hl,tile_ram_bot_vis_line1                                ;tile address to start writing at
109+  0457 0E 15                ld        c,$15                                                                        ;palette 21 (third colour tan)
110+  0459 CD 91 06             call borders_blit_text_only                                        ;write text to border area
111+  045C C9                   ret
112+  045D
113+  045D
114+  045D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
115+  045D              ; displays a portion of text from a message at the top of the screen
116+  045D              ; updates every 8 frames
117+  045D              ; address of start position is loaded into hl
118+  045D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
119+  045D
120+  045D
121+  045D
# file closed: scripts/system/hud.asm
 25   045D                      include "scripts/system/debug.asm"
# file opened: scripts/system/debug.asm
  1+  045D
  2+  045D
  3+  045D
  4+  045D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  045D              ; HELPER FUNCTIONS
  6+  045D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  045D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8+  045D              ; takes a byte and outputs the hex value to top or bottom rows only
  9+  045D              ; hl holds address of vram to place data
 10+  045D              ; c holds value to output
 11+  045D              ; a little tricky as tiles stored in ascii, so need to do adjustments to move between
 12+  045D              ; the stock digits and the 6 hex additional digits
 13+  045D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 14+  045D              show_hex:
 15+  045D 06 02                ld b,2
 16+  045F                                                                                                                   ;do this twice
 17+  045F              .nibbleout:
 18+  045F
 19+  045F AF                   xor a                                                                                                ;clear carry
 20+  0460 79                   ld a,c                                                                                                ;get byte to output
 21+  0461 07                   rlca
 22+  0462 07                   rlca
 23+  0463 07                   rlca
 24+  0464 07                   rlca                                                                                                ;rotate 4 times to swap nibbles
 25+  0465 4F                   ld c,a                                                                                                ;store temp for next time
 26+  0466 E6 0F                and $f                                                                                                ;mask
 27+  0468 FE 0A                cp $a                                                                                                ;are we bigger than 9
 28+  046A F2 72 04             jp p,.alphahex                                                                                ;adjust for a to f
 29+  046D C6 30                add 48                                                                                                ;it's 0-9 so add 48 for tile number
 30+  046F C3 74 04             jp .output                                                                                        ;now render to screen
 31+  0472              .alphahex:
 32+  0472 C6 37                add 55                                                                                                ;add 55 (so a becomes 65 - ASCII A)
 33+  0474              .output:
 34+  0474 77                   ld (hl),a                                                                                        ;write tile value to vram
 35+  0475 2B                   dec hl                                                                                                ;move to next column on the right for lower nibble
 36+  0476 10 E7                djnz .nibbleout
 37+  0478 C9                   ret
# file closed: scripts/system/debug.asm
 26   0479                      include "scripts/gameplay/collision.asm"
# file opened: scripts/gameplay/collision.asm
  1+  0479
  2+  0479
  3+  0479              player_crystal:
  4+  0479
  5+  0479
  6+  0479 2A 60 4C             ld hl, (player_screen_location)
  7+  047C
  8+  047C 7E                   ld a, (hl)
  9+  047D FE 13                cp tile_dilithium
 10+  047F C2 9B 04             jp nz, no_hit
 11+  0482
 12+  0482 3E 10                ld a, tile_grid
 13+  0484 77                   ld (hl), a
 14+  0485
 15+  0485 3E 10                ld a, $10
 16+  0487 CD 9C 04             call score_points
 17+  048A
 18+  048A CD D0 0C             call sfx_collect
 19+  048D
 20+  048D
 21+  048D
 22+  048D
 23+  048D 3A 76 4C             ld a, (total_dilithium)
 24+  0490 3D                   dec a
 25+  0491                    //  daa
 26+  0491 32 76 4C             ld (total_dilithium), a                                                                    ;set game counter to 60 (in bcd)
 27+  0494 C2 9B 04             jp nz, no_hit
 28+  0497
 29+  0497 C1                   pop bc
 30+  0498
 31+  0498 C3 E3 02             jp next_level                                                                  ;and store
 32+  049B
 33+  049B
 34+  049B              no_hit:
 35+  049B
 36+  049B C9                   ret
 37+  049C
 38+  049C
# file closed: scripts/gameplay/collision.asm
 27   049C                      include "scripts/system/score.asm"
# file opened: scripts/system/score.asm
  1+  049C
  2+  049C
  3+  049C
  4+  049C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  049C              ; increases points scored by player
  6+  049C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  049C              score_points:
  8+  049C 47                   ld b, a
  9+  049D 21 53 4C             ld hl,current_score                                                        ;get start of score (lo byte first)
 10+  04A0 7E                   ld a,(hl)                                                                        ;load into accumulator
 11+  04A1 80                   add a, b                                                                                ;add 90 pts - written in bcd
 12+  04A2 27                   daa                                                                                        ;correct for bcd overflow
 13+  04A3 77                   ld (hl),a                                                                        ;store new value
 14+  04A4 06 03                ld b,3                                                                                ;need to see if the carry propogates through remaining three bcd bytes
 15+  04A6 0E 00                ld c,0                                                                                ;gonna add 0 so quicker to load into register
 16+  04A8              .addloop:
 17+  04A8 23                   inc hl                                                                                ;move to next highest byte
 18+  04A9 7E                   ld a,(hl)                                                                        ;load into accumulator
 19+  04AA 89                   adc c                                                                                ;add zero with carry taken into account
 20+  04AB 27                   daa                                                                                        ;adjust flags to correct for bcd overflow
 21+  04AC 77                   ld (hl),a                                                                        ;store new bcd pair
 22+  04AD 10 F9                djnz .addloop                                                                ;continue loop until b is zero
 23+  04AF
 24+  04AF                      ;now check high score to see if bigger start with high bytes
 25+  04AF 06 04                ld b,4
 26+  04B1 11 57 4C             ld de,current_score + 4                                                ;get high byte first (point one too far as we dec straight away)
 27+  04B4 21 53 4C             ld hl,high_score + 4                                                ;get high byte first (point one too far as we dec straight away)
 28+  04B7              .check_loop:
 29+  04B7 1B                   dec de                                                                                ;move to next most significant bytes
 30+  04B8 2B                   dec hl                                                                                ;for score and high score
 31+  04B9 1A                   ld a,(de)                                                                        ;load score byte
 32+  04BA BE                   cp (hl)                                                                                ;compare with highscore byte (does subtract but doesn't affect a register)
 33+  04BB 27                   daa                                                                                        ;correct for bcd numbers (in case we have 80 and above as these would appear as -ve numbers)
 34+  04BC F8                   ret m                                                                                ;not bigger so stop checking
 35+  04BD C2 C2 04             jp nz,.new_high_score                                                ;if numbers not the same then we have a new high score so stop checking
 36+  04C0 10 F5                djnz .check_loop
 36+  04C2                                                                       ;do for all 4 bytes if necessary (until b = 0)
 37+  04C2
 38+  04C2
 39+  04C2                      ;if here score is better so copy score to highscore
 40+  04C2              .new_high_score:
 41+  04C2 21 53 4C             ld hl,current_score                                                        ;set current score location in hl
 42+  04C5 11 4F 4C             ld de,high_score                                                        ;set highscore location in de and copy
 43+  04C8 01 04 00             ld bc,4                                                                                ;copy 4 bytes from (hl) to (de)
 44+  04CB ED B0                ldir
 45+  04CD
 46+  04CD C9                   ret
# file closed: scripts/system/score.asm
 28   04CE                      //include "scripts/gameplay/bullet.asm"
 29   04CE                      include "scripts/gameplay/player.asm"
# file opened: scripts/gameplay/player.asm
  1+  04CE              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2+  04CE              ; picks up joystick moves
  3+  04CE              ; sets appropriate sprite for horizontal and vertical movement
  4+  04CE              ; and sets flip bits to show sprite correctly
  5+  04CE              ; also alters sprite position by one pixel
  6+  04CE              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  04CE
  8+  04CE
  9+  04CE
 10+  04CE              player_initialise:
 11+  04CE
 12+  04CE 3E 09                ld a, 9
 13+  04D0 21 5B 4C             ld hl, player_tile_x
 14+  04D3 77                   ld (hl), a
 15+  04D4
 16+  04D4 3E 0E                ld a, 14
 17+  04D6 21 5C 4C             ld hl, player_tile_y
 18+  04D9 77                   ld (hl), a
 19+  04DA
 20+  04DA 3E FF                ld a, 255
 21+  04DC 21 59 4C             ld hl, player_moving
 22+  04DF 77                   ld (hl), a
 23+  04E0
 24+  04E0 21 10 42             ld hl, tile_ram_start + column_13 + row_16
 25+  04E3 22 60 4C             ld (player_screen_location), hl
 26+  04E6
 27+  04E6 C9                   ret
 28+  04E7
 29+  04E7
 30+  04E7
 31+  04E7              player_one_movement:
 32+  04E7
 33+  04E7 DD 21 0B 4C          ld ix, sprite0
 34+  04EB FD 21 5A 4C          ld iy, target_move
 35+  04EF 21 59 4C             ld hl, player_moving
 36+  04F2
 37+  04F2
 38+  04F2 7E                   ld a, (hl)
 39+  04F3 FE 00                cp 0
 40+  04F5 FA BC 05             jp m, .checkJoystick
 41+  04F8
 42+  04F8 11 01 4C             ld de, frame_counter
 43+  04FB 1A                   ld a, (de)
 44+  04FC E6 03                and %00000011
 45+  04FE C2 15 05             jp nz, .canMove
 46+  0501
 47+  0501 1A                   ld a, (de)
 48+  0502 E6 04                and %00000100
 49+  0504 C2 BB 05             jp nz, .exit
 50+  0507
 51+  0507 11 5D 4C             ld de, player_frame
 52+  050A 1A                   ld a, (de)
 53+  050B 3C                   inc a
 54+  050C FE 04                cp 4
 55+  050E C2 13 05             jp nz, .noWrap
 56+  0511
 57+  0511 3E 00                ld a, 0
 58+  0513
 59+  0513              .noWrap:
 60+  0513
 61+  0513 12                   ld (de), a
 62+  0514 C9                   ret
 63+  0515
 64+  0515              .canMove:
 65+  0515
 66+  0515 11 5D 4C             ld de, player_frame
 67+  0518 1A                   ld a, (de)
 68+  0519 CB 27                sla a
 69+  051B CB 27                sla a
 70+  051D 47                   ld b, a
 71+  051E
 72+  051E 11 5E 4C             ld de, player_start_frame
 73+  0521 1A                   ld a, (de)
 74+  0522 80                   add a, b
 75+  0523 DD 77 00             ld (ix), a
 76+  0526
 77+  0526 7E                   ld a, (hl)
 78+  0527 FE 00                cp 0
 79+  0529 CA 97 05             jp z, .movingLeft
 80+  052C
 81+  052C FE 01                cp RIGHT
 82+  052E CA 72 05             jp z, .movingRight
 83+  0531
 84+  0531 FE 02                cp UP
 85+  0533 CA 54 05             jp z, .movingUp
 86+  0536
 87+  0536
 88+  0536
 89+  0536              .movingDown:
 90+  0536
 91+  0536 DD 35 0D             dec (ix + spr_y)
 92+  0539 DD 35 0D             dec (ix + spr_y)
 93+  053C
 94+  053C
 95+  053C FD 35 00             dec (iy)
 96+  053F
 97+  053F C2 BB 05             jp nz, .exit
 98+  0542
 99+  0542 3E FF                ld a, 255
100+  0544 77                   ld (hl), a
101+  0545
102+  0545 DD 21 5C 4C          ld ix,player_tile_y
103+  0549 DD 34 00             inc (ix)
104+  054C
105+  054C 21 60 4C             ld hl, player_screen_location
106+  054F 7E                   ld a, (hl)
107+  0550 C6 01                add $1
108+  0552 77                   ld (hl), a
109+  0553
110+  0553 C9                   ret
111+  0554
112+  0554
113+  0554
114+  0554              .movingUp:
115+  0554
116+  0554 DD 34 0D             inc (ix + spr_y)
117+  0557 DD 34 0D             inc (ix + spr_y)
118+  055A
119+  055A FD 35 00             dec (iy)
120+  055D
121+  055D C2 BB 05             jp nz, .exit
122+  0560
123+  0560 3E FF                ld a, 255
124+  0562 77                   ld (hl), a
125+  0563
126+  0563 DD 21 5C 4C          ld ix,player_tile_y
127+  0567 DD 35 00             dec (ix)
128+  056A
129+  056A 21 60 4C             ld hl, player_screen_location
130+  056D 7E                   ld a, (hl)
131+  056E D6 01                sub $1
132+  0570 77                   ld (hl), a
133+  0571
134+  0571                     // ld a, tile_dilithium
135+  0571                    //  ld hl, (player_screen_location)
136+  0571                     // ld (hl), a
137+  0571
138+  0571 C9                   ret
139+  0572
140+  0572
141+  0572              .movingRight:
142+  0572
143+  0572 DD 35 0C             dec (ix + spr_x)
144+  0575 DD 35 0C             dec (ix + spr_x)
145+  0578
146+  0578 FD 35 00             dec (iy)
147+  057B
148+  057B C2 BB 05             jp nz, .exit
149+  057E
150+  057E 3E FF                ld a, 255
151+  0580 77                   ld (hl), a
152+  0581
153+  0581 DD 21 5B 4C          ld ix,player_tile_x
154+  0585 DD 34 00             inc (ix)
155+  0588
156+  0588 2A 60 4C             ld hl, (player_screen_location)
157+  058B 7D                   ld   a,l
158+  058C D6 20                sub  32
159+  058E 6F                   ld   l,a
160+  058F
161+  058F 7C                   ld   a,h
162+  0590 DE 00                sbc  a,0
163+  0592 67                   ld   h,a
164+  0593
165+  0593 22 60 4C             ld (player_screen_location), hl
166+  0596
167+  0596
168+  0596
169+  0596 C9                   ret
170+  0597
171+  0597              .movingLeft:
172+  0597                                                                                      ;point to sprite0 data block
173+  0597 DD 34 0C             inc (ix + spr_x)
174+  059A DD 34 0C             inc (ix + spr_x)
175+  059D
176+  059D FD 35 00             dec (iy)
177+  05A0
178+  05A0 C2 BB 05             jp nz, .exit
179+  05A3
180+  05A3 3E FF                ld a, 255
181+  05A5 77                   ld (hl), a
182+  05A6
183+  05A6 DD 21 5B 4C          ld ix,player_tile_x
184+  05AA DD 35 00             dec (ix)
185+  05AD
186+  05AD
187+  05AD
188+  05AD 2A 60 4C             ld hl, (player_screen_location)
189+  05B0 7D                   ld   a,l
190+  05B1 C6 20                add  32
191+  05B3 6F                   ld   l,a
192+  05B4
193+  05B4 7C                   ld   a,h
194+  05B5 CE 00                adc  a,0
195+  05B7 67                   ld   h,a
196+  05B8
197+  05B8 22 60 4C             ld (player_screen_location), hl
198+  05BB
199+  05BB
200+  05BB
201+  05BB              .exit:
202+  05BB C9                   ret
203+  05BC
204+  05BC
205+  05BC
206+  05BC              .checkJoystick:
207+  05BC
208+  05BC 3A 08 4C             ld a,(joystick_state)                                                ;get joystick state
209+  05BF 47                   ld b,a                                                                                ;and save in b
210+  05C0 E6 22                and inp_chk_left                                                        ;examine left
211+  05C2 A7                   and a                                                                                ;check for pressed
212+  05C3 C2 E5 05             jp nz,.right                                                                ;not held held 0 means pressed
213+  05C6
214+  05C6 21 5B 4C             ld hl, player_tile_x
215+  05C9 7E                   ld a, (hl)
216+  05CA FE 01                cp 1
217+  05CC CA 0B 06             jp z, .upndown
218+  05CF
219+  05CF              .doLeft:
220+  05CF 3E 00                ld a, LEFT
221+  05D1 21 59 4C             ld hl, player_moving
222+  05D4 77                   ld (hl), a
223+  05D5
224+  05D5 3E 04                ld a, 4
225+  05D7 21 5A 4C             ld hl, target_move
226+  05DA 77                   ld (hl), a
227+  05DB
228+  05DB 3E 10                ld a,$4*4
229+  05DD FD 21 5E 4C          ld iy, player_start_frame
230+  05E1 FD 77 00             ld (iy),a                                                                        ;set horizontal tank sprite
231+  05E4
232+  05E4 C9                   ret
233+  05E5
234+  05E5
235+  05E5 78           .right:                        ld a,b                                                                                ;get state again
236+  05E6 E6 44                and inp_chk_right                                                        ;examine right
237+  05E8 A7                   and a                                                                                ;check if pressed
238+  05E9 C2 0B 06             jp nz,.upndown                                                                ;it's non zero so isn't pressed
239+  05EC
240+  05EC
241+  05EC 21 5B 4C             ld hl, player_tile_x
242+  05EF 7E                   ld a, (hl)
243+  05F0 FE 12                cp 18
244+  05F2 CA 0B 06             jp z, .upndown
245+  05F5
246+  05F5              .doRight:
247+  05F5
248+  05F5 3E 01                ld a, RIGHT
249+  05F7 21 59 4C             ld hl, player_moving
250+  05FA 77                   ld (hl), a
251+  05FB
252+  05FB 3E 04                ld a, 4
253+  05FD 21 5A 4C             ld hl, target_move
254+  0600 77                   ld (hl), a
255+  0601
256+  0601
257+  0601 3E 00                ld a,$0*4                                                                        ;horizontal tank *4 to get sprite number in top 6 bits
258+  0603 FD 21 5E 4C          ld iy, player_start_frame
259+  0607 FD 77 00             ld (iy),a                                                                        ;set horizontal tank sprite
260+  060A
261+  060A C9                   ret
262+  060B
263+  060B
264+  060B
265+  060B              .upndown:
266+  060B 78                   ld a,b                                                                                ;get state again
267+  060C E6 11                and inp_chk_up                                                                ;examine up
268+  060E A7                   and a                                                                                ;check if pressed
269+  060F C2 31 06             jp nz,.down                                                                        ;it's non zero so isn't pressed
270+  0612
271+  0612
272+  0612              .doUp:
273+  0612
274+  0612 21 5C 4C             ld hl, player_tile_y
275+  0615 7E                   ld a, (hl)
276+  0616 FE 01                cp 1
277+  0618 CA BB 05             jp z, .exit
278+  061B
279+  061B 3E 02                ld a, UP
280+  061D 21 59 4C             ld hl, player_moving
281+  0620 77                   ld (hl), a
282+  0621
283+  0621 3E 04                ld a, 4
284+  0623 21 5A 4C             ld hl, target_move
285+  0626 77                   ld (hl), a
286+  0627
287+  0627
288+  0627 3E 20                ld a,$8*4                                                                        ;vertical tank *4 to get sprite number in top 6 bits                                                                       ;set vertical tank sprite
289+  0629 FD 21 5E 4C          ld iy, player_start_frame
290+  062D FD 77 00             ld (iy),a                                                                        ;set horizontal tank sprite
291+  0630                                                                            ;no flip y - set to 0 - clear
292+  0630 C9                   ret                                                                                        ;don't bother checker down
293+  0631
294+  0631
295+  0631 78           .down:  ld a,b                                                                                ;get state again
296+  0632 E6 88                and inp_chk_down                                                        ;examine down
297+  0634 A7                   and a                                                                                ;check if pressed
298+  0635 C0                   ret nz                                                                                ;it's non zero so isn't pressed so finish
299+  0636
300+  0636 21 5C 4C             ld hl, player_tile_y
301+  0639 7E                   ld a, (hl)
302+  063A FE 1B                cp grid_rows - 2
303+  063C CA BB 05             jp z, .exit
304+  063F
305+  063F              .doDown:
306+  063F
307+  063F 3E 03                ld a, DOWN
308+  0641 21 59 4C             ld hl, player_moving
309+  0644 77                   ld (hl), a
310+  0645
311+  0645 3E 04                ld a, 4
312+  0647 21 5A 4C             ld hl, target_move
313+  064A 77                   ld (hl), a
314+  064B
315+  064B 3E 30                ld a,$0C*4                                                                        ;veritcal tank *4 to get sprite number in top 6 bits
316+  064D
317+  064D FD 21 5E 4C          ld iy, player_start_frame
318+  0651 FD 77 00             ld (iy),a
319+  0654
320+  0654
321+  0654
322+  0654 C9                   ret
323+  0655
# file closed: scripts/gameplay/player.asm
 30   0655                      include "scripts/system/text.asm"
# file opened: scripts/system/text.asm
  1+  0655
  2+  0655
  3+  0655              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  0655              ; generic text blitting routine for normal areas of screen (28x32 main playfield)
  5+  0655              ; text strings MUST be zero terminated
  6+  0655              ; on entry
  7+  0655              ; de points to text string
  8+  0655              ; hl points to address in vram to print at
  9+  0655              ; c = palette colour of tile
 10+  0655              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 11+  0655              main_blit_text_and_colour:
 12+  0655 1A                   ld        a,(de)                                                                        ;get the byte at de
 13+  0656 13                   inc        de                                                                                ;increment the text pointer
 14+  0657 B7                   or        a                                                                                ;test for string terminator
 15+  0658 C8                   ret z                                                                                ;return if we've finished this string
 16+  0659
 17+  0659 77                   ld        (hl),a                                                                        ;write the byte to vram
 18+  065A CB D4                set        2,h                                                                                ;point hl at colour ram by setting bit 2 of h
 19+  065C 79                   ld        a,c                                                                                ;get colour byte into a
 20+  065D 77                   ld        (hl),a                                                                        ;write the byte to colour ram
 21+  065E 7D                   ld        a,l                                                                                ;low byte of vram/colour address into A
 22+  065F D6 20                sub        32                                                                                ;subtract 32 to move across the screen by 1 char position
 23+  0661 6F                   ld        l,a                                                                                ;store back to l
 24+  0662 CB 94                res        2,h                                                                                ;point hl back at vram by clearing bit 2 of h
 25+  0664 7C                   ld        a,h                                                                                ;handle the carry from the SUB instruction (if there was one)
 26+  0665 DE 00                sbc        a,0                                                                                ;subtract zero and the carry flag from a
 27+  0667 67                   ld        h,a                                                                                ;store back to d
 28+  0668 C3 55 06             jp        main_blit_text_and_colour                                ;loop until we read a zero terminating byte
 29+  066B C9                   ret
 30+  066C
 31+  066C
 32+  066C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33+  066C              ; generic text blitting routine for normal areas of screen (28x32 main playfield)
 34+  066C              ; text strings MUST be zero terminated
 35+  066C              ; on entry
 36+  066C              ; de points to text string
 37+  066C              ; hl points to address in vram to print at
 38+  066C              ; can do this as we don't have mess about with pallette ram
 39+  066C              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 40+  066C              main_blit_text_only:
 41+  066C C5                   push bc                                                                                ;save bc as we are gonna nuke it
 42+  066D 01 20 00             ld bc,32                                                                        ;column skip amount
 43+  0670              .char_loop:
 44+  0670 1A                   ld        a,(de)                                                                        ;get the byte at de
 45+  0671
 46+  0671 13                   inc        de                                                                                ;increment the text pointer
 47+  0672 B7                   or        a                                                                                ;test for string terminator
 48+  0673 CA 7C 06             jp z,.finish                                                                ;return if we've finished this string
 49+  0676
 50+  0676 77                   ld        (hl),a                                                                        ;write the byte to vram
 51+  0677 ED 42                sbc hl,bc                                                                        ;move to next column
 52+  0679 C3 70 06             jp        .char_loop                                                                ;loop until we read a zero terminating byte
 53+  067C              .finish:
 54+  067C C1                   pop bc                                                                                ;retrieve bc
 55+  067D C9                   ret
 56+  067E
 57+  067E
 58+  067E
 59+  067E
 60+  067E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 61+  067E              ; writes text to the top or bottom two rows
 62+  067E              ; on entry
 63+  067E              ; de points to text string
 64+  067E              ; hl points to address in vram to print at
 65+  067E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 66+  067E              borders_blit_text:
 67+  067E 06 1D                ld b,$1d                                                                        ;maximum number of chars to draw in a line (28)
 68+  0680              .blit_loop:
 69+  0680 1A                   ld        a,(de)                                                                        ;get the byte at HL
 70+  0681 13                   inc        de                                                                                ;increment the text pointer
 71+  0682 B7                   or        a                                                                                ;test for string terminator (0)
 72+  0683 C8                   ret z                                                                                ;return if we've finished this string
 73+  0684
 74+  0684 05                   dec b                                                                                ;check maximum characters has not been met
 75+  0685 C8                   ret z                                                                                ;return if we have
 76+  0686
 77+  0686 77                   ld        (hl),a                                                                        ;write the byte to vram
 78+  0687 CB D4                set        2,h                                                                                ;point DE at colour ram by setting bit 2 of D
 79+  0689 79                   ld        a,c                                                                                ;get colour byte into A
 80+  068A 77                   ld        (hl),a                                                                        ;write the byte to colour ram
 81+  068B CB 94                res        2,h                                                                                ;point DE back at vram by clearing bit 2 of D
 82+  068D 2B                           dec hl                                                                                ;move to next column
 83+  068E C3 80 06             jp .blit_loop                                                                ;loop until we read a zero terminating byte
 84+  0691
 85+  0691
 86+  0691              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 87+  0691              ; writes text to the top or bottom two rows
 88+  0691              ; hl contains vram address to write to
 89+  0691              ; de holds address of zero terminated string
 90+  0691              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 91+  0691              borders_blit_text_only:
 92+  0691 06 1D                ld b,$1d                                                                        ;maximum number of chars to draw in a line (28)
 93+  0693              .blit_loop:
 94+  0693 1A                   ld        a,(de)                                                                        ;get the byte at HL
 95+  0694 13                   inc        de                                                                                ;increment the text pointer
 96+  0695 B7                   or        a                                                                                ;test for string terminator (0)
 97+  0696 C8                   ret z                                                                                ;return if we've finished this string
 98+  0697
 99+  0697 05                   dec b                                                                                ;check maximum characters has not been met
100+  0698 C8                   ret z                                                                                ;return if we have
101+  0699
102+  0699 77                   ld        (hl),a                                                                        ;write the byte to vram
103+  069A 2B                   dec hl                                                                                ;move to next column
104+  069B C3 93 06             jp        .blit_loop                                                                ;loop until we read a zero terminating byte
105+  069E
106+  069E
107+  069E
# file closed: scripts/system/text.asm
 31   069E                      include "scripts/system/utility.asm"
# file opened: scripts/system/utility.asm
  1+  069E
  2+  069E
  3+  069E
  4+  069E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  5+  069E              ; fills an entire row in either the top or
  6+  069E              ; bottom border with the value in a
  7+  069E              ; a contains tile/pallete number to write
  8+  069E              ; b contains number of tiles to fill
  9+  069E              ; hl contains tile ram or palette
 10+  069E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 11+  069E              fill_border_area_row:
 12+  069E 77           .write                         ld        (hl),a                                                                        ;store value at current address
 13+  069F 2B                   dec hl                                                                                ;move right one column
 14+  06A0 10 FC                    djnz .write                                                                        ;loop back if we have more to do
 15+  06A2 C9                   ret
 16+  06A3
 17+  06A3              clear_tile_ram:
 18+  06A3
 19+  06A3 3E 40                ld  a,$40                                                                    ;tile number of empty tile
 20+  06A5 21 00 40             ld  hl,tile_ram_start                                                ;clear video ram
 21+  06A8 11 01 40             ld  de,tile_ram_start + 1
 22+  06AB 01 FF 03             ld  bc,$3ff                                                                        ;1k of tile ram
 23+  06AE 77                   ld  (hl),a                                                                        ;clear (hl), which then gets copied through to de
 24+  06AF ED B0                ldir
 25+  06B1 C9                   ret
 26+  06B2
 27+  06B2
 28+  06B2              clear_colour_ram:
 29+  06B2
 30+  06B2                                                                                     ;pallete 1
 31+  06B2 21 00 44             ld  hl,pallete_ram_start                                        ;set all colour ram to palette 1
 32+  06B5 11 01 44             ld  de,pallete_ram_start + 1
 33+  06B8 01 FF 03             ld  bc,$3ff                                                                        ;1k of palette ram
 34+  06BB 77                   ld  (hl),a                                                                        ;clear (hl), which then gets copied through to de
 35+  06BC ED B0                ldir                                                                                ;copy from hl to de, decrementing bc, keep doing until bc = 0
 36+  06BE
 37+  06BE C9                   ret
 38+  06BF
 39+  06BF
 40+  06BF              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 41+  06BF              ; xor's an entire row in either the top or
 42+  06BF              ; bottom border with the a value
 43+  06BF              ; b contains number of tiles to fill
 44+  06BF              ; c contains value to xor
 45+  06BF              ; hl contains tile ram or palette
 46+  06BF              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 47+  06BF              xor_border_area_row:
 48+  06BF              .write
 49+  06BF 79                   ld a,c                                                                                ;load xor mask
 50+  06C0 AE                   xor (hl)                                                                        ;xor with current tile/pallete addr contents
 51+  06C1 77                   ld        (hl),a                                                                        ;write new value
 52+  06C2 2B                   dec hl                                                                                ;move right one column
 53+  06C3 10 FA                    djnz .write                                                                        ;loop back if we have more to do
 54+  06C5 C9                   ret
 55+  06C6              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 56+  06C6              ; fills the entire screen pallete ram with given pallete number
 57+  06C6              ; a contains pen colour to fill tiles with
 58+  06C6              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 59+  06C6              fill_screen_area_colour:
 60+  06C6 21 40 44             ld        hl,pallete_ram_main                                                ;colour ram
 61+  06C9 11 41 44                 ld        de,pallete_ram_main + 1                                        ;one on from hl so we effectively drag the value at hl through vram
 62+  06CC 01 7F 03                 ld        bc,$37f                                                                        ;all but one address needed as we manually set the first one below
 63+  06CF 77                       ld        (hl),a                                                                        ;write first value to hl
 64+  06D0 ED B0                    ldir                                                                                ;copy (hl) -> (de), inc hl, inc de, dec bc, loop until bc = 0
 65+  06D2 C9                   ret
 66+  06D3              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 67+  06D3              ; a contains tile number
 68+  06D3              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 69+  06D3              fill_screen_area_working_slow:
 70+  06D3 21 40 40             ld        hl,tile_ram_play_area                                        ;tile ram
 71+  06D6 11 41 40                 ld        de,tile_ram_play_area + 1                                ;one on from hl so we effectively drag the value at hl through vram
 72+  06D9 01 7F 03                 ld        bc,$37f                                                                        ;all but one address needed as we manually set the first one below
 73+  06DC 77                       ld        (hl),a                                                                        ;write first value to hl
 74+  06DD ED B0                    ldir                                                                                ;copy (hl) -> (de), inc hl, inc de, dec bc, loop until bc = 0
 75+  06DF C9                   ret
 76+  06E0
 77+  06E0
 78+  06E0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 79+  06E0              ; fills a row with given tile/pallete
 80+  06E0              ; hl holds start address to fill
 81+  06E0              ; a holds the tile/palette colour to use
 82+  06E0              ; b holds number of tiles/palettes to draw
 83+  06E0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 84+  06E0              fill_screen_area_row:
 85+  06E0 11 E0 FF             ld de,-32                                                                        ;skip between columns 32 bytes down to move right
 86+  06E3              .write_loop:
 87+  06E3 77                   ld (hl),a                                                                        ;store tile/pallete value
 88+  06E4 19                   add hl,de                                                                        ;move right (back 32 bytes)
 89+  06E5 10 FC                djnz .write_loop                                                        ;have we done the correct number of writes?
 90+  06E7 C9                   ret
 91+  06E8              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 92+  06E8              ; xor's a row with given value - useful for flashing tiles
 93+  06E8              ; hl holds start address to fill
 94+  06E8              ; b holds number of tiles/palettes to draw
 95+  06E8              ; c holds value to xor with tile/pallete
 96+  06E8              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 97+  06E8              xor_screen_area_row:
 98+  06E8 11 E0 FF             ld de,-32                                                                        ;skip between columns 32 bytes down to move right
 99+  06EB              .write_loop:
100+  06EB 79                   ld a,c                                                                                ;load c into
101+  06EC AE                   xor (hl)                                                                        ;and xor value at hl with a
102+  06ED 77                   ld (hl),a                                                                        ;store tile/pallete value
103+  06EE 19                   add hl,de                                                                        ;move right (back 16 bytes)
104+  06EF 10 FA                djnz .write_loop                                                        ;have we done the correct number of writes?
105+  06F1 C9                   ret
106+  06F2
107+  06F2
108+  06F2
109+  06F2
110+  06F2              random:
111+  06F2 E5                   push    hl
112+  06F3 D5                   push    de
113+  06F4 2A 79 4C             ld      hl,(rand_data)
114+  06F7 ED 5F                ld      a,r
115+  06F9 57                   ld      d,a
116+  06FA 5E                   ld      e,(hl)
117+  06FB 19                   add     hl,de
118+  06FC 85                   add     a,l
119+  06FD AC                   xor     h
120+  06FE 22 79 4C             ld      (rand_data),hl
121+  0701 D1                   pop     de
122+  0702 E1                   pop     hl
123+  0703 C9                   ret
# file closed: scripts/system/utility.asm
 32   0704                      include "scripts/system/map.asm"
# file opened: scripts/system/map.asm
  1+  0704
  2+  0704              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  3+  0704              ; takes a wasteful raw tilemap and copies to tile ram
  4+  0704              ; hl contains addr of raw tilemap data
  5+  0704              ; map in this format needs a byte per tile and therefore takes up 896 bytes of rom
  6+  0704              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7+  0704              draw_raw_map_to_screen:
  8+  0704 11 40 40                 ld        de,tile_ram_play_area                                        ;main draw area of screen
  9+  0707 01 80 03                 ld        bc,$380                                                                        ;copy 896 bytes raw
 10+  070A ED B0                    ldir                                                                                ;(hl) -> (de) inc hl, inc de, dec bc, stop if bc = 0
 11+  070C C9                   ret
 12+  070D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 13+  070D              ; sp contains address +1 to push 2 tiles into
 14+  070D              ; it's quicker to use stack pointer to push 2 bytes than using (hl) and increment
 15+  070D              ; de gets destroyed
 16+  070D              ; b contains full block to use
 17+  070D              ; a contains bitmap for tiles
 18+  070D              ; 2 leftmost bits are dropped into carry for testing
 19+  070D              ; to be used as a block of 4 macro calls to process an entire byte (8 rows)
 20+  070D              ; need 4 of these blocks to complete an entire column
 21+  070D              ;
 22+  070D              ; Macro's allow us to create unrolled loops, this processes two bits of data
 23+  070D              ; they have to be populated with local labels as the code is substituted by the assembler
 24+  070D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25+  070D              tile_empty_block:                equ $0f
 26+  070D              tile_full_block:                equ $0e
 27+  070D
 28+  070D
 29+  070D                      MACRO DECODE_AND_PUSH_TWO_TILES
 30+  070D ~                    add a                                                                                ;get msb into carry
 31+  070D ~                    jp c,.fullfirst                                                                ;is it a block (1)
 32+  070D ~                    ld d,tile_empty_block                                                ;no so set empty tile
 33+  070D ~                    jp .next                                                                        ;look at next bit
 34+  070D ~            .fullfirst:                ld d,b                                                                                ;set first to a full tile
 35+  070D ~
 36+  070D ~
 37+  070D ~            .next:                        add a                                                                                ;get msb into carry for msb
 38+  070D ~                    jp c,.fullnext                                                                ;is it a block (1)
 39+  070D ~                    ld e,tile_empty_block                                                ;no sp set set 2nd tile to empty tile
 40+  070D ~                    jp .pushnow                                                                        ;go and perform the push
 41+  070D ~            .fullnext:                ld e,b                                                                                ;set second tile to full tile
 42+  070D ~            .pushnow:                push de                                                                                ;store the tiles on screen
 43+  070D                      ENDM
 44+  070D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 45+  070D              ; this draws a column at a time in reverse (bottom to top) to take advantage of stack pushes
 46+  070D              ; takes a bitmap encoded pixel map and renders to screen in solid tiles
 47+  070D              ; on entry hl holds address of pixel map
 48+  070D              ; a holds tile to use in place of block
 49+  070D              ; $0e is a full block
 50+  070D              ; $7f is hash and $8f is checker pattern
 51+  070D              ; uses the macro above 4 times - to process a full byte of data
 52+  070D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 53+  070D              draw_pixel_map_to_screen:
 54+  070D ED 73 06 4C          ld (save_sp),sp                                                                ;save stack pointer as we are going to use it to store to tile ram
 55+  0711 32 04 4C             ld (full_tile),a                                                        ;save full tile
 56+  0714 31 C0 43             ld sp,tile_ram_play_area_last + 1                        ;set stack pointer to end of main video area + 1 - as push will pre decrement the address
 57+  0717 06 70                ld b,28 * 4                                                                        ;28 columns of data to process 4 bytes per column
 58+  0719              .process_byte:
 59+  0719 78                   ld a,b                                                                                ;copy a to b to move to ram
 60+  071A 32 05 4C             ld (save_reg),a                                                                ;temporarily store b
 61+  071D 3A 04 4C             ld a,(full_tile)                                                        ;get full tile
 62+  0720 47                   ld b,a                                                                                ;and put in b
 63+  0721
 64+  0721 7E                   ld a,(hl)                                                                        ;load bitmap for next eight blocks from map
 65+  0722 23                   inc hl                                                                                ;move to next bitmap ready for next loop
 66+  0723
 67+  0723                                                                                                              ;use 4 copies of the macro to process entire byte
 68+  0723                      DECODE_AND_PUSH_TWO_TILES                                        ;process bits 7 and 6
 68+  0723 87          >        add a                                                                                ;get msb into carry
 68+  0724 DA 2C 07    >        jp c,.fullfirst                                                                ;is it a block (1)
 68+  0727 16 0F       >        ld d,tile_empty_block                                                ;no so set empty tile
 68+  0729 C3 2D 07    >        jp .next                                                                        ;look at next bit
 68+  072C 50          >.fullfirst:                ld d,b                                                                                ;set first to a full tile
 68+  072D             >
 68+  072D             >
 68+  072D 87          >.next:                        add a                                                                                ;get msb into carry for msb
 68+  072E DA 36 07    >        jp c,.fullnext                                                                ;is it a block (1)
 68+  0731 1E 0F       >        ld e,tile_empty_block                                                ;no sp set set 2nd tile to empty tile
 68+  0733 C3 37 07    >        jp .pushnow                                                                        ;go and perform the push
 68+  0736 58          >.fullnext:                ld e,b                                                                                ;set second tile to full tile
 68+  0737 D5          >.pushnow:                push de                                                                                ;store the tiles on screen
 69+  0738                      DECODE_AND_PUSH_TWO_TILES                                        ;process bits 5 and 4
 69+  0738 87          >        add a                                                                                ;get msb into carry
 69+  0739 DA 41 07    >        jp c,.fullfirst                                                                ;is it a block (1)
 69+  073C 16 0F       >        ld d,tile_empty_block                                                ;no so set empty tile
 69+  073E C3 42 07    >        jp .next                                                                        ;look at next bit
 69+  0741 50          >.fullfirst:                ld d,b                                                                                ;set first to a full tile
 69+  0742             >
 69+  0742             >
 69+  0742 87          >.next:                        add a                                                                                ;get msb into carry for msb
 69+  0743 DA 4B 07    >        jp c,.fullnext                                                                ;is it a block (1)
 69+  0746 1E 0F       >        ld e,tile_empty_block                                                ;no sp set set 2nd tile to empty tile
 69+  0748 C3 4C 07    >        jp .pushnow                                                                        ;go and perform the push
 69+  074B 58          >.fullnext:                ld e,b                                                                                ;set second tile to full tile
 69+  074C D5          >.pushnow:                push de                                                                                ;store the tiles on screen
 70+  074D                      DECODE_AND_PUSH_TWO_TILES                                        ;process bits 3 and 2
 70+  074D 87          >        add a                                                                                ;get msb into carry
 70+  074E DA 56 07    >        jp c,.fullfirst                                                                ;is it a block (1)
 70+  0751 16 0F       >        ld d,tile_empty_block                                                ;no so set empty tile
 70+  0753 C3 57 07    >        jp .next                                                                        ;look at next bit
 70+  0756 50          >.fullfirst:                ld d,b                                                                                ;set first to a full tile
 70+  0757             >
 70+  0757             >
 70+  0757 87          >.next:                        add a                                                                                ;get msb into carry for msb
 70+  0758 DA 60 07    >        jp c,.fullnext                                                                ;is it a block (1)
 70+  075B 1E 0F       >        ld e,tile_empty_block                                                ;no sp set set 2nd tile to empty tile
 70+  075D C3 61 07    >        jp .pushnow                                                                        ;go and perform the push
 70+  0760 58          >.fullnext:                ld e,b                                                                                ;set second tile to full tile
 70+  0761 D5          >.pushnow:                push de                                                                                ;store the tiles on screen
 71+  0762                      DECODE_AND_PUSH_TWO_TILES                                        ;process bits 1 and 0
 71+  0762 87          >        add a                                                                                ;get msb into carry
 71+  0763 DA 6B 07    >        jp c,.fullfirst                                                                ;is it a block (1)
 71+  0766 16 0F       >        ld d,tile_empty_block                                                ;no so set empty tile
 71+  0768 C3 6C 07    >        jp .next                                                                        ;look at next bit
 71+  076B 50          >.fullfirst:                ld d,b                                                                                ;set first to a full tile
 71+  076C             >
 71+  076C             >
 71+  076C 87          >.next:                        add a                                                                                ;get msb into carry for msb
 71+  076D DA 75 07    >        jp c,.fullnext                                                                ;is it a block (1)
 71+  0770 1E 0F       >        ld e,tile_empty_block                                                ;no sp set set 2nd tile to empty tile
 71+  0772 C3 76 07    >        jp .pushnow                                                                        ;go and perform the push
 71+  0775 58          >.fullnext:                ld e,b                                                                                ;set second tile to full tile
 71+  0776 D5          >.pushnow:                push de                                                                                ;store the tiles on screen
 72+  0777
 73+  0777 3A 05 4C             ld a,(save_reg)                                                                ;get saved value
 74+  077A 47                   ld b,a                                                                                ;restore b
 75+  077B 10 9C                djnz .process_byte                                                        ;loop to process next byte of map if b is not zero
 76+  077D ED 7B 06 4C          ld sp,(save_sp)                                                                ;restore stack pointer
 77+  0781 C9                   ret
 78+  0782
 79+  0782
 80+  0782              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 81+  0782              ; show pacman maze for start of intro
 82+  0782              ; this is not used but shows how to use a raw map (in this case pac_map_raw:)
 83+  0782              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 84+  0782              ;some constants
 85+  0782              playerone_txt_pallete:        equ $468c
 86+  0782              getready_txt_pallete:        equ $4652
 87+  0782
# file closed: scripts/system/map.asm
 33   0782
 34   0782
 35   0782                      // start of new game
 36   0782                      include "scripts/gameplay/grid.asm"
# file opened: scripts/gameplay/grid.asm
  1+  0782
  2+  0782
  3+  0782              draw_level:
  4+  0782
  5+  0782              	; a = levelID, level pointers a table of words
  6+  0782
  7+  0782 17           	rla
  8+  0783 6F           	ld l, a
  9+  0784 26 00        	ld h, 0
 10+  0786 11 81 14     	ld de, levels
 11+  0789 19           	add hl, de
 12+  078A
 13+  078A 3E 00        	ld a, 0
 14+  078C 32 76 4C     	ld (total_dilithium), a
 15+  078F
 16+  078F 7E           	ld a, (hl)
 17+  0790 23           	inc hl
 18+  0791 66           	ld h, (hl)
 19+  0792 6F           	ld l, a
 20+  0793
 21+  0793 DD 2E 00     	ld ixl, 0
 22+  0796 01 58 4C     	ld bc, current_grid_byte
 23+  0799
 24+  0799              row_loop:
 25+  0799
 26+  0799 11 22 43     	ld de, tile_ram_start + row_2 + column_4
 27+  079C
 28+  079C DD 7D        	ld a, ixl
 29+  079E 83           	add a,e
 30+  079F 5F           	ld e, a
 31+  07A0
 32+  07A0 7A           	ld a, d
 33+  07A1 C6 00        	add a, 0
 34+  07A3 57           	ld d, a
 35+  07A4
 36+  07A4 FD 26 00     	ld iyh, 0
 37+  07A7
 38+  07A7 FD 2E 08     	ld iyl, 8
 39+  07AA CD D2 07     	call byte_loop
 40+  07AD
 41+  07AD FD 2E 08     	ld iyl, 8
 42+  07B0 CD D2 07     	call byte_loop
 43+  07B3
 44+  07B3 FD 2E 03     	ld iyl, 3
 45+  07B6 CD D2 07     	call byte_loop
 46+  07B9
 47+  07B9 3E 1C        	ld a, grid_rows - 1
 48+  07BB DD BD        	cp ixl
 49+  07BD C2 C5 07     	jp nz, not_last_row
 50+  07C0
 51+  07C0 3E 2D        	ld a, tile_grid_last
 52+  07C2 C3 C7 07     	jp draw_tile
 53+  07C5
 54+  07C5
 55+  07C5              not_last_row:
 56+  07C5
 57+  07C5 3E 2B        	ld a, tile_grid_right
 58+  07C7
 59+  07C7              draw_tile:
 60+  07C7
 61+  07C7 12           	ld (de), a
 62+  07C8
 63+  07C8 DD 2C        	inc ixl
 64+  07CA
 65+  07CA 3E 1D        	ld a, grid_rows
 66+  07CC DD BD        	cp ixl
 67+  07CE
 68+  07CE C2 99 07     	jp nz, row_loop
 69+  07D1
 70+  07D1 C9           	ret
 71+  07D2
 72+  07D2
 73+  07D2              byte_loop:
 74+  07D2
 75+  07D2 7E           	ld a, (hl)
 76+  07D3 02           	ld (bc), a
 77+  07D4
 78+  07D4              bit_loop:
 79+  07D4
 80+  07D4 3E 1C        	ld a, grid_rows - 1
 81+  07D6 DD BD        	cp ixl
 82+  07D8 C2 E0 07     	jp nz, not_last
 83+  07DB
 84+  07DB 3E 2C        	ld a, tile_grid_bottom
 85+  07DD C3 F1 07     	jp UseBlankTile
 86+  07E0
 87+  07E0              not_last:
 88+  07E0 0A           	ld a, (bc)
 89+  07E1 17           	rla
 90+  07E2 02           	ld (bc), a
 91+  07E3
 92+  07E3 3E 10        	ld a, tile_grid
 93+  07E5 D2 F1 07     	jp nc, UseBlankTile
 94+  07E8
 95+  07E8 3A 76 4C     	ld a, (total_dilithium)
 96+  07EB 3C           	inc a
 97+  07EC 32 76 4C     	ld (total_dilithium), a
 98+  07EF
 99+  07EF 3E 13        	ld a, tile_dilithium
100+  07F1
101+  07F1              UseBlankTile:
102+  07F1
103+  07F1 12           	ld (de), a
104+  07F2
105+  07F2              MoveRightOneTile:
106+  07F2
107+  07F2 7B           	ld   a,e
108+  07F3 D6 20            sub  32
109+  07F5 5F               ld   e,a
110+  07F6
111+  07F6 7A               ld   a,d
112+  07F7 DE 00            sbc  a,0
113+  07F9 57               ld   d,a
114+  07FA
115+  07FA FD 2D        	dec iyl
116+  07FC
117+  07FC C2 D4 07     	jp nz, bit_loop
118+  07FF
119+  07FF 23           	inc hl
120+  0800
121+  0800 C9           	ret
122+  0801
# file closed: scripts/gameplay/grid.asm
 37   0801                      include "scripts/gameplay/droid.asm"
# file opened: scripts/gameplay/droid.asm
  1+  0801
  2+  0801
  3+  0801
  4+  0801              droid_move_time:    equ 6
  5+  0801
  6+  0801
  7+  0801              droid_update:
  8+  0801
  9+  0801 DD 21 0D 4C      ld ix, sprite1
 10+  0805 DD 7E 0C         ld a, (ix + spr_x)
 11+  0808 FE 00            cp 0
 12+  080A C2 6E 08         jp nz, check_droid_2
 13+  080D
 14+  080D              check_droid_1:
 15+  080D
 16+  080D 21 6C 4C         ld hl, droid_counter
 17+  0810 7E               ld a, (hl)
 18+  0811 FE 00            cp 0
 19+  0813 CA 1A 08         jp z, droid_side_ready
 20+  0816
 21+  0816 35               dec (hl)
 22+  0817 C3 6E 08         jp check_droid_2
 23+  081A
 24+  081A              droid_side_ready:
 25+  081A
 26+  081A
 27+  081A 3E 06            ld a, droid_move_time
 28+  081C 77               ld (hl), a
 29+  081D
 30+  081D 11 6A 4C         ld de, droid_position
 31+  0820 21 5C 4C         ld hl, player_tile_y
 32+  0823 1A               ld a, (de)
 33+  0824 96               sub (hl)
 34+  0825
 35+  0825 CA F6 08         jp z, droid_fire_1
 36+  0828 F2 4D 08         jp p, player_above
 37+  082B
 38+  082B              player_below:
 39+  082B
 40+  082B 1A                ld a, (de)
 41+  082C 3C                inc a
 42+  082D 12                ld (de), a
 43+  082E
 44+  082E ED 5B 62 4C       ld de, (droid_screen_location)
 45+  0832 3E 40             ld a, blank_tile
 46+  0834 12                ld (de), a
 47+  0835
 48+  0835 13                inc de
 49+  0836 ED 53 62 4C       ld (droid_screen_location), de
 50+  083A
 51+  083A 3E 22             ld a, tile_droid
 52+  083C 12                ld (de), a
 53+  083D
 54+  083D ED 5B 64 4C       ld de, (droid_screen_location + 2)
 55+  0841 3E 40             ld a, blank_tile
 56+  0843 12                ld (de), a
 57+  0844
 58+  0844 13                inc de
 59+  0845 ED 53 64 4C       ld (droid_screen_location + 2), de
 60+  0849
 61+  0849 3E 27             ld a, tile_droid_right
 62+  084B 12                ld (de), a
 63+  084C
 64+  084C
 65+  084C C9               ret
 66+  084D
 67+  084D              player_above:
 68+  084D
 69+  084D
 70+  084D 1A                ld a, (de)
 71+  084E 3D                dec a
 72+  084F 12                ld (de), a
 73+  0850
 74+  0850 ED 5B 62 4C       ld de, (droid_screen_location)
 75+  0854 3E 40             ld a, blank_tile
 76+  0856 12                ld (de), a
 77+  0857
 78+  0857 1B                dec de
 79+  0858 ED 53 62 4C       ld (droid_screen_location), de
 80+  085C
 81+  085C 3E 22             ld a, tile_droid
 82+  085E 12                ld (de), a
 83+  085F
 84+  085F ED 5B 64 4C       ld de, (droid_screen_location + 2)
 85+  0863 3E 40             ld a, blank_tile
 86+  0865 12                ld (de), a
 87+  0866
 88+  0866 1B                dec de
 89+  0867 ED 53 64 4C       ld (droid_screen_location + 2), de
 90+  086B
 91+  086B 3E 27             ld a, tile_droid_right
 92+  086D 12                ld (de), a
 93+  086E
 94+  086E
 95+  086E              check_droid_2:
 96+  086E
 97+  086E DD 21 11 4C      ld ix, sprite3
 98+  0872 DD 7E 0C         ld a, (ix + spr_x)
 99+  0875 FE 00            cp 0
100+  0877 C0               ret nz
101+  0878
102+  0878
103+  0878 21 6D 4C         ld hl, droid_counter + 1
104+  087B 7E               ld a, (hl)
105+  087C FE 00            cp 0
106+  087E CA 85 08         jp z, droid_top_ready
107+  0881
108+  0881 35               dec (hl)
109+  0882 C3 F5 08         jp exit_droid
110+  0885
111+  0885              droid_top_ready:
112+  0885
113+  0885
114+  0885 3E 07            ld a, droid_move_time + 1
115+  0887 77               ld (hl), a
116+  0888
117+  0888 11 6B 4C         ld de, droid_position + 1
118+  088B 21 5B 4C         ld hl, player_tile_x
119+  088E 1A               ld a, (de)
120+  088F 96               sub (hl)
121+  0890
122+  0890 CA 93 09         jp z, laser_2_fire
123+  0893 F2 C6 08         jp p, player_left
124+  0896
125+  0896              player_right:
126+  0896
127+  0896 1A                ld a, (de)
128+  0897 3C                inc a
129+  0898 12                ld (de), a
130+  0899
131+  0899 ED 5B 66 4C       ld de, (droid_screen_location + 4)
132+  089D 3E 40             ld a, blank_tile
133+  089F 12                ld (de), a
134+  08A0
135+  08A0 7B                ld a, e
136+  08A1 D6 20             sub 32
137+  08A3 5F                ld e, a
138+  08A4
139+  08A4 7A                ld a, d
140+  08A5 DE 00             sbc 0
141+  08A7 57                ld d, a
142+  08A8
143+  08A8
144+  08A8 ED 53 66 4C       ld (droid_screen_location + 4), de
145+  08AC
146+  08AC 3E 28             ld a, tile_droid_down
147+  08AE 12                ld (de), a
148+  08AF
149+  08AF ED 5B 68 4C       ld de, (droid_screen_location + 6)
150+  08B3 3E 40             ld a, blank_tile
151+  08B5 12                ld (de), a
152+  08B6
153+  08B6 7B                ld a, e
154+  08B7 D6 20             sub 32
155+  08B9 5F                ld e, a
156+  08BA
157+  08BA 7A                ld a, d
158+  08BB DE 00             sbc 0
159+  08BD 57                ld d, a
160+  08BE ED 53 68 4C       ld (droid_screen_location + 6), de
161+  08C2
162+  08C2 3E 29             ld a, tile_droid_up
163+  08C4 12                ld (de), a
164+  08C5
165+  08C5
166+  08C5 C9               ret
167+  08C6
168+  08C6              player_left:
169+  08C6
170+  08C6 1A                ld a, (de)
171+  08C7 3D                dec a
172+  08C8 12                ld (de), a
173+  08C9
174+  08C9 ED 5B 66 4C       ld de, (droid_screen_location + 4)
175+  08CD 3E 40             ld a, blank_tile
176+  08CF 12                ld (de), a
177+  08D0
178+  08D0 7B                ld a, e
179+  08D1 C6 20             add 32
180+  08D3 5F                ld e, a
181+  08D4
182+  08D4 7A                ld a, d
183+  08D5 CE 00             adc 0
184+  08D7 57                ld d, a
185+  08D8
186+  08D8 ED 53 66 4C       ld (droid_screen_location + 4), de
187+  08DC
188+  08DC 3E 28             ld a, tile_droid_down
189+  08DE 12                ld (de), a
190+  08DF
191+  08DF ED 5B 68 4C       ld de, (droid_screen_location + 6)
192+  08E3 3E 40             ld a, blank_tile
193+  08E5 12                ld (de), a
194+  08E6
195+  08E6 7B                ld a, e
196+  08E7 C6 20             add 32
197+  08E9 5F                ld e, a
198+  08EA
199+  08EA 7A                ld a, d
200+  08EB CE 00             adc 0
201+  08ED 57                ld d, a
202+  08EE ED 53 68 4C       ld (droid_screen_location + 6), de
203+  08F2
204+  08F2 3E 29             ld a, tile_droid_up
205+  08F4 12                ld (de), a
206+  08F5
207+  08F5              exit_droid:
208+  08F5 C9               ret
209+  08F6
210+  08F6
211+  08F6
212+  08F6
213+  08F6              droid_fire_1:
214+  08F6
215+  08F6
216+  08F6
217+  08F6 C3 5E 09         jp laser_1_fire
218+  08F9
219+  08F9
220+  08F9
221+  08F9              droid_initialise:
222+  08F9
223+  08F9              droid_1_start_row		equ row_22
224+  08F9              droid_2_start_column  	equ column_8
225+  08F9
226+  08F9 21 56 43     	 ld hl, tile_ram_start + column_3 + droid_1_start_row
227+  08FC 22 62 4C          ld (droid_screen_location), hl
228+  08FF
229+  08FF 3E 22             ld a, tile_droid
230+  0901 77                ld (hl), a
231+  0902
232+  0902 21 B6 40          ld hl, tile_ram_start + column_24 + droid_1_start_row
233+  0905 22 64 4C          ld (droid_screen_location + 2),hl
234+  0908
235+  0908 3E 27             ld a, tile_droid_right
236+  090A 77                ld (hl), a
237+  090B
238+  090B 21 A1 42          ld hl, tile_ram_start + droid_2_start_column + row_1
239+  090E 22 66 4C          ld (droid_screen_location + 4), hl
240+  0911
241+  0911 3E 28             ld a, tile_droid_down
242+  0913 2A 66 4C          ld hl, (droid_screen_location + 4)
243+  0916 77                ld (hl), a
244+  0917
245+  0917 21 BF 42          ld hl, tile_ram_start + droid_2_start_column + row_31
246+  091A 22 68 4C          ld (droid_screen_location + 6), hl
247+  091D
248+  091D 3E 29             ld a, tile_droid_up
249+  091F 77                ld (hl), a
250+  0920
251+  0920 11 6A 4C          ld de, droid_position
252+  0923 3E 14             ld a, 20
253+  0925 12                ld (de), a
254+  0926
255+  0926 13                inc de
256+  0927 3E 04             ld a, 4
257+  0929 12                ld (de), a
258+  092A
259+  092A
260+  092A
261+  092A 21 42 47          ld hl, pallete_ram_start  +column_3 + row_2
262+  092D 11 A2 44          ld de, pallete_ram_start + column_24 + row_2
263+  0930
264+  0930 3E 1C             ld a, grid_rows - 1
265+  0932 47                ld b, a
266+  0933 3E 11             ld a, colour_droid_1
267+  0935
268+  0935              colourLoop1:
269+  0935
270+  0935 77           	 ld (hl), a
271+  0936 12           	 ld (de), a
272+  0937
273+  0937 23           	 inc hl
274+  0938 13           	 inc de
275+  0939
276+  0939 10 FA        	 djnz colourLoop1
277+  093B
278+  093B
279+  093B 21 21 47     	 ld hl, pallete_ram_start  +column_4 + row_1
280+  093E 11 3F 47          ld de, pallete_ram_start + column_4 + row_31
281+  0941
282+  0941
283+  0941 3E 13             ld a, grid_columns - 1
284+  0943 47                ld b, a
285+  0944 DD 2E 09          ld ixl, colour_droid_2
286+  0947
287+  0947              colourLoop2:
288+  0947
289+  0947 DD 7D        	 ld a, ixl
290+  0949
291+  0949 77            	 ld (hl), a
292+  094A 12           	 ld (de), a
293+  094B
294+  094B 7D                ld a, l
295+  094C D6 20             sub 32
296+  094E 6F                ld l, a
297+  094F
298+  094F 7C                ld a, h
299+  0950 DE 00             sbc 0
300+  0952 67                ld h, a
301+  0953
302+  0953 7B                ld a, e
303+  0954 D6 20             sub 32
304+  0956 5F                ld e, a
305+  0957
306+  0957 7A                ld a, d
307+  0958 DE 00             sbc 0
308+  095A 57                ld d, a
309+  095B
310+  095B 10 EA             djnz colourLoop2
311+  095D
312+  095D
313+  095D
314+  095D C9           	ret
# file closed: scripts/gameplay/droid.asm
 38   095E                      include "scripts/gameplay/laser.asm"
# file opened: scripts/gameplay/laser.asm
  1+  095E              laser_1_fire:
  2+  095E
  3+  095E
  4+  095E CD C0 0C         call sfx_fire
  5+  0961
  6+  0961 3E 00        	ld a, 0
  7+  0963 47               ld b, a
  8+  0964
  9+  0964 11 6A 4C         ld de, droid_position
 10+  0967 1A               ld a, (de)
 11+  0968 C6 02            add 2
 12+  096A 4F               ld c, a
 13+  096B DD 21 D7 14      ld ix, tile_row_to_sprite_y
 14+  096F DD 09            add ix, bc
 15+  0971 DD 7E 00         ld a, (ix + 0)
 16+  0974
 17+  0974 FD 21 0D 4C      ld iy, sprite1
 18+  0978 FD 77 0D         ld (iy + spr_y), a
 19+  097B FD 77 0F         ld (iy + spr_y + 2), a
 20+  097E
 21+  097E 3E 04            ld a, 4
 22+  0980 4F               ld c, a
 23+  0981 DD 21 BB 14      ld ix, tile_column_to_sprite_x
 24+  0985 DD 09            add ix, bc
 25+  0987 DD 7E 00         ld a, (ix + 0)
 26+  098A
 27+  098A FD 77 0C         ld (iy + spr_x), a
 28+  098D
 29+  098D                 ; ld a, (ix + tile_ram_to_sprite_pos_x)
 30+  098D
 31+  098D C6 6A           	add -150
 32+  098F FD 77 0E        	ld (iy + spr_x + 2), a
 33+  0992
 34+  0992 C9           	ret
 35+  0993
 36+  0993
 37+  0993              laser_2_fire:
 38+  0993
 39+  0993 CD C8 0C         call sfx_fire_2
 40+  0996
 41+  0996 3E 00        	ld a, 0
 42+  0998 47               ld b, a
 43+  0999
 44+  0999
 45+  0999 11 6B 4C         ld de, droid_position + 1
 46+  099C 1A               ld a, (de)
 47+  099D C6 04            add 4
 48+  099F 4F               ld c, a
 49+  09A0 DD 21 BB 14      ld ix, tile_column_to_sprite_x
 50+  09A4 DD 09            add ix, bc
 51+  09A6 DD 7E 00         ld a, (ix + 0)
 52+  09A9
 53+  09A9 FD 21 11 4C      ld iy, sprite3
 54+  09AD FD 77 0C         ld (iy + spr_x), a
 55+  09B0 FD 77 0E         ld (iy + spr_x + 2), a
 56+  09B3
 57+  09B3 3E 02            ld a, 2
 58+  09B5 4F               ld c, a
 59+  09B6 DD 21 D7 14      ld ix, tile_row_to_sprite_y
 60+  09BA DD 09            add ix, bc
 61+  09BC DD 7E 00         ld a, (ix + 0)
 62+  09BF
 63+  09BF FD 77 0D         ld (iy + spr_y), a
 64+  09C2
 65+  09C2                 ; ld a, (ix + tile_ram_to_sprite_pos_x)
 66+  09C2
 67+  09C2 C6 20           	add -224
 68+  09C4 FD 77 0F        	ld (iy + spr_y + 2), a
 69+  09C7
 70+  09C7 C9           	ret
 71+  09C8
 72+  09C8
 73+  09C8              laser_update:
 74+  09C8
 75+  09C8 3A 01 4C         ld a, (frame_counter)
 76+  09CB E6 0F            and %00001111
 77+  09CD FE 02            cp 2
 78+  09CF D8               ret c
 79+  09D0 FD 21 0D 4C  	ld iy, sprite1
 80+  09D4
 81+  09D4 FD 7E 0C     	ld a, (iy + spr_x)
 82+  09D7 FE 00        	cp 0
 83+  09D9 CA 2A 0A     	jp z, NoUpdate1
 84+  09DC
 85+  09DC
 86+  09DC              laser_1:
 87+  09DC
 88+  09DC FD 35 0C     	dec (iy + spr_x)
 89+  09DF FD 35 0C     	dec (iy + spr_x)
 90+  09E2
 91+  09E2 FD 34 0E     	inc (iy + spr_x + 2)
 92+  09E5 FD 34 0E     	inc (iy + spr_x + 2)
 93+  09E8
 94+  09E8 DD 21 0B 4C      ld ix, sprite0
 95+  09EC DD 7E 0D         ld a, (ix + spr_y)
 96+  09EF FD 96 0D         sub (iy + spr_y)
 97+  09F2 C6 02            add 2
 98+  09F4 FE 04            cp 4
 99+  09F6 D2 19 0A         jp nc, NoHit_1
100+  09F9
101+  09F9              Hit_1:
102+  09F9
103+  09F9 FD 7E 0C         ld a, (iy + spr_x)
104+  09FC DD 96 0C         sub (ix + spr_x)
105+  09FF C6 02            add 2
106+  0A01 FE 04            cp 4
107+  0A03 D2 09 0A         jp nc, NoHit_1_L
108+  0A06
109+  0A06 C3 81 0A         jp DidHit
110+  0A09
111+  0A09
112+  0A09              NoHit_1_L:
113+  0A09
114+  0A09 FD 7E 0E         ld a, (iy + spr_x + 2)
115+  0A0C DD 96 0C         sub (ix + spr_x)
116+  0A0F C6 02            add 2
117+  0A11 FE 04            cp 4
118+  0A13 D2 19 0A         jp nc, NoHit_1
119+  0A16
120+  0A16 C3 81 0A         jp DidHit
121+  0A19
122+  0A19
123+  0A19
124+  0A19              NoHit_1:
125+  0A19
126+  0A19
127+  0A19 FD 7E 0C     	ld a, (iy + spr_x)
128+  0A1C FD BE 0E     	cp (iy + spr_x + 2)
129+  0A1F D2 2A 0A     	jp nc, NoUpdate1
130+  0A22
131+  0A22
132+  0A22 3E 00        	ld a, 0
133+  0A24 FD 77 0C     	ld (iy + spr_x), a
134+  0A27 FD 77 0E     	ld (iy + spr_x + 2), a
135+  0A2A
136+  0A2A
137+  0A2A
138+  0A2A              NoUpdate1:
139+  0A2A
140+  0A2A FD 21 11 4C  	ld iy, sprite3
141+  0A2E
142+  0A2E FD 7E 0C     	ld a, (iy + spr_x)
143+  0A31 FE 00        	cp 0
144+  0A33 C8           	ret z
145+  0A34
146+  0A34              laser2:
147+  0A34
148+  0A34
149+  0A34
150+  0A34 FD 35 0D     	dec (iy + spr_y)
151+  0A37 FD 35 0D     	dec (iy + spr_y)
152+  0A3A
153+  0A3A FD 34 0F     	inc (iy + spr_y + 2)
154+  0A3D FD 34 0F     	inc (iy + spr_y + 2)
155+  0A40
156+  0A40 DD 21 0B 4C      ld ix, sprite0
157+  0A44 DD 7E 0C         ld a, (ix + spr_x)
158+  0A47 FD 96 0C         sub (iy + spr_x)
159+  0A4A C6 02            add 2
160+  0A4C FE 04            cp 4
161+  0A4E D2 71 0A         jp nc, NoHit_2
162+  0A51
163+  0A51              Hit_2:
164+  0A51
165+  0A51 FD 7E 0D         ld a, (iy + spr_y)
166+  0A54 DD 96 0D         sub (ix + spr_y)
167+  0A57 C6 02            add 2
168+  0A59 FE 04            cp 4
169+  0A5B D2 61 0A         jp nc, NoHit_2_L
170+  0A5E
171+  0A5E                  ;call lose_set
172+  0A5E
173+  0A5E C3 81 0A         jp DidHit
174+  0A61
175+  0A61              NoHit_2_L:
176+  0A61
177+  0A61 FD 7E 0F         ld a, (iy + spr_y +2)
178+  0A64 DD 96 0D         sub (ix + spr_y)
179+  0A67 C6 02            add 2
180+  0A69 FE 04            cp 4
181+  0A6B D2 71 0A         jp nc, NoHit_2
182+  0A6E
183+  0A6E C3 81 0A         jp DidHit
184+  0A71
185+  0A71
186+  0A71              NoHit_2:
187+  0A71
188+  0A71
189+  0A71 FD 7E 0D     	ld a, (iy + spr_y)
190+  0A74 FD BE 0F     	cp (iy + spr_y + 2)
191+  0A77 D0           	ret nc
192+  0A78
193+  0A78
194+  0A78 3E 00        	ld a, 0
195+  0A7A FD 77 0C     	ld (iy + spr_x), a
196+  0A7D FD 77 0E     	ld (iy + spr_x + 2), a
197+  0A80
198+  0A80 C9               ret
199+  0A81
200+  0A81              DidHit:
201+  0A81
202+  0A81 C3 D4 0A         jp lose_set
203+  0A84
204+  0A84
# file closed: scripts/gameplay/laser.asm
 39   0A84                      include "scripts/gameplay/lost_life.asm"
# file opened: scripts/gameplay/lost_life.asm
  1+  0A84
  2+  0A84              lose_update:
  3+  0A84
  4+  0A84 3A 77 4C     	 ld a, (life_lost_counter)
  5+  0A87 3D                dec a
  6+  0A88 32 77 4C          ld (life_lost_counter), a
  7+  0A8B
  8+  0A8B FE 00             cp 0
  9+  0A8D CA 96 0A          jp z, lose_reset
 10+  0A90
 11+  0A90 CD C6 06             call fill_screen_area_colour
 12+  0A93
 13+  0A93                  ; call clear_colour_ram
 14+  0A93
 15+  0A93
 16+  0A93 C3 C7 0E     	 jp wait
 17+  0A96
 18+  0A96
 19+  0A96              lose_reset:
 20+  0A96
 21+  0A96 3A 5F 4C     	  ld a,(player_lives)
 22+  0A99 3D           	  dec a
 23+  0A9A 32 5F 4C     	  ld (player_lives), a
 24+  0A9D FE 00        	  cp 0
 25+  0A9F C2 A5 0A     	  jp nz, NotGameOver
 26+  0AA2
 27+  0AA2 C3 87 03     	  jp start_game_over
 28+  0AA5
 29+  0AA5              NotGameOver:
 30+  0AA5
 31+  0AA5 3E 18        	 ld a,palette_cyan_pink_yellow
 32+  0AA7 CD C6 06          call fill_screen_area_colour
 33+  0AAA
 34+  0AAA ED 5B 62 4C       ld de, (droid_screen_location)
 35+  0AAE 3E 40             ld a, blank_tile
 36+  0AB0 12                ld (de), a
 37+  0AB1
 38+  0AB1 ED 5B 64 4C       ld de, (droid_screen_location + 2)
 39+  0AB5 12                ld (de), a
 40+  0AB6
 41+  0AB6 ED 5B 66 4C       ld de, (droid_screen_location + 4)
 42+  0ABA 12                ld (de), a
 43+  0ABB
 44+  0ABB ED 5B 68 4C       ld de, (droid_screen_location +6 )
 45+  0ABF 12                ld (de), a
 46+  0AC0
 47+  0AC0
 48+  0AC0 CD F9 08          call droid_initialise
 49+  0AC3 CD CE 04          call player_initialise
 50+  0AC6 21 91 14          ld hl,spr_initial_game_data                                        ;addr of game sprite data
 51+  0AC9 CD 95 01          call set_sprites                                                        ;do initial transfer of sprite data from rom to ram
 52+  0ACC
 53+  0ACC
 54+  0ACC
 55+  0ACC
 56+  0ACC
 57+  0ACC
 58+  0ACC 3E 02        	ld a, game_mode
 59+  0ACE 32 4E 4C     	ld (mode), a
 60+  0AD1
 61+  0AD1
 62+  0AD1
 63+  0AD1 C3 C7 0E     	jp wait
 64+  0AD4
 65+  0AD4
 66+  0AD4              lose_set:
 67+  0AD4
 68+  0AD4 3E 08        	ld a, life_lost
 69+  0AD6 32 4E 4C        	ld (mode),a
 70+  0AD9
 71+  0AD9 3E 64            ld a, 100
 72+  0ADB 32 77 4C         ld (life_lost_counter), a
 73+  0ADE
 74+  0ADE CD F8 0C         call sfx_died
 75+  0AE1
 76+  0AE1
 77+  0AE1 C9               ret
 78+  0AE2
 79+  0AE2
 80+  0AE2
 81+  0AE2
 82+  0AE2
# file closed: scripts/gameplay/lost_life.asm
 40   0AE2                      include "scripts/system/sound.asm"
# file opened: scripts/system/sound.asm
  1+  0AE2
  2+  0AE2              process_effect:
  3+  0AE2
  4+  0AE2
  5+  0AE2
  6+  0AE2 21 F7 14     	ld hl, EFFECT_TABLE_1
  7+  0AE5 DD 21 9C 4E  	ld ix, CH1_E_NUM
  8+  0AE9 FD 21 8C 4E  	ld iy, CH1_FREQ0
  9+  0AED
 10+  0AED CD 16 0B     	call process_voice
 11+  0AF0
 12+  0AF0 32 91 4E     	ld (CH1_VOL), a
 13+  0AF3
 14+  0AF3
 15+  0AF3 21 17 15     	ld hl, EFFECT_TABLE_2
 16+  0AF6 DD 21 AC 4E  	ld ix, CH2_E_NUM
 17+  0AFA FD 21 92 4E  	ld iy, CH2_FREQ1
 18+  0AFE CD 16 0B     	call  process_voice
 19+  0B01 32 96 4E     	ld (CH2_VOL), a
 20+  0B04
 21+  0B04 21 5F 15     	ld hl, EFFECT_TABLE_3
 22+  0B07 DD 21 BC 4E  	ld ix, CH3_E_NUM
 23+  0B0B FD 21 97 4E  	ld iy, CH3_FREQ1
 24+  0B0F CD 16 0B     	call  process_voice
 25+  0B12 32 9B 4E     	ld (CH3_VOL), a
 26+  0B15
 27+  0B15
 28+  0B15 C9           	ret
 29+  0B16
 30+  0B16
 31+  0B16              process_voice: // 2dee Process effect (one voice
 32+  0B16
 33+  0B16 DD 7E 00     	ld a, (ix + 0)
 34+  0B19 A7           	and a
 35+  0B1A 20 27        	jr nz, find_effect
 36+  0B1C
 37+  0B1C              init_param:
 38+  0B1C
 39+  0B1C DD 7E 02     	ld a, (ix+2)
 40+  0B1F A7           	and a
 41+  0B20 C8           	ret z
 42+  0B21
 43+  0B21 DD 36 02 00  	ld (ix+2), 0
 44+  0B25 DD 36 0D 00  	ld (ix+$0D), 0
 45+  0B29 DD 36 0E 00  	ld (ix+$0E), 0
 46+  0B2D DD 36 0F 00  	ld (ix+$0F), 0
 47+  0B31 FD 36 00 00  	ld (iy+0), 0
 48+  0B35 FD 36 01 00  	ld (iy+1), 0
 49+  0B39 FD 36 02 00  	ld (iy+2), 0
 50+  0B3D FD 36 03 00  	ld (iy+3), 0
 51+  0B41 AF           	xor a
 52+  0B42 C9           	ret
 53+  0B43
 54+  0B43
 55+  0B43
 56+  0B43              find_effect:
 57+  0B43
 58+  0B43 4F           	ld c, a
 59+  0B44 06 08        	ld b, 8
 60+  0B46 1E 80        	ld e, $80
 61+  0B48
 62+  0B48              find_bit:
 63+  0B48
 64+  0B48 7B           	ld a, e
 65+  0B49 A1           	and c
 66+  0B4A 20 05        	jr nz, process_bit
 67+  0B4C
 68+  0B4C CB 3B        	srl e
 69+  0B4E 10 F8        	djnz find_bit
 70+  0B50 C9           	ret
 71+  0B51
 72+  0B51
 73+  0B51
 74+  0B51              process_bit:
 75+  0B51
 76+  0B51
 77+  0B51 DD 7E 02     	ld a, (ix+2)
 78+  0B54 A3           	and e
 79+  0B55 20 3F        	jr nz, compute_effect
 80+  0B57 DD 73 02     	ld (ix+2), e
 81+  0B5A
 82+  0B5A 05           	dec b
 83+  0B5B 78           	ld a,b
 84+  0B5C 07           	rlca
 85+  0B5D 07           	rlca
 86+  0B5E 07           	rlca
 87+  0B5F 4F           	ld c,a
 88+  0B60 06 00        	ld b,0
 89+  0B62 E5           	push hl
 90+  0B63 09           	add hl, bc
 91+  0B64 DD E5        	push ix
 92+  0B66 D1           	pop de
 93+  0B67 13           	inc de
 94+  0B68 13           	inc de
 95+  0B69 13           	inc de
 96+  0B6A 01 08 00     	ld bc,$0008
 97+  0B6D ED B0        	ldir
 98+  0B6F E1           	pop hl
 99+  0B70
100+  0B70
101+  0B70
102+  0B70 DD 7E 06     	ld a, (ix + 6)
103+  0B73 E6 7F        	and $7F
104+  0B75 DD 77 0C     	ld (ix+$0C), a
105+  0B78
106+  0B78 DD 7E 04     	ld a,(ix+4)
107+  0B7B DD 77 0E     	ld (ix+$0E), a
108+  0B7E
109+  0B7E DD 7E 09     	ld a, (ix+9)
110+  0B81 47           	ld b, a
111+  0B82 0F           	rrca
112+  0B83 0F           	rrca
113+  0B84 0F           	rrca
114+  0B85 0F           	rrca
115+  0B86 E6 0F        	and $0F
116+  0B88 DD 77 0B     	ld (ix+$0B),a
117+  0B8B
118+  0B8B E6 08        	and $08
119+  0B8D 20 07        	jr nz, compute_effect
120+  0B8F DD 70 0F     	ld (ix+$0F), b
121+  0B92 DD 36 0D 00  	ld (ix+$0D),0
122+  0B96
123+  0B96
124+  0B96
125+  0B96              compute_effect:
126+  0B96
127+  0B96
128+  0B96 DD 35 0C     	dec (ix+$0C)
129+  0B99 20 5A        	jr nz, update_freq
130+  0B9B
131+  0B9B
132+  0B9B DD 7E 08     	ld a, (ix+8)
133+  0B9E A7           	and a
134+  0B9F 28 10        	jr z, skip1
135+  0BA1
136+  0BA1 DD 35 08     	dec (ix+8)
137+  0BA4 20 0B        	jr nz, skip1
138+  0BA6
139+  0BA6 7B           	ld a, e
140+  0BA7 2F           	cpl
141+  0BA8 DD A6 00     	and (ix+0)
142+  0BAB DD 77 00     	ld (ix+0), a
143+  0BAE C3 16 0B     	jp process_voice
144+  0BB1
145+  0BB1
146+  0BB1              skip1:
147+  0BB1
148+  0BB1 DD 7E 06     	ld a,(ix+6)
149+  0BB4 E6 7F        	and $7F
150+  0BB6 DD 77 0C     	ld (ix+$0C),a
151+  0BB9 DD CB 06 7E  	bit 7,(ix+6)
152+  0BBD 28 16        	jr z, skip2
153+  0BBF
154+  0BBF DD 7E 05     	ld a, (ix+5)
155+  0BC2 ED 44        	neg
156+  0BC4 DD 77 05     	ld (ix+5), a
157+  0BC7 DD CB 0D 46  	bit 0, (ix+$0D)
158+  0BCB DD CB 0D C6  	set 0, (ix+$0D)
159+  0BCF 28 24        	jr z, update_freq
160+  0BD1
161+  0BD1 DD CB 0D 86  	res 0,(ix+$0D)
162+  0BD5
163+  0BD5              skip2:
164+  0BD5
165+  0BD5
166+  0BD5
167+  0BD5 DD 7E 04     	ld a, (ix+4)
168+  0BD8 DD 86 07     	add a, (ix+7)
169+  0BDB DD 77 04     	ld (ix+4), a
170+  0BDE DD 77 0E     	ld (ix+$0E),a
171+  0BE1 DD 7E 09     	ld a, (ix+$09)
172+  0BE4 DD 86 0A     	add a,(ix+$0A)
173+  0BE7 DD 77 09     	ld (ix+9),a
174+  0BEA 47           	ld b, a
175+  0BEB DD 7E 0B     	ld a,(ix+$0B)
176+  0BEE E6 08        	and 8
177+  0BF0 20 03        	jr nz, update_freq
178+  0BF2
179+  0BF2 DD 70 0F     	ld (ix+$0F), b
180+  0BF5
181+  0BF5
182+  0BF5              update_freq:
183+  0BF5
184+  0BF5 DD 7E 0E     	ld a, (ix+$0e)
185+  0BF8 DD 86 05     	add a,(ix+5)
186+  0BFB DD 77 0E     	ld (ix+$0e),a
187+  0BFE
188+  0BFE 6F           	ld l, a
189+  0BFF 26 00        	ld h, 0
190+  0C01
191+  0C01 DD 7E 03     	ld a, (ix+3)
192+  0C04 E6 70        	and $70
193+  0C06 28 08        	jr z, skip3
194+  0C08
195+  0C08
196+  0C08
197+  0C08 0F           	rrca
198+  0C09 0F           	rrca
199+  0C0A 0F           	rrca
200+  0C0B 0F           	rrca
201+  0C0C
202+  0C0C              jump_from_wave:
203+  0C0C
204+  0C0C 47           	ld b, a
205+  0C0D
206+  0C0D              doubleIt2:
207+  0C0D
208+  0C0D 29           	add hl, hl
209+  0C0E 10 FD        	djnz doubleIt2
210+  0C10
211+  0C10              skip3:
212+  0C10
213+  0C10 FD 75 00     	ld (iy+0),l
214+  0C13 7D           	ld a,l
215+  0C14 0F           	rrca
216+  0C15 0F           	rrca
217+  0C16 0F           	rrca
218+  0C17 0F           	rrca
219+  0C18 FD 77 01     	ld (iy+1),a
220+  0C1B FD 74 02     	ld (iy+2), h
221+  0C1E 7C           	ld a, h
222+  0C1F 0F           	rrca
223+  0C20 0F           	rrca
224+  0C21 0F           	rrca
225+  0C22 0F           	rrca
226+  0C23 FD 77 03     	ld (iy+3), a
227+  0C26
228+  0C26
229+  0C26 DD 7E 0B     	ld a,(ix+$0B)
230+  0C29
231+  0C29 E7           	rst $20
232+  0C2A
233+  0C2A 4A 0C 4E 0C  	defw	type0, type1, type2, type3, type4, type5
233+  0C2E 53 0C 64 0C
233+  0C32 6B 0C 72 0C
234+  0C36 72 0C 72 0C  	defw 	type5,type5,type5,type5,type5,type5,type5, type5,type5,type5
234+  0C3A 72 0C 72 0C
234+  0C3E 72 0C 72 0C
234+  0C42 72 0C 72 0C
234+  0C46 72 0C 72 0C
235+  0C4A
236+  0C4A
237+  0C4A              type0:
238+  0C4A
239+  0C4A DD 7E 0F     	ld a, (ix+$0F)
240+  0C4D C9           	ret
241+  0C4E              type1:
242+  0C4E
243+  0C4E DD 7E 0F     	ld a, (ix+$0F)
244+  0C51 18 09        	jr decrease_routine
245+  0C53
246+  0C53              type2:
247+  0C53
248+  0C53 3A FC 4E     	ld a, (SOUND_COUNTER)
249+  0C56 E6 01        	and 1
250+  0C58
251+  0C58              check_skip:
252+  0C58
253+  0C58 DD 7E 0F     	ld a, (ix+$0f)
254+  0C5B C0           	ret nz
255+  0C5C              decrease_routine:
256+  0C5C
257+  0C5C E6 0F          	and $0F
258+  0C5E C8             	ret z
259+  0C5F 3D             	dec a
260+  0C60 DD 77 0F       	ld (ix+$0F), a
261+  0C63 C9             	ret
262+  0C64
263+  0C64              type3:
264+  0C64
265+  0C64 3A FC 4E     	ld a, (SOUND_COUNTER)
266+  0C67 E6 03        	and 3
267+  0C69 18 ED        	jr check_skip
268+  0C6B
269+  0C6B              type4:
270+  0C6B
271+  0C6B 3A FC 4E     	ld a, (SOUND_COUNTER)
272+  0C6E E6 07        	and $07
273+  0C70 18 E6        	jr check_skip
274+  0C72
275+  0C72              type5:
276+  0C72 C9           	ret
277+  0C73
278+  0C73
279+  0C73
280+  0C73
281+  0C73              load_sound_registers:
282+  0C73
283+  0C73
284+  0C73
285+  0C73 2A FC 4E     	ld hl, (SOUND_COUNTER)
286+  0C76 34           	inc (hl)
287+  0C77 23           	inc hl
288+  0C78 35           	dec (hl)
289+  0C79
290+  0C79
291+  0C79
292+  0C79
293+  0C79 C9           	ret
294+  0C7A
295+  0C7A
296+  0C7A              vblank1:
297+  0C7A
298+  0C7A CD 73 0C     	call load_sound_registers
299+  0C7D
300+  0C7D 3E 01        	ld      a, $1           ; a = 1zz1
301+  0C7F 32 01 50         ld     ($5001),a      ; enable audio
302+  0C82
303+  0C82 21 8C 4E          ld      hl,CH1_FREQ0             ; pointer to frequencies and volumes of the 3 voices
304+  0C85 11 50 50     	ld      de,#5050                  ; hardware address
305+  0C88 01 10 00      	ld      bc,#0010                  ; 16 bytes
306+  0C8B ED B0          	ldir
307+  0C8D
308+  0C8D C9             	ret
309+  0C8E
310+  0C8E 3A CC 4E     	ld a, (CH1_W_NUM)
311+  0C91 A7           	and a
312+  0C92 3A CF 4E     	ld a, (CH1_W_SEL)
313+  0C95 20 03        	jr nz, skip4
314+  0C97
315+  0C97 3A 9F 4E     	ld a, (CH1_E_TABLE0)
316+  0C9A
317+  0C9A              skip4:
318+  0C9A
319+  0C9A 32 45 50     	ld ($5045), a
320+  0C9D
321+  0C9D 3A DC 4E     	ld a, (CH2_W_NUM)
322+  0CA0 A7           	and a
323+  0CA1 3A DF 4E     	ld a, (CH2_W_SEL)
324+  0CA4 20 03        	jr nz, skip5
325+  0CA6
326+  0CA6 3A AF 4E     	ld a, (CH2_E_TABLE0)
327+  0CA9
328+  0CA9              skip5:
329+  0CA9
330+  0CA9 32 4A 50     	ld ($504a), a
331+  0CAC
332+  0CAC 3A EC 4E     	ld a, (CH3_W_NUM)
333+  0CAF A7           	and a
334+  0CB0 3A EF 4E     	ld a, (CH3_W_SEL)
335+  0CB3 20 03        	jr nz, skip6
336+  0CB5
337+  0CB5 3A BF 4E     	ld a, (CH3_E_TABLE0)
338+  0CB8
339+  0CB8              skip6:
340+  0CB8
341+  0CB8 32 4F 50     	ld ($504F), a
342+  0CBB
343+  0CBB C9           	ret
344+  0CBC
345+  0CBC              vblank2:
346+  0CBC
347+  0CBC
348+  0CBC CD 29 0D     	call process_wave
349+  0CBF C9           	ret
350+  0CC0
351+  0CC0
352+  0CC0              sfx_fire:
353+  0CC0
354+  0CC0
355+  0CC0 E5           	push hl
356+  0CC1 21 BC 4E     	ld hl, CH3_E_NUM
357+  0CC4 CB EE        	set 5, (hl)
358+  0CC6 E1           	pop hl
359+  0CC7
360+  0CC7
361+  0CC7
362+  0CC7 C9           	ret
363+  0CC8
364+  0CC8              sfx_fire_2:
365+  0CC8
366+  0CC8
367+  0CC8 E5           	push hl
368+  0CC9 21 BC 4E     	ld hl, CH3_E_NUM
369+  0CCC CB F6        	set 6, (hl)
370+  0CCE E1           	pop hl
371+  0CCF
372+  0CCF C9           	ret
373+  0CD0
374+  0CD0              sfx_collect:
375+  0CD0
376+  0CD0
377+  0CD0 E5           	push hl
378+  0CD1 21 AC 4E     	ld hl, CH2_E_NUM
379+  0CD4 CB C6        	set 0, (hl)
380+  0CD6 E1           	pop hl
381+  0CD7
382+  0CD7 C9           	ret
383+  0CD8
384+  0CD8
385+  0CD8
386+  0CD8              sfx_walk:
387+  0CD8
388+  0CD8
389+  0CD8
390+  0CD8 E5           	push hl
391+  0CD9 21 9C 4E     	ld hl, CH1_E_NUM
392+  0CDC CB C6        	set 0, (hl)
393+  0CDE E1           	pop hl
394+  0CDF
395+  0CDF C9           	ret
396+  0CE0
397+  0CE0              sfx_open_door:
398+  0CE0
399+  0CE0 E5           	push hl
400+  0CE1 21 BC 4E     	ld hl, CH3_E_NUM
401+  0CE4 CB CE        	set 1, (hl)
402+  0CE6 E1           	pop hl
403+  0CE7
404+  0CE7 C9           	ret
405+  0CE8
406+  0CE8              sfx_jump:
407+  0CE8
408+  0CE8 E5           	push hl
409+  0CE9 21 BC 4E     	ld hl, CH3_E_NUM
410+  0CEC CB D6        	set 2, (hl)
411+  0CEE E1           	pop hl
412+  0CEF
413+  0CEF C9           	ret
414+  0CF0
415+  0CF0
416+  0CF0              sfx_crouch:
417+  0CF0
418+  0CF0 E5           	push hl
419+  0CF1 21 BC 4E     	ld hl, CH3_E_NUM
420+  0CF4 CB DE        	set 3, (hl)
421+  0CF6 E1           	pop hl
422+  0CF7
423+  0CF7 C9           	ret
424+  0CF8
425+  0CF8
426+  0CF8              sfx_died:
427+  0CF8
428+  0CF8 E5           	push hl
429+  0CF9 21 BC 4E     	ld hl, CH3_E_NUM
430+  0CFC CB E6        	set 4, (hl)
431+  0CFE E1           	pop hl
432+  0CFF
433+  0CFF C9           	ret
434+  0D00
435+  0D00              sfx_got_jammy:
436+  0D00
437+  0D00
438+  0D00
439+  0D00 E5           	push hl
440+  0D01 21 BC 4E     	ld hl, CH3_E_NUM
441+  0D04 CB EE        	set 5, (hl)
442+  0D06 E1           	pop hl
443+  0D07
444+  0D07 C9           	ret
445+  0D08
446+  0D08
447+  0D08              sfx_got_key:
448+  0D08
449+  0D08 E5           	push hl
450+  0D09 21 BC 4E     	ld hl, CH3_E_NUM
451+  0D0C CB D6        	set 2, (hl)
452+  0D0E E1           	pop hl
453+  0D0F
454+  0D0F C9           	ret
455+  0D10
456+  0D10              sfx_climb:
457+  0D10
458+  0D10              	//ld a, (moving_up_down)
459+  0D10 FE 00        	cp 0
460+  0D12 C8           	ret z
461+  0D13
462+  0D13 E5           	push hl
463+  0D14 21 BC 4E     	ld hl, CH3_E_NUM
464+  0D17 CB FE        	set 7, (hl)
465+  0D19 E1           	pop hl
466+  0D1A
467+  0D1A C9           	ret
468+  0D1B
469+  0D1B
470+  0D1B
471+  0D1B
472+  0D1B              sfx_coin:
473+  0D1B
474+  0D1B
475+  0D1B E5           	push hl
476+  0D1C 21 9C 4E     	ld hl, CH1_E_NUM
477+  0D1F CB C6        	set 0, (hl)
478+  0D21 E1           	pop hl
479+  0D22
480+  0D22 C9           	ret
481+  0D23
482+  0D23
483+  0D23
484+  0D23
485+  0D23              playSound:
486+  0D23
487+  0D23 21 9C 4E     	ld hl, CH1_E_NUM			// 0 =coin
488+  0D26              								// 1=extra life
489+  0D26
490+  0D26
491+  0D26 CB D6            set 2, (hl)					// 2=background hum
492+  0D28                								// 3=background hum med
493+  0D28                  							// 4=background hum high
494+  0D28                  							// 5=background him higher
495+  0D28                  							// 6=background hum even higher
496+  0D28                  							// 7=extra life ding			// using effect table 2
497+  0D28
498+  0D28                  							// 1=endless med chirps
499+  0D28              								// 2=endless low chirps
500+  0D28                  							// 3=endless high chirps
501+  0D28                  							// 4=four med chirps
502+  0D28                  							// 5=rising tone endless
503+  0D28                  							// 6=c64 space loop
504+  0D28                  							// 7=long tone unused
505+  0D28
506+  0D28
507+  0D28              								// 1=med blip (good for key?)
508+  0D28              								// 2=eat ghost
509+  0D28                  							// 3=quick rising bloop
510+  0D28                  							// 4=died
511+  0D28                  							// 5=rising tone endless
512+  0D28                  							// 6=higher blip
513+  0D28                  							// 7=nothing
514+  0D28
515+  0D28
516+  0D28
517+  0D28
518+  0D28
519+  0D28 C9               ret
520+  0D29
# file closed: scripts/system/sound.asm
 41   0D29                      include "scripts/system/sound_wave.asm"
# file opened: scripts/system/sound_wave.asm
  1+  0D29
  2+  0D29
  3+  0D29              process_wave:
  4+  0D29
  5+  0D29 21 C7 15     	ld hl, channel_1_3BC8
  6+  0D2C
  7+  0D2C
  8+  0D2C DD 21 CC 4E  	ld ix, CH1_W_NUM
  9+  0D30 FD 21 8C 4E  	ld iy, CH1_FREQ0
 10+  0D34
 11+  0D34 CD 74 0D     	call process_wave_voice
 12+  0D37
 13+  0D37 47           	ld b, a
 14+  0D38 3A CC 4E     	ld a, (CH1_W_NUM)
 15+  0D3B A7           	and a
 16+  0D3C 28 04        	jr z, channel2
 17+  0D3E
 18+  0D3E 78           	ld a, b
 19+  0D3F 32 91 4E     	ld (CH1_VOL), a
 20+  0D42
 21+  0D42              channel2:
 22+  0D42
 23+  0D42 21 CD 15     	ld hl, channel_2_3BCC
 24+  0D45 DD 21 DC 4E  	ld ix, CH2_W_NUM
 25+  0D49 FD 21 92 4E  	ld iy, CH2_FREQ1
 26+  0D4D
 27+  0D4D CD 74 0D     	call process_wave_voice
 28+  0D50
 29+  0D50 47           	ld b, a
 30+  0D51 3A DC 4E     	ld a, (CH2_W_NUM)
 31+  0D54 A7           	and a
 32+  0D55 28 04        	jr z, channel3
 33+  0D57
 34+  0D57 78           	ld a, b
 35+  0D58 32 96 4E     	ld (CH2_VOL), a
 36+  0D5B
 37+  0D5B              channel3:
 38+  0D5B
 39+  0D5B
 40+  0D5B 21 D3 15     	ld hl, channel_3_3CD0
 41+  0D5E DD 21 EC 4E  	ld ix, CH3_W_NUM
 42+  0D62 FD 21 97 4E  	ld iy, CH3_FREQ1
 43+  0D66
 44+  0D66 CD 74 0D     	call process_wave_voice
 45+  0D69
 46+  0D69 47           	ld b, a
 47+  0D6A 3A EC 4E     	ld a, (CH3_W_NUM)
 48+  0D6D A7           	and a
 49+  0D6E C8           	ret z
 50+  0D6F
 51+  0D6F 78           	ld a, b
 52+  0D70 32 9B 4E     	ld (CH3_VOL), a
 53+  0D73
 54+  0D73 C9           	ret
 55+  0D74
 56+  0D74
 57+  0D74
 58+  0D74
 59+  0D74              process_wave_voice:
 60+  0D74
 61+  0D74 DD 7E 00     	ld a, (ix + 0)
 62+  0D77 A7           	and a
 63+  0D78 CA 1C 0B     	jp z, init_param
 64+  0D7B
 65+  0D7B 4F           	ld c, a
 66+  0D7C 06 08        	ld b, 8
 67+  0D7E 1E 80        	ld e, $80
 68+  0D80
 69+  0D80              find_bit2:
 70+  0D80
 71+  0D80 7B           	ld a, e
 72+  0D81 A1           	and c
 73+  0D82 20 05        	jr nz, process_wav_bit
 74+  0D84
 75+  0D84 CB 3B        	srl e
 76+  0D86 10 F8        	djnz find_bit2
 77+  0D88
 78+  0D88 C9           	ret
 79+  0D89
 80+  0D89
 81+  0D89              process_wav_bit:
 82+  0D89
 83+  0D89 DD 7E 02     	ld a, (ix+2)
 84+  0D8C A3           	and e
 85+  0D8D 20 0C        	jr nz, dec_duration
 86+  0D8F
 87+  0D8F DD 73 02     	ld (ix+2),e
 88+  0D92 06 01        	ld b, 1
 89+  0D94 CD 41 0E     	call select_song
 90+  0D97 C3 A7 0D     	jp process_wave_byte
 91+  0D9A
 92+  0D9A 0C           	inc c
 93+  0D9B
 94+  0D9B
 95+  0D9B              dec_duration:
 96+  0D9B
 97+  0D9B DD 35 0C     	dec (ix+$0C)
 98+  0D9E C2 99 0E     	jp nz, compute_wave_freq
 99+  0DA1
100+  0DA1              return_from_rst_20:
101+  0DA1
102+  0DA1 DD 6E 06     	ld l, (ix+6)
103+  0DA4 DD 66 07     	ld h, (ix+7)
104+  0DA7
105+  0DA7
106+  0DA7              process_wave_byte:
107+  0DA7
108+  0DA7 7E           	ld a, (hl)
109+  0DA8 23           	inc hl
110+  0DA9 DD 75 06     	ld (ix+6), l
111+  0DAC
112+  0DAC DD 74 07     	ld (ix+7), h
113+  0DAF FE F0        	cp $F0
114+  0DB1 DA 67 0E     	jp c, process_regular_byte
115+  0DB4
116+  0DB4 21 A1 0D     	ld hl, return_from_rst_20
117+  0DB7 E5           	push hl
118+  0DB8 E6 0F        	and $0F
119+  0DBA E7           	rst $20
120+  0DBB
121+  0DBB              jump_table:
122+  0DBB
123+  0DBB DB 0D        	defw special_F0
124+  0DBD EB 0D        	defw special_F1
125+  0DBF FD 0D        	defw special_F2
126+  0DC1 0F 0E        	defw special_F3
127+  0DC3 21 0E        	defw special_F4
128+  0DC5 40 0E        	defw special_F5
129+  0DC7 40 0E        	defw special_F5
130+  0DC9 40 0E        	defw special_F5
131+  0DCB 40 0E        	defw special_F5
132+  0DCD 40 0E        	defw special_F5
133+  0DCF 40 0E        	defw special_F5
134+  0DD1 40 0E        	defw special_F5
135+  0DD3 40 0E        	defw special_F5
136+  0DD5 40 0E        	defw special_F5
137+  0DD7 40 0E        	defw special_F5
138+  0DD9 33 0E        	defw special_FF
139+  0DDB
140+  0DDB
141+  0DDB              special_F0:
142+  0DDB
143+  0DDB DD 6E 06     	ld l, (ix+6)
144+  0DDE DD 66 07     	ld h, (ix+7)
145+  0DE1 7E           	ld a,(hl)
146+  0DE2 DD 77 06     	ld (ix+6), a
147+  0DE5 23           	inc hl
148+  0DE6 7E           	ld a,(hl)
149+  0DE7 DD 77 07     	ld (ix+7), a
150+  0DEA C9           	ret
151+  0DEB
152+  0DEB
153+  0DEB              special_F1:
154+  0DEB
155+  0DEB DD 6E 06     	ld l, (ix+6)
156+  0DEE DD 66 07     	ld h, (ix+7)
157+  0DF1 7E           	ld a,(hl)
158+  0DF2 23           	inc hl
159+  0DF3 DD 75 06     	ld (ix+6), l
160+  0DF6 DD 74 07     	ld (ix+7), h
161+  0DF9 DD 77 03     	ld (ix+3), a
162+  0DFC
163+  0DFC C9           	ret
164+  0DFD
165+  0DFD
166+  0DFD              special_F2:
167+  0DFD
168+  0DFD DD 6E 06     	ld l,(ix+6)
169+  0E00 DD 66 07     	ld h,(ix+7)
170+  0E03 7E           	ld a, (hl)
171+  0E04 23           	inc hl
172+  0E05 DD 75 06     	ld (ix+6),l
173+  0E08 DD 74 07     	ld (ix+7),h
174+  0E0B DD 77 04     	ld (ix+4),a
175+  0E0E C9           	ret
176+  0E0F
177+  0E0F              special_F3:
178+  0E0F
179+  0E0F DD 6E 06     	ld l, (ix+6)
180+  0E12 DD 66 07     	ld h, (ix+7)
181+  0E15 7E           	ld a, (hl)
182+  0E16 23           	inc hl
183+  0E17 DD 75 06     	ld (ix+6), l
184+  0E1A DD 74 07     	ld (ix+7), h
185+  0E1D DD 77 09     	ld (ix+9), a
186+  0E20 C9           	ret
187+  0E21
188+  0E21
189+  0E21              special_F4:
190+  0E21
191+  0E21 DD 6E 06     	ld l, (ix+6)
192+  0E24 DD 66 07     	ld h, (ix+7)
193+  0E27 7E           	ld a, (hl)
194+  0E28 23           	inc hl
195+  0E29 DD 75 06     	ld (ix+6),l
196+  0E2C DD 74 07     	ld (ix+7),h
197+  0E2F DD 77 0B     	ld (ix+$0b), a
198+  0E32 C9           	ret
199+  0E33
200+  0E33              special_FF:
201+  0E33
202+  0E33 DD 7E 02     	ld a, (ix+2)
203+  0E36 2F           	cpl
204+  0E37 DD A6 00     	and (ix+0)
205+  0E3A DD 77 00     	ld (ix+0), a
206+  0E3D C3 1C 0B     	jp init_param
207+  0E40
208+  0E40              special_F5:
209+  0E40
210+  0E40 C9           	ret
211+  0E41
212+  0E41
213+  0E41              select_song:
214+  0E41
215+  0E41 06 02        	ld b, 2
216+  0E43 3E 01        	ld a, 1
217+  0E45 C3 62 0E     	jp goto_rst_18
218+  0E48 05           	dec b
219+  0E49
220+  0E49              	;push bc
221+  0E49
222+  0E49 78           	ld a, b
223+  0E4A FE 01        	cp 1
224+  0E4C 28 04        	jr z, skip44
225+  0E4E
226+  0E4E 06 00        	ld b, 0
227+  0E50 18 10        	jr goto_rst_18
228+  0E52
229+  0E52              skip44:
230+  0E52
231+  0E52 3E 01        	ld a, 1
232+  0E54 06 01        	ld b, 1
233+  0E56 FE 01        	cp 1
234+  0E58 28 08        	jr z, goto_rst_18
235+  0E5A
236+  0E5A 06 02        	ld b, 2
237+  0E5C FE 04        	cp 4
238+  0E5E 28 02        	jr z, goto_rst_18
239+  0E60
240+  0E60 06 03        	ld b,3
241+  0E62
242+  0E62              goto_rst_18:
243+  0E62
244+  0E62 DF           	rst $18
245+  0E63
246+  0E63 C1           	pop bc
247+  0E64 C3 A7 0D     	jp process_wave_byte
248+  0E67
249+  0E67
250+  0E67              process_regular_byte:
251+  0E67
252+  0E67 47           	ld b, a
253+  0E68 E6 1F        	and $1F
254+  0E6A 28 03        	jr z, skip45
255+  0E6C
256+  0E6C DD 70 0D     	ld (ix+$0d),b
257+  0E6F
258+  0E6F
259+  0E6F              skip45:
260+  0E6F
261+  0E6F DD 4E 09     	ld c, (ix+9)
262+  0E72 DD 7E 0B     	ld a, (ix+$0B)
263+  0E75 E6 08        	and 8
264+  0E77 28 02        	jr z, skip46
265+  0E79
266+  0E79 0E 00        	ld c,0
267+  0E7B
268+  0E7B              skip46:
269+  0E7B
270+  0E7B DD 71 0F     	ld (ix+$0f),c
271+  0E7E 78           	ld a,b
272+  0E7F 07           	rlca
273+  0E80 07           	rlca
274+  0E81 07           	rlca
275+  0E82 E6 07        	and $7
276+  0E84 21 AF 15     	ld hl, lookup_3bb0
277+  0E87 D7           	rst $10
278+  0E88
279+  0E88 DD 77 0C     	ld (ix+$0C), a
280+  0E8B 78           	ld a,b
281+  0E8C E6 1F        	and $1F
282+  0E8E 28 09        	jr z, compute_wave_freq
283+  0E90
284+  0E90 E6 0F        	and $0F
285+  0E92 21 B7 15     	ld hl, lookup_3bb8
286+  0E95 D7           	rst $10
287+  0E96
288+  0E96 DD 77 0E     	ld (ix+$0e), a
289+  0E99
290+  0E99              compute_wave_freq:
291+  0E99
292+  0E99 DD 6E 0E     	ld l, (ix+$0e)
293+  0E9C 26 00        	ld h, 0
294+  0E9E
295+  0E9E DD 7E 0D     	ld a, (ix+$0d)
296+  0EA1 E6 10        	and $10
297+  0EA3 28 02        	jr z, skip47
298+  0EA5
299+  0EA5 3E 01        	ld a, 1
300+  0EA7
301+  0EA7
302+  0EA7              skip47:
303+  0EA7
304+  0EA7 DD 86 04     	add a, (ix+4)
305+  0EAA CA 10 0C     	jp z, skip3
306+  0EAD C3 0C 0C     	jp jump_from_wave
307+  0EB0
# file closed: scripts/system/sound_wave.asm
 42   0EB0
 43   0EB0
 44   0EB0                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 45   0EB0              ; logic to be performed every frame - main logic of code
 46   0EB0              ; needs to check to see what mode game is in first so it can run
 47   0EB0              ; the correct game loop function
 48   0EB0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 49   0EB0
 50   0EB0
 51   0EB0              mainloop:
 52   0EB0 3A 4E 4C             ld a,(mode)                                                                        ;get mode
 53   0EB3 FE 01                cp title_mode                                                                ;is it title mode
 54   0EB5 CA BD 02             jp z,title_logic                                                        ;yes
 55   0EB8 FE 02                cp game_mode                                                                ;is it game mode
 56   0EBA CA 4E 03             jp z,game_logic                                                                ;yes
 57   0EBD FE 04                cp game_over                                                                ;is it game over
 58   0EBF CA CB 03             jp z,game_over_logic                                                ;yes
 59   0EC2 FE 08                cp life_lost
 60   0EC4 CA 84 0A             jp z,lose_update
 61   0EC7              wait:
 62   0EC7 76                   halt                                                                                ;finished processing let's wait for vsync
 63   0EC8 C3 B0 0E             jp mainloop
 64   0ECB
 65   0ECB                      org  $1000
 66   1000
 67   1000                      include "scripts/data/rom_6f.asm"
# file opened: scripts/data/rom_6f.asm
  1+  1000
  2+  1000
  3+  1000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  4+  1000              ; some messages to display
  5+  1000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  6+  1000
  7+  1000 44 49 4C 49  txt_game_title:         defm           "DILITHIUM LIFT",0
  7+  1004 54 48 49 55
  7+  1008 4D 20 4C 49
  7+  100C 46 54 00
  8+  100F 8B 80 81 82  txt_game_author:        defm T_,TS,TI,TM,TO,TN,T_, TC,TO,TB,TB,T_,T1,T9,T8,T3,0
  8+  1013 83 84 8B 85
  8+  1017 83 86 86 8B
  8+  101B 87 88 89 8A
  8+  101F 00
  9+  1020 5C 00        txt_copyright:          defm copyright_symbol, 0
 10+  1022
 11+  1022 4D 6F 76 65  txt_instruct_1:         defm "Move your man to collect",0
 11+  1026 20 79 6F 75
 11+  102A 72 20 6D 61
 11+  102E 6E 20 74 6F
 11+  1032 20 63 6F 6C
 11+  1036 6C 65 63 74
 11+  103A 00
 12+  103B 20 74 68 65  txt_instruct_2:         defm " the Dilithium Crystals",0
 12+  103F 20 44 69 6C
 12+  1043 69 74 68 69
 12+  1047 75 6D 20 43
 12+  104B 72 79 73 74
 12+  104F 61 6C 73 00
 13+  1053 77 68 69 6C  txt_instruct_3:         defm "whilst avoiding the laser",0
 13+  1057 73 74 20 61
 13+  105B 76 6F 69 64
 13+  105F 69 6E 67 20
 13+  1063 74 68 65 20
 13+  1067 6C 61 73 65
 13+  106B 72 00
 14+  106D 62 6F 6C 74  txt_instruct_4:         defm "bolts fired by the Droids",0
 14+  1071 73 20 66 69
 14+  1075 72 65 64 20
 14+  1079 62 79 20 74
 14+  107D 68 65 20 44
 14+  1081 72 6F 69 64
 14+  1085 73 00
 15+  1087 20 59 6F 75  txt_instruct_5:         defm " You can extend the time",0
 15+  108B 20 63 61 6E
 15+  108F 20 65 78 74
 15+  1093 65 6E 64 20
 15+  1097 74 68 65 20
 15+  109B 74 69 6D 65
 15+  109F 00
 16+  10A0 20 20 79 6F  txt_instruct_6:         defm "  you have by collecting ",0
 16+  10A4 75 20 68 61
 16+  10A8 76 65 20 62
 16+  10AC 79 20 63 6F
 16+  10B0 6C 6C 65 63
 16+  10B4 74 69 6E 67
 16+  10B8 20 00
 17+  10BA 74 68 65 20  txt_instruct_7:         defm "the flashing red crystals",0
 17+  10BE 66 6C 61 73
 17+  10C2 68 69 6E 67
 17+  10C6 20 72 65 64
 17+  10CA 20 63 72 79
 17+  10CE 73 74 61 6C
 17+  10D2 73 00
 18+  10D4
 19+  10D4 44 49 4C 49  txt_dilithium:          defm "DILITHIUM",0
 19+  10D8 54 48 49 55
 19+  10DC 4D 00
 20+  10DE 4D 41 4E 00  txt_man:                defm "MAN",0
 21+  10E2 44 52 4F 49  txt_droid:              defm "DROID",0
 21+  10E6 44 00
 22+  10E8 4C 41 53 45  txt_laser:              defm "LASER BOLT",0
 22+  10EC 52 20 42 4F
 22+  10F0 4C 54 00
 23+  10F3 52 45 44 20  txt_crystal:            defm "RED CRYSTAL",0
 23+  10F7 43 52 59 53
 23+  10FB 54 41 4C 00
 24+  10FF
 25+  10FF
 26+  10FF                                                         ;0123456789012345678901234567 - for alignment purposes
 27+  10FF              ;msg_instruction:        defm        "WELCOME TO  THIS LITTLE GAME",0
 28+  10FF              ;msg_quit_game:                defm    " 2P START  TO QUIT TO TITLE ",0
 29+  10FF 44 45 42 55  msg_debug:                        defm        "DEBUG                       ",0
 29+  1103 47 20 20 20
 29+  1107 20 20 20 20
 29+  110B 20 20 20 20
 29+  110F 20 20 20 20
 29+  1113 20 20 20 20
 29+  1117 20 20 20 20
 29+  111B 00
 30+  111C 53 43 4F 52  msg_scoring:                defm        "SCORE      LIVES    HI SCORE",0
 30+  1120 45 20 20 20
 30+  1124 20 20 20 4C
 30+  1128 49 56 45 53
 30+  112C 20 20 20 20
 30+  1130 48 49 20 53
 30+  1134 43 4F 52 45
 30+  1138 00
 31+  1139 20 20 47 41  msg_game_over:                defm        "  GAME    OVER  ",0
 31+  113D 4D 45 20 20
 31+  1141 20 20 4F 56
 31+  1145 45 52 20 20
 31+  1149 00
 32+  114A 20 20 20 20  msg_gameover_blank:        defm        "                ",0
 32+  114E 20 20 20 20
 32+  1152 20 20 20 20
 32+  1156 20 20 20 20
 32+  115A 00
 33+  115B 20 20 20 20  msg_blank:                        defm        "                            ",0 ;use this label to also refer to a blank message
 33+  115F 20 20 20 20
 33+  1163 20 20 20 20
 33+  1167 20 20 20 20
 33+  116B 20 20 20 20
 33+  116F 20 20 20 20
 33+  1173 20 20 20 20
 33+  1177 00
 34+  1178
 35+  1178
 36+  1178
 37+  1178              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38+  1178              ; a list of message width of the screen (28 columns)
 39+  1178              ; to display
 40+  1178              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 41+  1178 00           bot_mess_seconds:        defm 0        ; change every second
 42+  1179 20 20 20 20  bot_mess_1:                        defm        "       PRESS 1P START       ",0
 42+  117D 20 20 20 50
 42+  1181 52 45 53 53
 42+  1185 20 31 50 20
 42+  1189 53 54 41 52
 42+  118D 54 20 20 20
 42+  1191 20 20 20 20
 42+  1195 00
 43+  1196 20 20 20 20  bot_mess_2:                        defm        "      BY ARLASOFT 2023      ",0
 43+  119A 20 20 42 59
 43+  119E 20 41 52 4C
 43+  11A2 41 53 4F 46
 43+  11A6 54 20 32 30
 43+  11AA 32 33 20 20
 43+  11AE 20 20 20 20
 43+  11B2 00
 44+  11B3                                                      ;                 0123456789012345678901234567 - for alignment purposes
 45+  11B3              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 46+  11B3              ; this is the addressess of the messages to display (above),
 47+  11B3              ; the code looks for an address of zero to restart the list
 48+  11B3              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 49+  11B3 79 11 5B 11  bottom_list:                defw        bot_mess_1,msg_blank,bot_mess_2,msg_blank,0
 49+  11B7 96 11 5B 11
 49+  11BB 00 00
 50+  11BD
 51+  11BD
 52+  11BD
 53+  11BD
 54+  11BD              level_1:
 55+  11BD 00 00 00             defm %00000000, %00000000, %00000000
 56+  11C0 00 00 00             defm %00000000, %00000000, %00000000
 57+  11C3 00 00 00             defm %00000000, %00000000, %00000000
 58+  11C6 3E 07 C0             defm %00111110, %00000111, %11000000
 59+  11C9 22 04 40             defm %00100010, %00000100, %01000000
 60+  11CC 22 04 40             defm %00100010, %00000100, %01000000
 61+  11CF 22 04 40             defm %00100010, %00000100, %01000000
 62+  11D2 3E 07 C0             defm %00111110, %00000111, %11000000
 63+  11D5 02 04 00             defm %00000010, %00000100, %00000000
 64+  11D8 02 04 00             defm %00000010, %00000100, %00000000
 65+  11DB 02 04 00             defm %00000010, %00000100, %00000000
 66+  11DE 02 04 00             defm %00000010, %00000100, %00000000
 67+  11E1 02 04 00             defm %00000010, %00000100, %00000000
 68+  11E4 02 04 00             defm %00000010, %00000100, %00000000
 69+  11E7 02 04 00             defm %00000010, %00000100, %00000000
 70+  11EA 02 04 00             defm %00000010, %00000100, %00000000
 71+  11ED 02 04 00             defm %00000010, %00000100, %00000000
 72+  11F0 02 04 00             defm %00000010, %00000100, %00000000
 73+  11F3 02 04 00             defm %00000010, %00000100, %00000000
 74+  11F6 02 04 00             defm %00000010, %00000100, %00000000
 75+  11F9 02 04 00             defm %00000010, %00000100, %00000000
 76+  11FC 3E 07 C0             defm %00111110, %00000111, %11000000
 77+  11FF 22 04 40             defm %00100010, %00000100, %01000000
 78+  1202 22 04 40             defm %00100010, %00000100, %01000000
 79+  1205 22 04 40             defm %00100010, %00000100, %01000000
 80+  1208 3E 07 C0             defm %00111110, %00000111, %11000000
 81+  120B 00 00 00             defm %00000000, %00000000, %00000000
 82+  120E 00 00 00             defm %00000000, %00000000, %00000000
 83+  1211 00 00 00             defm %00000000, %00000000, %00000000
 84+  1214 00 00 00             defm %00000000, %00000000, %00000000
 85+  1217
 86+  1217
 87+  1217              level_2:
 88+  1217 00 00 00             defm %00000000, %00000000, %00000000
 89+  121A 00 00 00             defm %00000000, %00000000, %00000000
 90+  121D 00 00 00             defm %00000000, %00000000, %00000000
 91+  1220 00 00 00             defm %00000000, %00000000, %00000000
 92+  1223 00 00 00             defm %00000000, %00000000, %00000000
 93+  1226 00 00 00             defm %00000000, %00000000, %00000000
 94+  1229 00 00 00             defm %00000000, %00000000, %00000000
 95+  122C
 96+  122C 0C F0 00             defm %00001100, %11110000, %00000000
 97+  122F 0C F0 00             defm %00001100, %11110000, %00000000
 98+  1232 33 FC 00             defm %00110011, %11111100, %00000000
 99+  1235 33 FC 00             defm %00110011, %11111100, %00000000
100+  1238 00 CF 00             defm %00000000, %11001111, %00000000
101+  123B 00 CF 00             defm %00000000, %11001111, %00000000
102+  123E 00 FF C0             defm %00000000, %11111111, %11000000
103+  1241 00 FF C0             defm %00000000, %11111111, %11000000
104+  1244 00 FF C0             defm %00000000, %11111111, %11000000
105+  1247 00 FF C0             defm %00000000, %11111111, %11000000
106+  124A 00 CF 00             defm %00000000, %11001111, %00000000
107+  124D 00 CF 00             defm %00000000, %11001111, %00000000
108+  1250 33 FC 00             defm %00110011, %11111100, %00000000
109+  1253 33 FC 00             defm %00110011, %11111100, %00000000
110+  1256 0C F0 00             defm %00001100, %11110000, %00000000
111+  1259 0C F0 00             defm %00001100, %11110000, %00000000
112+  125C
113+  125C 00 00 00             defm %00000000, %00000000, %00000000
114+  125F 00 00 00             defm %00000000, %00000000, %00000000
115+  1262 00 00 00             defm %00000000, %00000000, %00000000
116+  1265 00 00 00             defm %00000000, %00000000, %00000000
117+  1268 00 00 00             defm %00000000, %00000000, %00000000
118+  126B 00 00 00             defm %00000000, %00000000, %00000000
119+  126E 00 00 00             defm %00000000, %00000000, %00000000
120+  1271
121+  1271
122+  1271              level_3:
123+  1271
124+  1271 00 00 00             defm %00000000, %00000000, %00000000
125+  1274 00 00 00             defm %00000000, %00000000, %00000000
126+  1277 00 00 00             defm %00000000, %00000000, %00000000
127+  127A 00 00 00             defm %00000000, %00000000, %00000000
128+  127D 00 00 00             defm %00000000, %00000000, %00000000
129+  1280 1F FF 00             defm %00011111, %11111111, %00000000
130+  1283 10 41 00             defm %00010000, %01000001, %00000000
131+  1286 10 A1 00             defm %00010000, %10100001, %00000000
132+  1289 10 A1 00             defm %00010000, %10100001, %00000000
133+  128C 11 11 00             defm %00010001, %00010001, %00000000
134+  128F 12 09 00             defm %00010010, %00001001, %00000000
135+  1292 12 09 00             defm %00010010, %00001001, %00000000
136+  1295 14 05 00             defm %00010100, %00000101, %00000000
137+  1298 14 05 00             defm %00010100, %00000101, %00000000
138+  129B 18 03 00             defm %00011000, %00000011, %00000000
139+  129E 18 03 00             defm %00011000, %00000011, %00000000
140+  12A1 18 03 00             defm %00011000, %00000011, %00000000
141+  12A4 14 05 00             defm %00010100, %00000101, %00000000
142+  12A7 14 05 00             defm %00010100, %00000101, %00000000
143+  12AA 12 09 00             defm %00010010, %00001001, %00000000
144+  12AD 12 09 00             defm %00010010, %00001001, %00000000
145+  12B0 11 11 00             defm %00010001, %00010001, %00000000
146+  12B3 10 A1 00             defm %00010000, %10100001, %00000000
147+  12B6 10 A1 00             defm %00010000, %10100001, %00000000
148+  12B9 10 41 00             defm %00010000, %01000001, %00000000
149+  12BC 1F FF 00             defm %00011111, %11111111, %00000000
150+  12BF 00 00 00             defm %00000000, %00000000, %00000000
151+  12C2 00 00 00             defm %00000000, %00000000, %00000000
152+  12C5 00 00 00             defm %00000000, %00000000, %00000000
153+  12C8 00 00 00             defm %00000000, %00000000, %00000000
154+  12CB
155+  12CB              level_4:
156+  12CB
157+  12CB 00 00 00             defm %00000000, %00000000, %00000000
158+  12CE 00 00 00             defm %00000000, %00000000, %00000000
159+  12D1 00 00 00             defm %00000000, %00000000, %00000000
160+  12D4 00 00 00             defm %00000000, %00000000, %00000000
161+  12D7 00 00 00             defm %00000000, %00000000, %00000000
162+  12DA 14 02 80             defm %00010100, %00000010, %10000000
163+  12DD 2A 05 40             defm %00101010, %00000101, %01000000
164+  12E0 14 02 80             defm %00010100, %00000010, %10000000
165+  12E3 2A 05 40             defm %00101010, %00000101, %01000000
166+  12E6 14 02 80             defm %00010100, %00000010, %10000000
167+  12E9 00 00 00             defm %00000000, %00000000, %00000000
168+  12EC 00 00 00             defm %00000000, %00000000, %00000000
169+  12EF 00 50 00             defm %00000000, %01010000, %00000000
170+  12F2 00 A8 00             defm %00000000, %10101000, %00000000
171+  12F5 00 50 00             defm %00000000, %01010000, %00000000
172+  12F8 00 A8 00             defm %00000000, %10101000, %00000000
173+  12FB 00 50 00             defm %00000000, %01010000, %00000000
174+  12FE 00 00 00             defm %00000000, %00000000, %00000000
175+  1301 00 00 00             defm %00000000, %00000000, %00000000
176+  1304 14 02 80             defm %00010100, %00000010, %10000000
177+  1307 2A 05 40             defm %00101010, %00000101, %01000000
178+  130A 14 02 80             defm %00010100, %00000010, %10000000
179+  130D 2A 05 40             defm %00101010, %00000101, %01000000
180+  1310 14 02 80             defm %00010100, %00000010, %10000000
181+  1313 00 00 00             defm %00000000, %00000000, %00000000
182+  1316 00 00 00             defm %00000000, %00000000, %00000000
183+  1319 00 00 00             defm %00000000, %00000000, %00000000
184+  131C 00 00 00             defm %00000000, %00000000, %00000000
185+  131F 00 00 00             defm %00000000, %00000000, %00000000
186+  1322 14 02 80             defm %00010100, %00000010, %10000000
187+  1325
188+  1325
189+  1325              level_5:
190+  1325
191+  1325
192+  1325 00 00 00             defm %00000000, %00000000, %00000000
193+  1328 00 00 00             defm %00000000, %00000000, %00000000
194+  132B 07 C0 00             defm %00000111, %11000000, %00000000
195+  132E 08 20 00             defm %00001000, %00100000, %00000000
196+  1331 09 38 00             defm %00001001, %00111000, %00000000
197+  1334 0B A4 00             defm %00001011, %10100100, %00000000
198+  1337 09 3A 00             defm %00001001, %00111010, %00000000
199+  133A 08 21 00             defm %00001000, %00100001, %00000000
200+  133D 07 C0 80             defm %00000111, %11000000, %10000000
201+  1340 08 21 00             defm %00001000, %00100001, %00000000
202+  1343 09 3A 00             defm %00001001, %00111010, %00000000
203+  1346 0B A4 00             defm %00001011, %10100100, %00000000
204+  1349 09 3A 00             defm %00001001, %00111010, %00000000
205+  134C 08 21 00             defm %00001000, %00100001, %00000000
206+  134F 07 C0 80             defm %00000111, %11000000, %10000000
207+  1352 08 21 00             defm %00001000, %00100001, %00000000
208+  1355 09 3A 00             defm %00001001, %00111010, %00000000
209+  1358 0B A4 00             defm %00001011, %10100100, %00000000
210+  135B 09 3A 00             defm %00001001, %00111010, %00000000
211+  135E 08 21 00             defm %00001000, %00100001, %00000000
212+  1361 07 C0 80             defm %00000111, %11000000, %10000000
213+  1364 08 21 00             defm %00001000, %00100001, %00000000
214+  1367 09 3A 00             defm %00001001, %00111010, %00000000
215+  136A 0B A4 00             defm %00001011, %10100100, %00000000
216+  136D 09 38 00             defm %00001001, %00111000, %00000000
217+  1370 08 20 00             defm %00001000, %00100000, %00000000
218+  1373 07 C0 00             defm %00000111, %11000000, %00000000
219+  1376 00 00 00             defm %00000000, %00000000, %00000000
220+  1379 00 00 00             defm %00000000, %00000000, %00000000
221+  137C
222+  137C
223+  137C              level_6:
224+  137C
225+  137C 00 00 00             defm %00000000, %00000000, %00000000
226+  137F 00 00 00             defm %00000000, %00000000, %00000000
227+  1382 00 F8 00             defm %00000000, %11111000, %00000000
228+  1385 03 FE 00             defm %00000011, %11111110, %00000000
229+  1388 07 FF 00             defm %00000111, %11111111, %00000000
230+  138B 07 FF 00             defm %00000111, %11111111, %00000000
231+  138E 0F FC 00             defm %00001111, %11111100, %00000000
232+  1391 0F E0 00             defm %00001111, %11100000, %00000000
233+  1394 0F 00 00             defm %00001111, %00000000, %00000000
234+  1397 0F E0 00             defm %00001111, %11100000, %00000000
235+  139A 07 FF 00             defm %00000111, %11111111, %00000000
236+  139D 07 FF 00             defm %00000111, %11111111, %00000000
237+  13A0 03 FE 00             defm %00000011, %11111110, %00000000
238+  13A3 00 F8 00             defm %00000000, %11111000, %00000000
239+  13A6 00 00 00             defm %00000000, %00000000, %00000000
240+  13A9 00 F8 00             defm %00000000, %11111000, %00000000
241+  13AC 03 FE 00             defm %00000011, %11111110, %00000000
242+  13AF 07 FF 00             defm %00000111, %11111111, %00000000
243+  13B2 07 FF 00             defm %00000111, %11111111, %00000000
244+  13B5 0F FC 00             defm %00001111, %11111100, %00000000
245+  13B8 0F E0 00             defm %00001111, %11100000, %00000000
246+  13BB 0F 00 00             defm %00001111, %00000000, %00000000
247+  13BE 0F E0 00             defm %00001111, %11100000, %00000000
248+  13C1 07 FF 00             defm %00000111, %11111111, %00000000
249+  13C4 07 FF 00             defm %00000111, %11111111, %00000000
250+  13C7 03 FE 00             defm %00000011, %11111110, %00000000
251+  13CA 00 F8 00             defm %00000000, %11111000, %00000000
252+  13CD 00 00 00             defm %00000000, %00000000, %00000000
253+  13D0 00 00 00             defm %00000000, %00000000, %00000000
254+  13D3
255+  13D3              level_7:
256+  13D3
257+  13D3 00 00 00             defm %00000000, %00000000, %00000000
258+  13D6 0E 07 00             defm %00001110, %00000111, %00000000
259+  13D9 15 0A 80             defm %00010101, %00001010, %10000000
260+  13DC 24 92 40             defm %00100100, %10010010, %01000000
261+  13DF 3B 9D C0             defm %00111011, %10011101, %11000000
262+  13E2 24 92 40             defm %00100100, %10010010, %01000000
263+  13E5 15 0A 80             defm %00010101, %00001010, %10000000
264+  13E8 0E 07 00             defm %00001110, %00000111, %00000000
265+  13EB 00 00 00             defm %00000000, %00000000, %00000000
266+  13EE 00 00 00             defm %00000000, %00000000, %00000000
267+  13F1 00 00 00             defm %00000000, %00000000, %00000000
268+  13F4 00 E0 00             defm %00000000, %11100000, %00000000
269+  13F7 01 50 00             defm %00000001, %01010000, %00000000
270+  13FA 02 48 00             defm %00000010, %01001000, %00000000
271+  13FD 03 B8 00             defm %00000011, %10111000, %00000000
272+  1400 02 48 00             defm %00000010, %01001000, %00000000
273+  1403 01 50 00             defm %00000001, %01010000, %00000000
274+  1406 00 E0 00             defm %00000000, %11100000, %00000000
275+  1409 00 00 00             defm %00000000, %00000000, %00000000
276+  140C 00 00 00             defm %00000000, %00000000, %00000000
277+  140F 00 00 00             defm %00000000, %00000000, %00000000
278+  1412 0E 07 00             defm %00001110, %00000111, %00000000
279+  1415 15 0A 80             defm %00010101, %00001010, %10000000
280+  1418 24 92 40             defm %00100100, %10010010, %01000000
281+  141B 3B 9D C0             defm %00111011, %10011101, %11000000
282+  141E 24 92 40             defm %00100100, %10010010, %01000000
283+  1421 15 0A 80             defm %00010101, %00001010, %10000000
284+  1424 0E 07 00             defm %00001110, %00000111, %00000000
285+  1427 00 00 00             defm %00000000, %00000000, %00000000
286+  142A
287+  142A              level_8:
288+  142A
289+  142A 00 00 00             defm %00000000, %00000000, %00000000
290+  142D 00 00 00             defm %00000000, %00000000, %00000000
291+  1430 00 00 00             defm %00000000, %00000000, %00000000
292+  1433 7F FF E0             defm %01111111, %11111111, %11100000
293+  1436 40 00 20             defm %01000000, %00000000, %00100000
294+  1439 60 00 60             defm %01100000, %00000000, %01100000
295+  143C 50 00 A0             defm %01010000, %00000000, %10100000
296+  143F 48 01 20             defm %01001000, %00000001, %00100000
297+  1442 44 02 20             defm %01000100, %00000010, %00100000
298+  1445 42 04 20             defm %01000010, %00000100, %00100000
299+  1448 41 08 20             defm %01000001, %00001000, %00100000
300+  144B 40 90 20             defm %01000000, %10010000, %00100000
301+  144E 40 60 20             defm %01000000, %01100000, %00100000
302+  1451 40 60 20             defm %01000000, %01100000, %00100000
303+  1454 40 60 20             defm %01000000, %01100000, %00100000
304+  1457 40 60 20             defm %01000000, %01100000, %00100000
305+  145A 40 60 20             defm %01000000, %01100000, %00100000
306+  145D 40 90 20             defm %01000000, %10010000, %00100000
307+  1460 41 08 20             defm %01000001, %00001000, %00100000
308+  1463 42 04 20             defm %01000010, %00000100, %00100000
309+  1466 44 02 20             defm %01000100, %00000010, %00100000
310+  1469 48 01 20             defm %01001000, %00000001, %00100000
311+  146C 50 00 A0             defm %01010000, %00000000, %10100000
312+  146F 60 00 60             defm %01100000, %00000000, %01100000
313+  1472 40 00 20             defm %01000000, %00000000, %00100000
314+  1475 7F FF E0             defm %01111111, %11111111, %11100000
315+  1478 00 00 00             defm %00000000, %00000000, %00000000
316+  147B 00 00 00             defm %00000000, %00000000, %00000000
317+  147E 00 00 00             defm %00000000, %00000000, %00000000
318+  1481
319+  1481
320+  1481
321+  1481 BD 11 17 12  levels:        defw level_1, level_2, level_3, level_4, level_5, level_6, level_8, level_7
321+  1485 71 12 CB 12
321+  1489 25 13 7C 13
321+  148D 2A 14 D3 13
322+  1491
323+  1491
324+  1491
325+  1491
326+  1491              spr_initial_game_data:
327+  1491                      ;sprite number * 4 to but into top 6 bits (0-63) flips then in bit 0 and 1, and pallete byte
328+  1491 00 11                defm $00*4, palette_green_blue_pink ; sprite 0, flipped in x, palette 1
329+  1493 4C 05                defm 19*4, cyan ; sprite 1
330+  1495 4C 05                defm 19*4, cyan ; sprite 2
331+  1497 48 03                defm 18*4, pink; sprite 3
332+  1499 48 03                defm 18*4, pink ; sprite 4
333+  149B FC 00                defm $3f*4, 0 ; sprite 5                ;bullet sprite invisible
334+  149D                      ;starting positions x,y
335+  149D 84 80                defm 132, 128        ;sprite 0
336+  149F 00 C8                defm 0, 200        ;sprite 1
337+  14A1 00 96                defm 0, 150        ;sprite 2
338+  14A3 00 64                defm 0, 100        ;sprite 3
339+  14A5 00 32                defm 0, 50        ;sprite 4
340+  14A7 00 00                defm 0, 0        ;sprite 5
341+  14A9                      ;sprite velocities x,y
342+  14A9 01 00                defm 1,0                ;sprite 0                ;set velocity pointing left for bullet to pick up if stationary at start and shoot
343+  14AB 02 01                defm 2,1                ;sprite 1
344+  14AD 01 FF                defm 1,-1                ;sprite 2
345+  14AF FF 01                defm -1,1                ;sprite 3
346+  14B1 FE FF                defm -2,-1                ;sprite 4
347+  14B3 00 00                defm 0,0                ;sprite 5
348+  14B5
349+  14B5
350+  14B5
351+  14B5 00 00 01 00  row_starts:     defw row_0, row_1, row_2
351+  14B9 02 00
352+  14BB
353+  14BB
354+  14BB
355+  14BB              tile_column_to_sprite_x:
356+  14BB
357+  14BB ED E5 DD D5                 defm 237,229,221,213,205,197,189,181,173,165,157,149,141,133,125,117,109,101,93,85,77,69,61,53,45,37,29,21
357+  14BF CD C5 BD B5
357+  14C3 AD A5 9D 95
357+  14C7 8D 85 7D 75
357+  14CB 6D 65 5D 55
357+  14CF 4D 45 3D 35
357+  14D3 2D 25 1D 15
358+  14D7
359+  14D7
360+  14D7              tile_row_to_sprite_y:
361+  14D7
362+  14D7 FF F8 F0 E8                  defm 255,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8
362+  14DB E0 D8 D0 C8
362+  14DF C0 B8 B0 A8
362+  14E3 A0 98 90 88
362+  14E7 80 78 70 68
362+  14EB 60 58 50 48
362+  14EF 40 38 30 28
362+  14F3 20 18 10 08
363+  14F7
364+  14F7
365+  14F7
366+  14F7              EffectTable1:
367+  14F7
368+  14F7 21               defm %00100001      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
369+  14F8 7F               defm %01111111      //1 : initial base frequency
370+  14F9 87               defm %10000111   //2 : frequency increment (added to base freq)
371+  14FA 07               defm %00000111      //3 : upper bit = reverse lower 7 bits = duration
372+  14FB FE               defm -2              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
373+  14FC 01               defm 1          //5 : repeat
374+  14FD 17               defm %00010111      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
375+  14FE 00               defm 0              //7 : volume increment
376+  14FF
377+  14FF
378+  14FF 61               defm %01100001      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
379+  1500 7F               defm %01111111      //1 : initial base frequency
380+  1501 87               defm %10000111   //2 : frequency increment (added to base freq)
381+  1502 07               defm %00000111      //3 : upper bit = reverse lower 7 bits = duration
382+  1503 FE               defm -2              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
383+  1504 01               defm 1          //5 : repeat
384+  1505 17               defm %00010111      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
385+  1506 00               defm 0
386+  1507
387+  1507
388+  1507 E7               defm %11100111      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
389+  1508 17               defm %00010111      //1 : initial base frequency
390+  1509 03               defm %00000011   //2 : frequency increment (added to base freq)
391+  150A 1F               defm %00011111      //3 : upper bit = reverse lower 7 bits = duration
392+  150B 01               defm 1              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
393+  150C 01               defm 1           //5 : repeat
394+  150D 1D               defm %00011101      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
395+  150E 00               defm 0              //7 : volume increment
396+  150F
397+  150F 3F               defm %00111111      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
398+  1510 37               defm %00110111      //1 : initial base frequency
399+  1511 C3               defm %11000011   //2 : frequency increment (added to base freq)
400+  1512 1F               defm %00011111      //3 : upper bit = reverse lower 7 bits = duration
401+  1513 01               defm 1              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
402+  1514 01               defm 1           //5 : repeat
403+  1515 1D               defm %00011101      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
404+  1516 00               defm 0              //7 : volume increment
405+  1517
406+  1517
407+  1517
408+  1517               //   0 : upper 3 bits = frequency shift, lower 3 bits = wave select
409+  1517              //1 : initial base frequency
410+  1517              //2 : frequency increment (added to base freq)
411+  1517              //3 : upper bit = reverse lower 7 bits = duration
412+  1517              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
413+  1517              //5 : repeat
414+  1517              //6 : upper 4 bits = volume adjust type lower 4 bits = volume
415+  1517              //7 : volume increment
416+  1517
417+  1517
418+  1517                                                  // 1=coin
419+  1517                 // set 1, (hl)                 // 2=background hum
420+  1517                                          // 3=background hum med
421+  1517                                              // 4=background hum high1
422+  1517                                              // 5=background him higher
423+  1517                                              // 6=background hum even higher
424+  1517                                              // 7=extra life ding
425+  1517
426+  1517                                              // 1=endless med chirps
427+  1517                                              // 2=endless low chirps
428+  1517                                              // 3=endless high chirps
429+  1517                                              // 4=four med chirps
430+  1517                                              // 5=rising tone endless
431+  1517                                              // 6=c64 space loop
432+  1517                                              // 7=long tone unused
433+  1517
434+  1517
435+  1517                                              // 1=med blip (good for key?)
436+  1517                                              // 2=eat ghost
437+  1517                                              // 3=quick rising bloop
438+  1517                                              // 4=died
439+  1517                                              // 5=rising tone endless
440+  1517                                              // 6=higher blip
441+  1517                                              // 7=nothing
442+  1517
443+  1517
444+  1517              EffectTable2:
445+  1517
446+  1517
447+  1517 63               defm %01100011      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
448+  1518 3F               defm %00111111      //1 : initial base frequency
449+  1519 07               defm %00000111   //2 : frequency increment (added to base freq)
450+  151A 02               defm %00000010      //3 : upper bit = reverse lower 7 bits = duration
451+  151B FE               defm -2              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
452+  151C 01               defm 1          //5 : repeat
453+  151D 15               defm %00010101      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
454+  151E 00               defm 0
455+  151F
456+  151F
457+  151F 59 01 06 08      defm $59, $01, $06, $08, $00, $00, $02, $00
457+  1523 00 00 02 00
458+  1527 59 01 06 09      defm $59, $01, $06, $09, $00, $00, $02, $00
458+  152B 00 00 02 00
459+  152F 59 02 06 0A      defm $59, $02, $06, $0a, $00, $00, $02, $00
459+  1533 00 00 02 00
460+  1537 59 03 06 0B      defm $59, $03, $06, $0b, $00, $00, $02, $00
460+  153B 00 00 02 00
461+  153F 59 04 06 0C      defm $59, $04, $06, $0c, $00, $06, $02, $00
461+  1543 00 06 02 00
462+  1547 24 00 06 08      defm $24, $00, $06, $08, $02, $00, $0A, $00
462+  154B 02 00 0A 00
463+  154F 36 07 87 6F      defm $36, $07, $87, $6F, $00, $00, $04, $00
463+  1553 00 00 04 00
464+  1557 70 04 00 00      defm $70, $04, $00, $00, $00, $00, $08, $00
464+  155B 00 00 08 00
465+  155F
466+  155F              EffectTable3:
467+  155F
468+  155F 01               defm %00000001      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
469+  1560 1F               defm %00011111      //1 : initial base frequency
470+  1561 87               defm %10000111   //2 : frequency increment (added to base freq)
471+  1562 07               defm %00000111      //3 : upper bit = reverse lower 7 bits = duration
472+  1563 FE               defm -2              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
473+  1564 01               defm 1          //5 : repeat
474+  1565 13               defm %00010011      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
475+  1566 00               defm 0              //7 : volume increment
476+  1567
477+  1567
478+  1567 01               defm %00000001      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
479+  1568 3F               defm %00111111      //1 : initial base frequency
480+  1569 87               defm %10000111   //2 : frequency increment (added to base freq)
481+  156A 07               defm %00000111      //3 : upper bit = reverse lower 7 bits = duration
482+  156B FE               defm -2              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
483+  156C 01               defm 1          //5 : repeat
484+  156D 17               defm %00010111      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
485+  156E 00               defm 0              //7 : volume increment
486+  156F
487+  156F
488+  156F 1C 70 8B 08      defm $1C, $70, $8B, $08, $00, $01, $06, $00
488+  1573 00 01 06 00
489+  1577
490+  1577 47               defm %01000111      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
491+  1578 07               defm %00000111      //1 : initial base frequency
492+  1579 03               defm %00000011   //2 : frequency increment (added to base freq)
493+  157A 1F               defm %00011111      //3 : upper bit = reverse lower 7 bits = duration
494+  157B 01               defm 1              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
495+  157C 01               defm 1           //5 : repeat
496+  157D 1D               defm %00011101      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
497+  157E 00               defm 0              //7 : volume increment
498+  157F
499+  157F
500+  157F
501+  157F
502+  157F
503+  157F 06               defm %00000110
504+  1580 38               defm %00111000
505+  1581 FE               defm %11111110
506+  1582 10               defm %00010000 //3 : upper bit = reverse lower 7 bits = duration
507+  1583 F9               defm %11111001
508+  1584 04               defm %00000100
509+  1585 0F               defm %00001111
510+  1586 FB               defm 251
511+  1587
512+  1587 36 38 FE 15      defm $36, $38, $FE, $15, $F9, $01, $09, $fb
512+  158B F9 01 09 FB
513+  158F 26 38 FE 15      defm $26, $38, $FE, $15, $F9, $01, $09, $fb
513+  1593 F9 01 09 FB
514+  1597
515+  1597
516+  1597
517+  1597 01               defm %00000001      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
518+  1598 0F               defm %00001111      //1 : initial base frequency
519+  1599 87               defm %10000111   //2 : frequency increment (added to base freq)
520+  159A 07               defm %00000111      //3 : upper bit = reverse lower 7 bits = duration
521+  159B FE               defm -2              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
522+  159C 01               defm 1          //5 : repeat
523+  159D 11               defm %00010001      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
524+  159E 00               defm 0              //7 : volume increment
525+  159F
526+  159F
527+  159F 62 01 01 06      defm $62, $01, $01, $06, $00, $01, $07, $00
527+  15A3 00 01 07 00
528+  15A7
529+  15A7 01               defm %00000001      //0 : upper 3 bits = frequency shift, lower 3 bits = wave select
530+  15A8 0F               defm %00001111      //1 : initial base frequency
531+  15A9 87               defm %10000111   //2 : frequency increment (added to base freq)
532+  15AA 07               defm %00000111      //3 : upper bit = reverse lower 7 bits = duration
533+  15AB FE               defm -2              //4 : frequency increment (added to initial base frequency). Used when repeat > 1
534+  15AC 01               defm 1          //5 : repeat
535+  15AD 13               defm %00010011      //6 : upper 4 bits = volume adjust type lower 4 bits = volume
536+  15AE 00               defm 0              //7 : volume increment
537+  15AF
538+  15AF
539+  15AF
540+  15AF
541+  15AF
542+  15AF 01 02 04 08  lookup_3bb0:    defm 01, 02, 04, 08, $10, $20, $40, $80
542+  15B3 10 20 40 80
543+  15B7
544+  15B7 00 57 5C 61  lookup_3bb8:    defm 00, $57, $5C, $61, $67, $6D, $74, $7B
544+  15BB 67 6D 74 7B
545+  15BF 82 8A 92 9A                  defm $82, $8A, $92, $9A, $A3, $AD, $B8, $C3
545+  15C3 A3 AD B8 C3
546+  15C7
547+  15C7
548+  15C7
549+  15C7 D9 15 F8 15  channel_1_3BC8: defw song_1_ch1, song_2_ch1, song_3_ch1
549+  15CB E6 16
550+  15CD 5D 16 9A 16  channel_2_3BCC: defw song_1_ch2, song_2_ch2, song_3_ch2
550+  15D1 58 17
551+  15D3 E3 16 E3 16  channel_3_3CD0: defw song_1_ch3, song_2_ch3, song_2_ch3
551+  15D7 E3 16
552+  15D9
553+  15D9
554+  15D9 F1 02 F2 03  song_1_ch1:     defm $F1, $02, $f2, $03, $f3, $0f, $f4, $01
554+  15DD F3 0F F4 01
555+  15E1 82 70 69 82                  defm $82, $70, $69, $82, $70, $69, $83, $70
555+  15E5 70 69 83 70
556+  15E9 6A 83 70 6A                  defm $6A, $83, $70, $6A, $82, $70, $69, $82
556+  15ED 82 70 69 82
557+  15F1 70 69 89 8B                  defm $70, $69, $89, $8B, $8D, $8E, $FF
557+  15F5 8D 8E FF
558+  15F8
559+  15F8 F1 02 F2 03  song_2_ch1:    defm $F1, $02, $F2, $03, $F3, $0F, $F4, $01
559+  15FC F3 0F F4 01
560+  1600
561+  1600              song_2_loop_ch1:
562+  1600 67 50 30 47                 defm $67, $50, $30, $47, $30, $67, $50, $30
562+  1604 30 67 50 30
563+  1608
564+  1608 47 30 67 50                  defm $47, $30, $67, $50, $30, $47, $30, $4B, $10, $4C, $10, $4D, $10, $4E, $10, $67
564+  160C 30 47 30 4B
564+  1610 10 4C 10 4D
564+  1614 10 4E 10 67
565+  1618 50 30 47 30                  defm $50, $30, $47, $30, $67, $50, $30, $47, $30, $67, $50, $30, $47, $30, $4B, $10
565+  161C 67 50 30 47
565+  1620 30 67 50 30
565+  1624 47 30 4B 10
566+  1628 4C 10 4D 10                  defm $4C, $10, $4D, $10, $4E, $10, $60, $50, $30, $47, $30, $67, $50, $30, $47, $30
566+  162C 4E 10 60 50
566+  1630 30 47 30 67
566+  1634 50 30 47 30
567+  1638 67 50 30 47                  defm $67, $50, $30, $47, $30, $4B, $10, $4C, $10, $4D, $10, $4E, $10, $77, $20, $4E
567+  163C 30 4B 10 4C
567+  1640 10 4D 10 4E
567+  1644 10 77 20 4E
568+  1648 10 4D 10 4C                  defm $10, $4D, $10, $4C, $10, $4A, $10, $47, $10, $46, $10, $65, $30, $66, $30, $67
568+  164C 10 4A 10 47
568+  1650 10 46 10 65
568+  1654 30 66 30 67
569+  1658 40 70 F0                     defm $40, $70, $F0
570+  165B 00 16                        defw song_2_loop_ch1
571+  165D
572+  165D F1 00 F2 02  song_1_ch2:     defm $F1, $00, $F2, $02, $F3, $0F, $F4, $00, $42, $50, $4E, $50, $49, $50, $46, $50
572+  1661 F3 0F F4 00
572+  1665 42 50 4E 50
572+  1669 49 50 46 50
573+  166D 4E 49 70 66                  defm $4E, $49, $70, $66, $70, $43, $50, $4F, $50, $4A, $50, $47, $50, $47, $4A, $70
573+  1671 70 43 50 4F
573+  1675 50 4A 50 47
573+  1679 50 47 4A 70
574+  167D 67 70 42 50                  defm $67, $70, $42, $50, $4E, $50, $49, $50, $46, $50, $4E, $49, $70, $66, $70, $45
574+  1681 4E 50 49 50
574+  1685 46 50 4E 49
574+  1689 70 66 70 45
575+  168D 46 47 50 47                  defm $46, $47, $50, $47, $48, $49, $50, $49, $4A, $4B, $50, $6E, $FF
575+  1691 48 49 50 49
575+  1695 4A 4B 50 6E
575+  1699 FF
576+  169A
577+  169A
578+  169A F1 01 F2 01  song_2_ch2:     defm $F1, $01, $F2, $01, $F3, $0F, $F4, $00
578+  169E F3 0F F4 00
579+  16A2              song_2_loop_ch2:
580+  16A2 26 67 26 67                  defm $26, $67, $26, $67, $26, $67, $23, $44
580+  16A6 26 67 23 44
581+  16AA
582+  16AA 42 47 30 67                  defm $42, $47, $30, $67, $2A, $8B, $70, $26, $67, $26, $67, $26, $67, $23, $44, $42
582+  16AE 2A 8B 70 26
582+  16B2 67 26 67 26
582+  16B6 67 23 44 42
583+  16BA 47 30 67 23                  defm $47, $30, $67, $23, $84, $70, $26, $67, $26, $67, $26, $67, $23, $44, $42, $47
583+  16BE 84 70 26 67
583+  16C2 26 67 26 67
583+  16C6 23 44 42 47
584+  16CA 30 67 29 6A                  defm $30, $67, $29, $6A, $2B, $6C, $30, $2C, $6D, $40, $2B, $6C, $29, $6A, $67, $20
584+  16CE 2B 6C 30 2C
584+  16D2 6D 40 2B 6C
584+  16D6 29 6A 67 20
585+  16DA 29 6A 40 26                  defm $29, $6A, $40, $26, $87, $70, $F0
585+  16DE 87 70 F0
586+  16E1 A2 16                        defw song_2_loop_ch2
587+  16E3
588+  16E3              song_1_ch3:
589+  16E3              song_2_ch3:
590+  16E3              //song_3_ch3:
591+  16E3 FF 00 00                     defm $FF, 0, 0
592+  16E6
593+  16E6
594+  16E6              pause       equ 16
595+  16E6
596+  16E6
597+  16E6              note_length equ 32
598+  16E6
599+  16E6
600+  16E6
601+  16E6
602+  16E6              song_3_ch1:
603+  16E6
604+  16E6
605+  16E6 F1 04 F2 02                  defm $F1, $04, $f2, $02, $f3, $0f, $f4, $06
605+  16EA F3 0F F4 06
606+  16EE
607+  16EE              song_3_loop:
608+  16EE
609+  16EE
610+  16EE              round_1:
611+  16EE F3 0C                        defm $f3, $0C
612+  16F0 83                           defm note_length * 4 + 3
613+  16F1 F3 00                        defm $f3, $0
614+  16F3 90                           defm note_length * 4 + pause
615+  16F4 F3 0D                        defm $f3, $0D
616+  16F6 84                           defm note_length * 4 + 4
617+  16F7 F3 00                        defm $f3, $0
618+  16F9 90                           defm note_length * 4 + pause
619+  16FA F3 0E                        defm $f3, $0E
620+  16FC 8B                           defm note_length * 4 + 11
621+  16FD F3 00                        defm $f3, $0
622+  16FF 90                           defm note_length * 4 + pause
623+  1700 F3 0F                        defm $f3, $0F
624+  1702 8C                           defm note_length * 4 + 12
625+  1703 F3 00                        defm $f3, $0
626+  1705 90                           defm note_length * 4 + pause
627+  1706
628+  1706 F3 0C                        defm $f3, $0C
629+  1708 83                           defm note_length * 4 + 3
630+  1709 F3 00                        defm $f3, $0
631+  170B 90                           defm note_length * 4 + pause
632+  170C F3 0D                        defm $f3, $0D
633+  170E 84                           defm note_length * 4 + 4
634+  170F F3 00                        defm $f3, $0
635+  1711 90                           defm note_length * 4 + pause
636+  1712 F3 0E                        defm $f3, $0E
637+  1714 8B                           defm note_length * 4 + 11
638+  1715 F3 00                        defm $f3, $0
639+  1717 90                           defm note_length * 4 + pause
640+  1718 F3 0F                        defm $f3, $0F
641+  171A 8C                           defm note_length * 4 + 12
642+  171B                               ;defm $f3, $0
643+  171B 8B                           defm note_length * 4 + 11
644+  171C
645+  171C
646+  171C F3 0C                        defm $f3, $0C
647+  171E 83                           defm note_length * 4 + 3
648+  171F F3 00                        defm $f3, $0
649+  1721 90                           defm note_length * 4 + pause
650+  1722 F3 0D                        defm $f3, $0D
651+  1724 84                           defm note_length * 4 + 4
652+  1725 F3 00                        defm $f3, $0
653+  1727 90                           defm note_length * 4 + pause
654+  1728 F3 0E                        defm $f3, $0E
655+  172A 8B                           defm note_length * 4 + 11
656+  172B F3 00                         defm $f3, $0
657+  172D 90                           defm note_length * 4 + pause
658+  172E F3 0F                         defm $f3, $0F
659+  1730 8C                           defm note_length * 4 + 12
660+  1731 F3 00                         defm $f3, $0
661+  1733 90                           defm note_length * 4 + pause
662+  1734
663+  1734 F3 0C                        defm $f3, $0C
664+  1736 83                           defm note_length * 4 + 3
665+  1737 F3 00                        defm $f3, $0
666+  1739 90                           defm note_length * 4 + pause
667+  173A F3 0D                        defm $f3, $0D
668+  173C 84                           defm note_length * 4 + 4
669+  173D F3 00                        defm $f3, $0
670+  173F 90                           defm note_length * 4 + pause
671+  1740 F3 0E                        defm $f3, $0E
672+  1742 8C                           defm note_length * 4 + 12
673+  1743 F3 00                         defm $f3, $0
674+  1745 90                           defm note_length * 4 + pause
675+  1746 F3 0F                         defm $f3, $0F
676+  1748 8B                           defm note_length * 4 + 11
677+  1749 8A                           defm note_length * 4 + 10
678+  174A
679+  174A F0                           defm $f0
680+  174B E6 16                        defw song_3_ch1
681+  174D
682+  174D F1 00 F2 03  song_3_ch3:     defm $F1, $00, $F2, $03, $F3, $08, $F4, $04
682+  1751 F3 08 F4 04
683+  1755 F0                           defm $F0
684+  1756 60 17                        defw song_3_loop_2
685+  1758
686+  1758 F1 00 F2 02  song_3_ch2:     defm $F1, $00, $F2, $02, $F3, $08, $F4, $03
686+  175C F3 08 F4 03
687+  1760              song_3_loop_2:
688+  1760
689+  1760 90 90 90...                  BLOCK 64, note_length * 4 + pause
690+  17A0 84                           defm note_length * 4 + 4
691+  17A1 83                           defm note_length * 4 + 3
692+  17A2 82                           defm note_length * 4 + 2
693+  17A3 C1                           defm note_length * 6 + 1
694+  17A4
695+  17A4 F3 00                        defm $f3, 0
696+  17A6 90                           defm note_length * 4 + pause
697+  17A7 F3 08                         defm $f3, 8
698+  17A9
699+  17A9 81                           defm note_length * 4 + 1
700+  17AA 82                           defm note_length * 4 + 2
701+  17AB 83                           defm note_length * 4 + 3
702+  17AC C4                           defm note_length * 6 + 4
703+  17AD
704+  17AD F3 00                        defm $f3, 0
705+  17AF 90                           defm note_length * 4 + pause
706+  17B0 F3 08                         defm $f3, 8
707+  17B2
708+  17B2
709+  17B2 84                           defm note_length * 4 + 4
710+  17B3 83                           defm note_length * 4 + 3
711+  17B4 82                           defm note_length * 4 + 2
712+  17B5 C1                           defm note_length * 6 + 1
713+  17B6
714+  17B6 F3 00                         defm $f3, 0
715+  17B8 90                           defm note_length * 4 + pause
716+  17B9 F3 08                         defm $f3, 8
717+  17BB
718+  17BB
719+  17BB 86                           defm note_length * 4 + 6
720+  17BC 85                           defm note_length * 4 + 5
721+  17BD 84                           defm note_length * 4 + 4
722+  17BE 83                           defm note_length * 4 + 3
723+  17BF
724+  17BF 90                           defm note_length * 4 + pause
725+  17C0 84                           defm note_length * 4 + 4
726+  17C1 83                           defm note_length * 4 + 3
727+  17C2
728+  17C2 90                           defm note_length * 4 + pause
729+  17C3
730+  17C3
731+  17C3 F1 00 F2 02                  defm $F1, $00, $F2, $02, $F3, $08, $F4, $02
731+  17C7 F3 08 F4 02
732+  17CB
733+  17CB 84                           defm note_length * 4 + 4
734+  17CC 83                           defm note_length * 4 + 3
735+  17CD 84                           defm note_length * 4 + 4
736+  17CE C1                           defm note_length * 6 + 1
737+  17CF
738+  17CF F3 00                        defm $f3, 0
739+  17D1 90                           defm note_length * 4 + pause
740+  17D2 F3 08                         defm $f3, 8
741+  17D4
742+  17D4 81                           defm note_length * 4 + 1
743+  17D5 82                           defm note_length * 4 + 2
744+  17D6 83                           defm note_length * 4 + 3
745+  17D7 C2                           defm note_length * 6 + 2
746+  17D8
747+  17D8 F3 00                        defm $f3, 0
748+  17DA 90                           defm note_length * 4 + pause
749+  17DB F3 08                         defm $f3, 8
750+  17DD
751+  17DD
752+  17DD 84                           defm note_length * 4 + 4
753+  17DE 83                           defm note_length * 4 + 3
754+  17DF 84                           defm note_length * 4 + 4
755+  17E0 C1                           defm note_length * 6 + 1
756+  17E1
757+  17E1 F3 00                         defm $f3, 0
758+  17E3 90                           defm note_length * 4 + pause
759+  17E4 F3 08                         defm $f3, 8
760+  17E6
761+  17E6
762+  17E6 86                           defm note_length * 4 + 6
763+  17E7 85                           defm note_length * 4 + 5
764+  17E8 84                           defm note_length * 4 + 4
765+  17E9 83                           defm note_length * 4 + 3
766+  17EA
767+  17EA 90                           defm note_length * 4 + pause
768+  17EB 84                           defm note_length * 4 + 4
769+  17EC 83                           defm note_length * 4 + 3
770+  17ED
771+  17ED F3 00                         defm $f3, 0
772+  17EF 90                           defm note_length * 4 + pause
773+  17F0
774+  17F0
775+  17F0
776+  17F0
777+  17F0
778+  17F0 F0                           defm $f0
779+  17F1 60 17                        defw song_3_loop_2
780+  17F3
# file closed: scripts/data/rom_6f.asm
 68   17F3
 69   17F3                      org $2ffe        ; attempting the crc
 70   2FFE
 71   2FFE 00                   defm $0
 72   2FFF FD                   defm $fd
 73   3000
 74   3000
 75   3000
 76   3000                     savebin "C:/Users/NickSherman/Dropbox/Channel F/Dilithium Lift/MAME/roms/pacman/pacman.6e",$0000, $1000
 77   3000                      savebin "C:/Users/NickSherman/Dropbox/Channel F/Dilithium Lift/MAME/roms/pacman/pacman.6f",$1000, $1000
 78   3000                      savebin "C:/Users/NickSherman/Dropbox/Channel F/Dilithium Lift/MAME/roms/pacman/pacman.6h",$2000, $1000
 79   3000                      savebin "C:/Users/NickSherman/Dropbox/Channel F/Dilithium Lift/MAME/roms/pacman/pacman.6j",$3000, $1000
 80   3000
 81   3000                     ; savebin "C:/Dropbox/Dropbox/Channel F/Pacman/MAME/roms/pacman/pacman.6e",$0000, $1000
 82   3000                      ;savebin "C:/Dropbox/Dropbox/Channel F/Pacman/MAME/roms/pacman/pacman.6f",$1000, $1000
 83   3000                      ;savebin "C:/Dropbox/Dropbox/Channel F/Pacman/MAME/roms/pacman/pacman.6h",$2000, $1000
 84   3000                      ;savebin "C:/Dropbox/Dropbox/Channel F/Pacman/MAME/roms/pacman/pacman.6j",$3000, $1000
 85   3000
# file closed: main.asm 
